/*
==============
Preload_SpawnGroup
==============
*/

void __fastcall Preload_SpawnGroup(const DBStreamStart streamStart)
{
  ?Preload_SpawnGroup@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_SpawnGroupArray
==============
*/

void __fastcall Preload_SpawnGroupArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_SpawnGroupArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ClientExploderDef
==============
*/

void __fastcall Load_ClientExploderDef(const DBStreamStart streamStart)
{
  ?Load_ClientExploderDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_CollisionTile
==============
*/

void __fastcall Postload_CollisionTile(const DBStreamStart streamStart)
{
  ?Postload_CollisionTile@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_AudioPASpeakerArray
==============
*/

int __fastcall Mark_AudioPASpeakerArray(const unsigned __int64 count)
{
  return ?Mark_AudioPASpeakerArray@@YAH_K@Z(count);
}

/*
==============
AllocPostload_ClientLoopSoundDef
==============
*/

ClientLoopSoundDef *__fastcall AllocPostload_ClientLoopSoundDef()
{
  return ?AllocPostload_ClientLoopSoundDef@@YAPEAUClientLoopSoundDef@@XZ();
}

/*
==============
Load_ProcessStructLayout_PhysicsCapacities
==============
*/

void Load_ProcessStructLayout_PhysicsCapacities(void)
{
  ?Load_ProcessStructLayout_PhysicsCapacities@@YAXXZ();
}

/*
==============
Mark_CTAudRvbPanInfoArray
==============
*/

int __fastcall Mark_CTAudRvbPanInfoArray(const unsigned __int64 count)
{
  return ?Mark_CTAudRvbPanInfoArray@@YAH_K@Z(count);
}

/*
==============
Mark_ClientTriggerModel
==============
*/

int __fastcall Mark_ClientTriggerModel()
{
  return ?Mark_ClientTriggerModel@@YAHXZ();
}

/*
==============
AllocLoad_TriggerModel
==============
*/

TriggerModel *__fastcall AllocLoad_TriggerModel()
{
  return ?AllocLoad_TriggerModel@@YAPEAUTriggerModel@@XZ();
}

/*
==============
Mark_ClientTriggerHullArray
==============
*/

int __fastcall Mark_ClientTriggerHullArray(const unsigned __int64 count)
{
  return ?Mark_ClientTriggerHullArray@@YAH_K@Z(count);
}

/*
==============
Preload_ClientTriggerBlend
==============
*/

void __fastcall Preload_ClientTriggerBlend(const DBStreamStart streamStart)
{
  ?Preload_ClientTriggerBlend@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_alignHavokShapeData_tStream
==============
*/

void __fastcall Postload_alignHavokShapeData_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_alignHavokShapeData_tStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_SpawnGroupZone
==============
*/

SpawnGroupZone *__fastcall AllocPostload_SpawnGroupZone()
{
  return ?AllocPostload_SpawnGroupZone@@YAPEAUSpawnGroupZone@@XZ();
}

/*
==============
Postload_ClientReactiveEntDefArray
==============
*/

void __fastcall Postload_ClientReactiveEntDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientReactiveEntDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_SpawnPointRecordListArray
==============
*/

void __fastcall Preload_SpawnPointRecordListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_SpawnPointRecordListArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_SpawnGroupClusterArray
==============
*/

void __fastcall Preload_SpawnGroupClusterArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_SpawnGroupClusterArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_SpawnPointRecordListArray
==============
*/

void __fastcall Postload_SpawnPointRecordListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_SpawnPointRecordListArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ServerExploderDefStream
==============
*/

void __fastcall Preload_ServerExploderDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ServerExploderDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_alignHavokShapeData_tStream
==============
*/

void __fastcall Load_alignHavokShapeData_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_alignHavokShapeData_tStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CollisionHeatmapEntryStream
==============
*/

void __fastcall Load_CollisionHeatmapEntryStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_CollisionHeatmapEntryStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_CollisionTilePtr
==============
*/

int __fastcall Mark_CollisionTilePtr()
{
  return ?Mark_CollisionTilePtr@@YAHXZ();
}

/*
==============
Load_TriggerHullArray
==============
*/

void __fastcall Load_TriggerHullArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_TriggerHullArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_SpawnPointEntityRecord
==============
*/

void __fastcall Postload_SpawnPointEntityRecord(const DBStreamStart streamStart)
{
  ?Postload_SpawnPointEntityRecord@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_VariableType
==============
*/

VariableType *__fastcall AllocPostload_VariableType()
{
  return ?AllocPostload_VariableType@@YAPEAW4VariableType@@XZ();
}

/*
==============
AllocLoad_ServerExploderDef
==============
*/

ServerExploderDef *__fastcall AllocLoad_ServerExploderDef()
{
  return ?AllocLoad_ServerExploderDef@@YAPEAUServerExploderDef@@XZ();
}

/*
==============
Load_ProcessStructLayout_ClientMapTriggers
==============
*/

void Load_ProcessStructLayout_ClientMapTriggers(void)
{
  ?Load_ProcessStructLayout_ClientMapTriggers@@YAXXZ();
}

/*
==============
Load_CollisionTilePtrStream
==============
*/

void __fastcall Load_CollisionTilePtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_CollisionTilePtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ClientTriggerModel
==============
*/

ClientTriggerModel *__fastcall AllocPostload_ClientTriggerModel()
{
  return ?AllocPostload_ClientTriggerModel@@YAPEAUClientTriggerModel@@XZ();
}

/*
==============
Load_SpawnPointRecordList
==============
*/

void __fastcall Load_SpawnPointRecordList(const DBStreamStart streamStart)
{
  ?Load_SpawnPointRecordList@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ClientSideEffects
==============
*/

void __fastcall Load_ClientSideEffects(const DBStreamStart streamStart)
{
  ?Load_ClientSideEffects@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ClientOneshotEffectDef
==============
*/

int __fastcall Mark_ClientOneshotEffectDef()
{
  return ?Mark_ClientOneshotEffectDef@@YAHXZ();
}

/*
==============
AllocLoad_ClientTriggerBlendNode
==============
*/

ClientTriggerBlendNode *__fastcall AllocLoad_ClientTriggerBlendNode()
{
  return ?AllocLoad_ClientTriggerBlendNode@@YAPEAUClientTriggerBlendNode@@XZ();
}

/*
==============
AllocLoad_ClientEntAnchor
==============
*/

ClientEntAnchor *__fastcall AllocLoad_ClientEntAnchor()
{
  return ?AllocLoad_ClientEntAnchor@@YAPEAUClientEntAnchor@@XZ();
}

/*
==============
Mark_AddonMapEnts
==============
*/

int __fastcall Mark_AddonMapEnts()
{
  return ?Mark_AddonMapEnts@@YAHXZ();
}

/*
==============
Preload_TriggerWindingPointArray
==============
*/

void __fastcall Preload_TriggerWindingPointArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_TriggerWindingPointArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ClientMapTriggers
==============
*/

void __fastcall Load_ClientMapTriggers(const DBStreamStart streamStart)
{
  ?Load_ClientMapTriggers@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_CollisionHeatmapEntry
==============
*/

CollisionHeatmapEntry *__fastcall AllocPreload_CollisionHeatmapEntry()
{
  return ?AllocPreload_CollisionHeatmapEntry@@YAPEAUCollisionHeatmapEntry@@XZ();
}

/*
==============
Preload_ServerExploderDef
==============
*/

void __fastcall Preload_ServerExploderDef(const DBStreamStart streamStart)
{
  ?Preload_ServerExploderDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ClientTriggerBlendNode
==============
*/

void __fastcall Preload_ClientTriggerBlendNode(const DBStreamStart streamStart)
{
  ?Preload_ClientTriggerBlendNode@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_StaticModelCollisionCompressedModelListArray
==============
*/

void __fastcall Load_StaticModelCollisionCompressedModelListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_StaticModelCollisionCompressedModelListArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ClientLoopSoundDef
==============
*/

ClientLoopSoundDef *__fastcall AllocPreload_ClientLoopSoundDef()
{
  return ?AllocPreload_ClientLoopSoundDef@@YAPEAUClientLoopSoundDef@@XZ();
}

/*
==============
Mark_CollisionTileArray
==============
*/

int __fastcall Mark_CollisionTileArray(const unsigned __int64 count)
{
  return ?Mark_CollisionTileArray@@YAH_K@Z(count);
}

/*
==============
Postload_ClientRootDefArray
==============
*/

void __fastcall Postload_ClientRootDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientRootDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_StaticModelCollisionModelListStream
==============
*/

void __fastcall Preload_StaticModelCollisionModelListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_StaticModelCollisionModelListStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_StaticModelCollisionInstance
==============
*/

void __fastcall Load_StaticModelCollisionInstance(const DBStreamStart streamStart)
{
  ?Load_StaticModelCollisionInstance@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_AudioPropagationEdge
==============
*/

void __fastcall Preload_AudioPropagationEdge(const DBStreamStart streamStart)
{
  ?Preload_AudioPropagationEdge@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_AudioPropagationEdgeStream
==============
*/

void __fastcall Preload_AudioPropagationEdgeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_AudioPropagationEdgeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_TriggerSlab
==============
*/

TriggerSlab *__fastcall AllocPostload_TriggerSlab()
{
  return ?AllocPostload_TriggerSlab@@YAPEAUTriggerSlab@@XZ();
}

/*
==============
Load_ProcessStructLayout_CTAudRvbPanInfo
==============
*/

void Load_ProcessStructLayout_CTAudRvbPanInfo(void)
{
  ?Load_ProcessStructLayout_CTAudRvbPanInfo@@YAXXZ();
}

/*
==============
Preload_ClientTriggerHullStream
==============
*/

void __fastcall Preload_ClientTriggerHullStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientTriggerHullStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_TriggerModel
==============
*/

int __fastcall Mark_TriggerModel()
{
  return ?Mark_TriggerModel@@YAHXZ();
}

/*
==============
AllocPreload_MapEdgeList
==============
*/

MapEdgeList *__fastcall AllocPreload_MapEdgeList()
{
  return ?AllocPreload_MapEdgeList@@YAPEAUMapEdgeList@@XZ();
}

/*
==============
Postload_StaticModelCollisionCompressedModel
==============
*/

void __fastcall Postload_StaticModelCollisionCompressedModel(const DBStreamStart streamStart)
{
  ?Postload_StaticModelCollisionCompressedModel@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_TriggerSlab
==============
*/

void __fastcall Postload_TriggerSlab(const DBStreamStart streamStart)
{
  ?Postload_TriggerSlab@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_TriggerSlab
==============
*/

void __fastcall Preload_TriggerSlab(const DBStreamStart streamStart)
{
  ?Preload_TriggerSlab@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_StaticModelCollisionCompressedModelList
==============
*/

StaticModelCollisionCompressedModelList *__fastcall AllocPostload_StaticModelCollisionCompressedModelList()
{
  return ?AllocPostload_StaticModelCollisionCompressedModelList@@YAPEAUStaticModelCollisionCompressedModelList@@XZ();
}

/*
==============
AllocPostload_StaticModelCollisionCompressedInstance
==============
*/

StaticModelCollisionCompressedInstance *__fastcall AllocPostload_StaticModelCollisionCompressedInstance()
{
  return ?AllocPostload_StaticModelCollisionCompressedInstance@@YAPEAUStaticModelCollisionCompressedInstance@@XZ();
}

/*
==============
Preload_ClientLoopSoundDef
==============
*/

void __fastcall Preload_ClientLoopSoundDef(const DBStreamStart streamStart)
{
  ?Preload_ClientLoopSoundDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ClientEntAnchor
==============
*/

void Load_ProcessStructLayout_ClientEntAnchor(void)
{
  ?Load_ProcessStructLayout_ClientEntAnchor@@YAXXZ();
}

/*
==============
Mark_TriggerWindingPoint
==============
*/

int __fastcall Mark_TriggerWindingPoint()
{
  return ?Mark_TriggerWindingPoint@@YAHXZ();
}

/*
==============
AllocLoad_StaticModelCollisionModelList
==============
*/

StaticModelCollisionModelList *__fastcall AllocLoad_StaticModelCollisionModelList()
{
  return ?AllocLoad_StaticModelCollisionModelList@@YAPEAUStaticModelCollisionModelList@@XZ();
}

/*
==============
Postload_ClientIntervalSoundDef
==============
*/

void __fastcall Postload_ClientIntervalSoundDef(const DBStreamStart streamStart)
{
  ?Postload_ClientIntervalSoundDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_CollisionTilePtr
==============
*/

CollisionTile **__fastcall AllocPreload_CollisionTilePtr()
{
  return ?AllocPreload_CollisionTilePtr@@YAPEAPEAUCollisionTile@@XZ();
}

/*
==============
Postload_ClientTriggerHullArray
==============
*/

void __fastcall Postload_ClientTriggerHullArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientTriggerHullArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_StaticModelCollisionModelListArray
==============
*/

void __fastcall Load_StaticModelCollisionModelListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_StaticModelCollisionModelListArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_PhysicsCapacitiesArray
==============
*/

void __fastcall Postload_PhysicsCapacitiesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_PhysicsCapacitiesArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_StaticModelCollisionCompressedModel
==============
*/

void __fastcall Preload_StaticModelCollisionCompressedModel(const DBStreamStart streamStart)
{
  ?Preload_StaticModelCollisionCompressedModel@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ClientLoopSoundDefArray
==============
*/

int __fastcall Mark_ClientLoopSoundDefArray(const unsigned __int64 count)
{
  return ?Mark_ClientLoopSoundDefArray@@YAH_K@Z(count);
}

/*
==============
Postload_TriggerSlabStream
==============
*/

void __fastcall Postload_TriggerSlabStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_TriggerSlabStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_CollMapLookupEntry
==============
*/

CollMapLookupEntry *__fastcall AllocLoad_CollMapLookupEntry()
{
  return ?AllocLoad_CollMapLookupEntry@@YAPEAUCollMapLookupEntry@@XZ();
}

/*
==============
Load_ProcessStructLayout_MapEdgeList
==============
*/

void Load_ProcessStructLayout_MapEdgeList(void)
{
  ?Load_ProcessStructLayout_MapEdgeList@@YAXXZ();
}

/*
==============
AllocLoad_ClientIntervalSoundDef
==============
*/

ClientIntervalSoundDef *__fastcall AllocLoad_ClientIntervalSoundDef()
{
  return ?AllocLoad_ClientIntervalSoundDef@@YAPEAUClientIntervalSoundDef@@XZ();
}

/*
==============
Load_AddonMapEntsStream
==============
*/

void __fastcall Load_AddonMapEntsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_AddonMapEntsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_PhysicsCapacitiesArray
==============
*/

int __fastcall Mark_PhysicsCapacitiesArray(const unsigned __int64 count)
{
  return ?Mark_PhysicsCapacitiesArray@@YAH_K@Z(count);
}

/*
==============
Load_AudioPASpeakerStream
==============
*/

void __fastcall Load_AudioPASpeakerStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_AudioPASpeakerStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ClientTriggerModel
==============
*/

void __fastcall Postload_ClientTriggerModel(const DBStreamStart streamStart)
{
  ?Postload_ClientTriggerModel@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_TriggerWinding
==============
*/

TriggerWinding *__fastcall AllocPostload_TriggerWinding()
{
  return ?AllocPostload_TriggerWinding@@YAPEAUTriggerWinding@@XZ();
}

/*
==============
Load_SpawnPointRecordListStream
==============
*/

void __fastcall Load_SpawnPointRecordListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_SpawnPointRecordListStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ServerExploderDef
==============
*/

void __fastcall Postload_ServerExploderDef(const DBStreamStart streamStart)
{
  ?Postload_ServerExploderDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_SpawnPointEntityRecordStream
==============
*/

void __fastcall Load_SpawnPointEntityRecordStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_SpawnPointEntityRecordStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_SplinePointEntityRecordStream
==============
*/

void __fastcall Load_SplinePointEntityRecordStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_SplinePointEntityRecordStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ClientTriggerHull
==============
*/

void __fastcall Postload_ClientTriggerHull(const DBStreamStart streamStart)
{
  ?Postload_ClientTriggerHull@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_StaticModelCollisionModel
==============
*/

StaticModelCollisionModel *__fastcall AllocPreload_StaticModelCollisionModel()
{
  return ?AllocPreload_StaticModelCollisionModel@@YAPEAUStaticModelCollisionModel@@XZ();
}

/*
==============
Postload_MapEdgeListStream
==============
*/

void __fastcall Postload_MapEdgeListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_MapEdgeListStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_SpawnerArray
==============
*/

void __fastcall Postload_SpawnerArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_SpawnerArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_MapEnts
==============
*/

void __fastcall Load_MapEnts(const DBStreamStart streamStart)
{
  ?Load_MapEnts@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_AudioPropagationEdge
==============
*/

void Load_ProcessStructLayout_AudioPropagationEdge(void)
{
  ?Load_ProcessStructLayout_AudioPropagationEdge@@YAXXZ();
}

/*
==============
Load_ClientLoopSoundDefStream
==============
*/

void __fastcall Load_ClientLoopSoundDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientLoopSoundDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_SpawnGroup
==============
*/

int __fastcall Mark_SpawnGroup()
{
  return ?Mark_SpawnGroup@@YAHXZ();
}

/*
==============
Load_ClientTriggerModelArray
==============
*/

void __fastcall Load_ClientTriggerModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientTriggerModelArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ClientTriggerBlendStream
==============
*/

void __fastcall Preload_ClientTriggerBlendStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientTriggerBlendStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_alignHavokShapeData_t
==============
*/

char *__fastcall AllocPreload_alignHavokShapeData_t()
{
  return ?AllocPreload_alignHavokShapeData_t@@YAPEADXZ();
}

/*
==============
Preload_TriggerModel
==============
*/

void __fastcall Preload_TriggerModel(const DBStreamStart streamStart)
{
  ?Preload_TriggerModel@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ClientExploderDef
==============
*/

void Load_ProcessStructLayout_ClientExploderDef(void)
{
  ?Load_ProcessStructLayout_ClientExploderDef@@YAXXZ();
}

/*
==============
Preload_TriggerWindingPointStream
==============
*/

void __fastcall Preload_TriggerWindingPointStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_TriggerWindingPointStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CollisionTilePtrArray
==============
*/

void __fastcall Load_CollisionTilePtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_CollisionTilePtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ClientIntervalSoundDef
==============
*/

ClientIntervalSoundDef *__fastcall AllocPostload_ClientIntervalSoundDef()
{
  return ?AllocPostload_ClientIntervalSoundDef@@YAPEAUClientIntervalSoundDef@@XZ();
}

/*
==============
Postload_StaticModelCollisionInstance
==============
*/

void __fastcall Postload_StaticModelCollisionInstance(const DBStreamStart streamStart)
{
  ?Postload_StaticModelCollisionInstance@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_MapEdgeListPtr
==============
*/

MapEdgeList **__fastcall AllocLoad_MapEdgeListPtr()
{
  return ?AllocLoad_MapEdgeListPtr@@YAPEAPEAUMapEdgeList@@XZ();
}

/*
==============
Load_ProcessStructLayout_AddonMapEnts
==============
*/

void Load_ProcessStructLayout_AddonMapEnts(void)
{
  ?Load_ProcessStructLayout_AddonMapEnts@@YAXXZ();
}

/*
==============
Preload_CreateFxPaletteDefArray
==============
*/

void __fastcall Preload_CreateFxPaletteDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_CreateFxPaletteDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_SpawnPointRecordListStream
==============
*/

void __fastcall Postload_SpawnPointRecordListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_SpawnPointRecordListStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_StaticModelCollisionCompressedModelListArray
==============
*/

void __fastcall Preload_StaticModelCollisionCompressedModelListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_StaticModelCollisionCompressedModelListArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_TriggerModel
==============
*/

void __fastcall Postload_TriggerModel(const DBStreamStart streamStart)
{
  ?Postload_TriggerModel@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ClientTriggerHullArray
==============
*/

void __fastcall Preload_ClientTriggerHullArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientTriggerHullArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_SpawnGroup
==============
*/

SpawnGroup *__fastcall AllocLoad_SpawnGroup()
{
  return ?AllocLoad_SpawnGroup@@YAPEAUSpawnGroup@@XZ();
}

/*
==============
Postload_ClientLoopSoundDef
==============
*/

void __fastcall Postload_ClientLoopSoundDef(const DBStreamStart streamStart)
{
  ?Postload_ClientLoopSoundDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_CreateFxAssetDataStream
==============
*/

void __fastcall Postload_CreateFxAssetDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_CreateFxAssetDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_cmodel_tArray
==============
*/

void __fastcall Load_cmodel_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_cmodel_tArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_SplineRecordListStream
==============
*/

void __fastcall Preload_SplineRecordListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_SplineRecordListStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_SpawnGroupZone
==============
*/

void __fastcall Preload_SpawnGroupZone(const DBStreamStart streamStart)
{
  ?Preload_SpawnGroupZone@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_MapTriggers
==============
*/

MapTriggers *__fastcall AllocPreload_MapTriggers()
{
  return ?AllocPreload_MapTriggers@@YAPEAUMapTriggers@@XZ();
}

/*
==============
Load_ClientExploderDefArray
==============
*/

void __fastcall Load_ClientExploderDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientExploderDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_AudioPropagationNode
==============
*/

int __fastcall Mark_AudioPropagationNode()
{
  return ?Mark_AudioPropagationNode@@YAHXZ();
}

/*
==============
Mark_TriggerWindingPointArray
==============
*/

int __fastcall Mark_TriggerWindingPointArray(const unsigned __int64 count)
{
  return ?Mark_TriggerWindingPointArray@@YAH_K@Z(count);
}

/*
==============
Load_TriggerSlab
==============
*/

void __fastcall Load_TriggerSlab(const DBStreamStart streamStart)
{
  ?Load_TriggerSlab@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_StaticModelCollisionCompressedInstanceStream
==============
*/

void __fastcall Preload_StaticModelCollisionCompressedInstanceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_StaticModelCollisionCompressedInstanceStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ClientReactiveEntDef
==============
*/

void Load_ProcessStructLayout_ClientReactiveEntDef(void)
{
  ?Load_ProcessStructLayout_ClientReactiveEntDef@@YAXXZ();
}

/*
==============
Postload_ServerExploderDefArray
==============
*/

void __fastcall Postload_ServerExploderDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ServerExploderDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_SpawnPointRecordList
==============
*/

int __fastcall Mark_SpawnPointRecordList()
{
  return ?Mark_SpawnPointRecordList@@YAHXZ();
}

/*
==============
AllocLoad_SplinePointRecordList
==============
*/

SplinePointRecordList *__fastcall AllocLoad_SplinePointRecordList()
{
  return ?AllocLoad_SplinePointRecordList@@YAPEAUSplinePointRecordList@@XZ();
}

/*
==============
Load_ProcessStructLayout_clipMap_ptr
==============
*/

void Load_ProcessStructLayout_clipMap_ptr(void)
{
  ?Load_ProcessStructLayout_clipMap_ptr@@YAXXZ();
}

/*
==============
Load_ClientRootDefArray
==============
*/

void __fastcall Load_ClientRootDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientRootDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_AudioPropagationEdge
==============
*/

void __fastcall Load_AudioPropagationEdge(const DBStreamStart streamStart)
{
  ?Load_AudioPropagationEdge@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_CollisionTile
==============
*/

void __fastcall Preload_CollisionTile(const DBStreamStart streamStart)
{
  ?Preload_CollisionTile@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ClientOneshotEffectDefStream
==============
*/

void __fastcall Postload_ClientOneshotEffectDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientOneshotEffectDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ClientTriggerModelStream
==============
*/

void __fastcall Load_ClientTriggerModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientTriggerModelStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_DynEntityListPtr
==============
*/

void __fastcall Load_DynEntityListPtr(const DBStreamStart streamStart)
{
  ?Load_DynEntityListPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_VariableType
==============
*/

void Load_ProcessStructLayout_VariableType(void)
{
  ?Load_ProcessStructLayout_VariableType@@YAXXZ();
}

/*
==============
Postload_SplinePointEntityRecordStream
==============
*/

void __fastcall Postload_SplinePointEntityRecordStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_SplinePointEntityRecordStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_clipMap_ptr
==============
*/

clipMap_t **__fastcall AllocLoad_clipMap_ptr()
{
  return ?AllocLoad_clipMap_ptr@@YAPEAPEAUclipMap_t@@XZ();
}

/*
==============
AllocPreload_ClientExploderDef
==============
*/

ClientExploderDef *__fastcall AllocPreload_ClientExploderDef()
{
  return ?AllocPreload_ClientExploderDef@@YAPEAUClientExploderDef@@XZ();
}

/*
==============
Mark_clipMap_ptrArray
==============
*/

int __fastcall Mark_clipMap_ptrArray(const unsigned __int64 count)
{
  return ?Mark_clipMap_ptrArray@@YAH_K@Z(count);
}

/*
==============
Preload_AudioPropagationNodeArray
==============
*/

void __fastcall Preload_AudioPropagationNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_AudioPropagationNodeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_MapEdgeListPtrArray
==============
*/

void __fastcall Postload_MapEdgeListPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_MapEdgeListPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_SpawnGroup
==============
*/

void __fastcall Load_SpawnGroup(const DBStreamStart streamStart)
{
  ?Load_SpawnGroup@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_StaticModelCollisionCompressedInstanceArray
==============
*/

void __fastcall Load_StaticModelCollisionCompressedInstanceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_StaticModelCollisionCompressedInstanceArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_SpawnerFieldArray
==============
*/

void __fastcall Load_SpawnerFieldArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_SpawnerFieldArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ClientMapTriggers
==============
*/

int __fastcall Mark_ClientMapTriggers()
{
  return ?Mark_ClientMapTriggers@@YAHXZ();
}

/*
==============
Preload_StaticModelCollisionModelList
==============
*/

void __fastcall Preload_StaticModelCollisionModelList(const DBStreamStart streamStart)
{
  ?Preload_StaticModelCollisionModelList@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_cmodel_tArray
==============
*/

int __fastcall Mark_cmodel_tArray(const unsigned __int64 count)
{
  return ?Mark_cmodel_tArray@@YAH_K@Z(count);
}

/*
==============
Postload_ServerExploderDefStream
==============
*/

void __fastcall Postload_ServerExploderDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ServerExploderDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ClientMapTriggersStream
==============
*/

void __fastcall Preload_ClientMapTriggersStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientMapTriggersStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_SpawnPointEntityRecord
==============
*/

SpawnPointEntityRecord *__fastcall AllocLoad_SpawnPointEntityRecord()
{
  return ?AllocLoad_SpawnPointEntityRecord@@YAPEAUSpawnPointEntityRecord@@XZ();
}

/*
==============
Load_ClientTriggerModel
==============
*/

void __fastcall Load_ClientTriggerModel(const DBStreamStart streamStart)
{
  ?Load_ClientTriggerModel@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ClientOneshotEffectDefArray
==============
*/

void __fastcall Load_ClientOneshotEffectDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientOneshotEffectDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_SplineRecordListStream
==============
*/

void __fastcall Load_SplineRecordListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_SplineRecordListStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_SplineRecordListStream
==============
*/

void __fastcall Postload_SplineRecordListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_SplineRecordListStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_TriggerWindingArray
==============
*/

void __fastcall Load_TriggerWindingArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_TriggerWindingArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_DynEntityListPtr
==============
*/

void Load_ProcessStructLayout_DynEntityListPtr(void)
{
  ?Load_ProcessStructLayout_DynEntityListPtr@@YAXXZ();
}

/*
==============
Preload_ClientIntervalSoundDefArray
==============
*/

void __fastcall Preload_ClientIntervalSoundDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientIntervalSoundDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ClientTriggerBlendNode
==============
*/

void __fastcall Postload_ClientTriggerBlendNode(const DBStreamStart streamStart)
{
  ?Postload_ClientTriggerBlendNode@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ClientEntAnchor
==============
*/

void __fastcall Load_ClientEntAnchor(const DBStreamStart streamStart)
{
  ?Load_ClientEntAnchor@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_CollMapLookupEntry
==============
*/

int __fastcall Mark_CollMapLookupEntry()
{
  return ?Mark_CollMapLookupEntry@@YAHXZ();
}

/*
==============
Postload_StaticModelCollisionCompressedModelArray
==============
*/

void __fastcall Postload_StaticModelCollisionCompressedModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_StaticModelCollisionCompressedModelArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_MapEdgeListArray
==============
*/

void __fastcall Preload_MapEdgeListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_MapEdgeListArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_StaticModelCollisionModelStream
==============
*/

void __fastcall Preload_StaticModelCollisionModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_StaticModelCollisionModelStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ClientMapTriggersStream
==============
*/

void __fastcall Postload_ClientMapTriggersStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientMapTriggersStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_StaticModelCollisionCompressedModelList
==============
*/

void __fastcall Preload_StaticModelCollisionCompressedModelList(const DBStreamStart streamStart)
{
  ?Preload_StaticModelCollisionCompressedModelList@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ClientExploderDefArray
==============
*/

void __fastcall Postload_ClientExploderDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientExploderDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ServerExploderDef
==============
*/

void Load_ProcessStructLayout_ServerExploderDef(void)
{
  ?Load_ProcessStructLayout_ServerExploderDef@@YAXXZ();
}

/*
==============
Mark_SpawnPointRecordListArray
==============
*/

int __fastcall Mark_SpawnPointRecordListArray(const unsigned __int64 count)
{
  return ?Mark_SpawnPointRecordListArray@@YAH_K@Z(count);
}

/*
==============
Load_ClientOneshotEffectDef
==============
*/

void __fastcall Load_ClientOneshotEffectDef(const DBStreamStart streamStart)
{
  ?Load_ClientOneshotEffectDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_AddonMapEntsPtr
==============
*/

AddonMapEnts **__fastcall AllocPostload_AddonMapEntsPtr()
{
  return ?AllocPostload_AddonMapEntsPtr@@YAPEAPEAUAddonMapEnts@@XZ();
}

/*
==============
Load_ProcessStructLayout_TriggerHull
==============
*/

void Load_ProcessStructLayout_TriggerHull(void)
{
  ?Load_ProcessStructLayout_TriggerHull@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_MapEdgeListPtr
==============
*/

void Load_ProcessStructLayout_MapEdgeListPtr(void)
{
  ?Load_ProcessStructLayout_MapEdgeListPtr@@YAXXZ();
}

/*
==============
Postload_SplineRecordListArray
==============
*/

void __fastcall Postload_SplineRecordListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_SplineRecordListArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_SpawnerListStream
==============
*/

void __fastcall Postload_SpawnerListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_SpawnerListStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CTAudRvbPanInfo
==============
*/

void __fastcall Load_CTAudRvbPanInfo(const DBStreamStart streamStart)
{
  ?Load_CTAudRvbPanInfo@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_SpawnerField
==============
*/

void __fastcall Postload_SpawnerField(const DBStreamStart streamStart)
{
  ?Postload_SpawnerField@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_SplinePointEntityRecord
==============
*/

void __fastcall Postload_SplinePointEntityRecord(const DBStreamStart streamStart)
{
  ?Postload_SplinePointEntityRecord@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_StaticModelCollisionCompressedModelArray
==============
*/

int __fastcall Mark_StaticModelCollisionCompressedModelArray(const unsigned __int64 count)
{
  return ?Mark_StaticModelCollisionCompressedModelArray@@YAH_K@Z(count);
}

/*
==============
AllocPostload_ServerSideEffects
==============
*/

ServerSideEffects *__fastcall AllocPostload_ServerSideEffects()
{
  return ?AllocPostload_ServerSideEffects@@YAPEAUServerSideEffects@@XZ();
}

/*
==============
Load_CheckArrayMemberMapEnts470
==============
*/

void Load_CheckArrayMemberMapEnts470(void)
{
  ?Load_CheckArrayMemberMapEnts470@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_ClientTriggerBlend
==============
*/

void Load_ProcessStructLayout_ClientTriggerBlend(void)
{
  ?Load_ProcessStructLayout_ClientTriggerBlend@@YAXXZ();
}

/*
==============
Load_TriggerHull
==============
*/

void __fastcall Load_TriggerHull(const DBStreamStart streamStart)
{
  ?Load_TriggerHull@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CheckArrayMemberMapEnts464
==============
*/

void Load_CheckArrayMemberMapEnts464(void)
{
  ?Load_CheckArrayMemberMapEnts464@@YAXXZ();
}

/*
==============
Mark_SpawnGroupZone
==============
*/

int __fastcall Mark_SpawnGroupZone()
{
  return ?Mark_SpawnGroupZone@@YAHXZ();
}

/*
==============
Postload_AddonMapEntsPtr
==============
*/

void __fastcall Postload_AddonMapEntsPtr(const DBStreamStart streamStart)
{
  ?Postload_AddonMapEntsPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_DynEntityListPtrStream
==============
*/

void __fastcall Postload_DynEntityListPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_DynEntityListPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_SpawnGroupCluster
==============
*/

void __fastcall Load_SpawnGroupCluster(const DBStreamStart streamStart)
{
  ?Load_SpawnGroupCluster@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ClientTriggerBlendNode
==============
*/

ClientTriggerBlendNode *__fastcall AllocPreload_ClientTriggerBlendNode()
{
  return ?AllocPreload_ClientTriggerBlendNode@@YAPEAUClientTriggerBlendNode@@XZ();
}

/*
==============
Mark_CreateFxPaletteDef
==============
*/

int __fastcall Mark_CreateFxPaletteDef()
{
  return ?Mark_CreateFxPaletteDef@@YAHXZ();
}

/*
==============
AllocPreload_StaticModelCollisionInstance
==============
*/

StaticModelCollisionInstance *__fastcall AllocPreload_StaticModelCollisionInstance()
{
  return ?AllocPreload_StaticModelCollisionInstance@@YAPEAUStaticModelCollisionInstance@@XZ();
}

/*
==============
Load_ClientRootDef
==============
*/

void __fastcall Load_ClientRootDef(const DBStreamStart streamStart)
{
  ?Load_ClientRootDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_MapTriggersArray
==============
*/

void __fastcall Postload_MapTriggersArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_MapTriggersArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_MapEnts
==============
*/

MapEnts *__fastcall AllocLoad_MapEnts()
{
  return ?AllocLoad_MapEnts@@YAPEAUMapEnts@@XZ();
}

/*
==============
Load_ProcessStructLayout_CollisionHeatmapEntry
==============
*/

void Load_ProcessStructLayout_CollisionHeatmapEntry(void)
{
  ?Load_ProcessStructLayout_CollisionHeatmapEntry@@YAXXZ();
}

/*
==============
Preload_MapEntsPtrStream
==============
*/

void __fastcall Preload_MapEntsPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_MapEntsPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_SpawnerField
==============
*/

SpawnerField *__fastcall AllocLoad_SpawnerField()
{
  return ?AllocLoad_SpawnerField@@YAPEAUSpawnerField@@XZ();
}

/*
==============
Load_ProcessStructLayout_SpawnGroupCluster
==============
*/

void Load_ProcessStructLayout_SpawnGroupCluster(void)
{
  ?Load_ProcessStructLayout_SpawnGroupCluster@@YAXXZ();
}

/*
==============
Preload_cmodel_tArray
==============
*/

void __fastcall Preload_cmodel_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_cmodel_tArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_VariableTypeStream
==============
*/

void __fastcall Load_VariableTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_VariableTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_SplinePointRecordListStream
==============
*/

void __fastcall Preload_SplinePointRecordListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_SplinePointRecordListStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_MapEnts
==============
*/

MapEnts *__fastcall AllocPreload_MapEnts()
{
  return ?AllocPreload_MapEnts@@YAPEAUMapEnts@@XZ();
}

/*
==============
Preload_ClientOneshotEffectDef
==============
*/

void __fastcall Preload_ClientOneshotEffectDef(const DBStreamStart streamStart)
{
  ?Preload_ClientOneshotEffectDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_CollisionTileArray
==============
*/

void __fastcall Postload_CollisionTileArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_CollisionTileArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_clipMap_tArray
==============
*/

int __fastcall Mark_clipMap_tArray(const unsigned __int64 count)
{
  return ?Mark_clipMap_tArray@@YAH_K@Z(count);
}

/*
==============
Preload_ClientEntityLinkToDefPtr
==============
*/

void __fastcall Preload_ClientEntityLinkToDefPtr(const DBStreamStart streamStart)
{
  ?Preload_ClientEntityLinkToDefPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_cmodel_tStream
==============
*/

void __fastcall Load_cmodel_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_cmodel_tStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_StaticModelCollisionCompressedModel
==============
*/

StaticModelCollisionCompressedModel *__fastcall AllocPreload_StaticModelCollisionCompressedModel()
{
  return ?AllocPreload_StaticModelCollisionCompressedModel@@YAPEAUStaticModelCollisionCompressedModel@@XZ();
}

/*
==============
Preload_clipMap_ptrStream
==============
*/

void __fastcall Preload_clipMap_ptrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_clipMap_ptrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_SpawnerList
==============
*/

void __fastcall Load_SpawnerList(const DBStreamStart streamStart)
{
  ?Load_SpawnerList@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_SpawnerArray
==============
*/

int __fastcall Mark_SpawnerArray(const unsigned __int64 count)
{
  return ?Mark_SpawnerArray@@YAH_K@Z(count);
}

/*
==============
Postload_AddonMapEnts
==============
*/

void __fastcall Postload_AddonMapEnts(const DBStreamStart streamStart)
{
  ?Postload_AddonMapEnts@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ClientExploderDef
==============
*/

void __fastcall Preload_ClientExploderDef(const DBStreamStart streamStart)
{
  ?Preload_ClientExploderDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_VariableTypeArray
==============
*/

void __fastcall Preload_VariableTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_VariableTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_SpawnerFieldStream
==============
*/

void __fastcall Load_SpawnerFieldStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_SpawnerFieldStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CreateFxPaletteDefStream
==============
*/

void __fastcall Load_CreateFxPaletteDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_CreateFxPaletteDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_SpawnGroupPoint
==============
*/

void __fastcall Preload_SpawnGroupPoint(const DBStreamStart streamStart)
{
  ?Preload_SpawnGroupPoint@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_StaticModelCollisionCompressedModelListArray
==============
*/

void __fastcall Postload_StaticModelCollisionCompressedModelListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_StaticModelCollisionCompressedModelListArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_StaticModelCollisionInstance
==============
*/

void Load_ProcessStructLayout_StaticModelCollisionInstance(void)
{
  ?Load_ProcessStructLayout_StaticModelCollisionInstance@@YAXXZ();
}

/*
==============
AllocLoad_ClientExploderDef
==============
*/

ClientExploderDef *__fastcall AllocLoad_ClientExploderDef()
{
  return ?AllocLoad_ClientExploderDef@@YAPEAUClientExploderDef@@XZ();
}

/*
==============
AllocPostload_MapEdgeList
==============
*/

MapEdgeList *__fastcall AllocPostload_MapEdgeList()
{
  return ?AllocPostload_MapEdgeList@@YAPEAUMapEdgeList@@XZ();
}

/*
==============
AllocPostload_MapEntsPtr
==============
*/

MapEnts **__fastcall AllocPostload_MapEntsPtr()
{
  return ?AllocPostload_MapEntsPtr@@YAPEAPEAUMapEnts@@XZ();
}

/*
==============
Load_ProcessStructLayout_ClientLoopSoundDef
==============
*/

void Load_ProcessStructLayout_ClientLoopSoundDef(void)
{
  ?Load_ProcessStructLayout_ClientLoopSoundDef@@YAXXZ();
}

/*
==============
Mark_StaticModelCollisionModelListArray
==============
*/

int __fastcall Mark_StaticModelCollisionModelListArray(const unsigned __int64 count)
{
  return ?Mark_StaticModelCollisionModelListArray@@YAH_K@Z(count);
}

/*
==============
Load_ProcessStructLayout_CollisionTilePtr
==============
*/

void Load_ProcessStructLayout_CollisionTilePtr(void)
{
  ?Load_ProcessStructLayout_CollisionTilePtr@@YAXXZ();
}

/*
==============
Preload_ClientRootDefStream
==============
*/

void __fastcall Preload_ClientRootDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientRootDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_MapEdgeListStream
==============
*/

void __fastcall Preload_MapEdgeListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_MapEdgeListStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ClientLoopSoundDefArray
==============
*/

void __fastcall Preload_ClientLoopSoundDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientLoopSoundDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_TriggerModelArray
==============
*/

void __fastcall Postload_TriggerModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_TriggerModelArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_clipMap_tArray
==============
*/

void __fastcall Preload_clipMap_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_clipMap_tArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_CollisionHeatmapEntry
==============
*/

int __fastcall Mark_CollisionHeatmapEntry()
{
  return ?Mark_CollisionHeatmapEntry@@YAHXZ();
}

/*
==============
Preload_ClientReactiveEntDef
==============
*/

void __fastcall Preload_ClientReactiveEntDef(const DBStreamStart streamStart)
{
  ?Preload_ClientReactiveEntDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ClientTriggersArray
==============
*/

int __fastcall Mark_ClientTriggersArray(const unsigned __int64 count)
{
  return ?Mark_ClientTriggersArray@@YAH_K@Z(count);
}

/*
==============
Load_ClientTriggerHullStream
==============
*/

void __fastcall Load_ClientTriggerHullStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientTriggerHullStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_DynEntityListPtrStream
==============
*/

void __fastcall Preload_DynEntityListPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_DynEntityListPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_alignHavokShapeData_t
==============
*/

int __fastcall Mark_alignHavokShapeData_t()
{
  return ?Mark_alignHavokShapeData_t@@YAHXZ();
}

/*
==============
AllocLoad_CollisionHeatmapEntry
==============
*/

CollisionHeatmapEntry *__fastcall AllocLoad_CollisionHeatmapEntry()
{
  return ?AllocLoad_CollisionHeatmapEntry@@YAPEAUCollisionHeatmapEntry@@XZ();
}

/*
==============
AllocLoad_AddonMapEnts
==============
*/

AddonMapEnts *__fastcall AllocLoad_AddonMapEnts()
{
  return ?AllocLoad_AddonMapEnts@@YAPEAUAddonMapEnts@@XZ();
}

/*
==============
Preload_TriggerSlabStream
==============
*/

void __fastcall Preload_TriggerSlabStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_TriggerSlabStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ClientSideEffects
==============
*/

void __fastcall Preload_ClientSideEffects(const DBStreamStart streamStart)
{
  ?Preload_ClientSideEffects@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_MapEntsStream
==============
*/

void __fastcall Postload_MapEntsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_MapEntsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_clipMap_ptr
==============
*/

void __fastcall Postload_clipMap_ptr(const DBStreamStart streamStart)
{
  ?Postload_clipMap_ptr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_StaticModelCollisionModelArray
==============
*/

void __fastcall Load_StaticModelCollisionModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_StaticModelCollisionModelArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_SpawnerFieldArray
==============
*/

void __fastcall Preload_SpawnerFieldArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_SpawnerFieldArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_SpawnPointRecordListStream
==============
*/

void __fastcall Preload_SpawnPointRecordListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_SpawnPointRecordListStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ClientExploderDef
==============
*/

void __fastcall Postload_ClientExploderDef(const DBStreamStart streamStart)
{
  ?Postload_ClientExploderDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ClientEntityLinkToDefPtrArray
==============
*/

void __fastcall Postload_ClientEntityLinkToDefPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientEntityLinkToDefPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_StaticModelCollisionCompressedModelStream
==============
*/

void __fastcall Load_StaticModelCollisionCompressedModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_StaticModelCollisionCompressedModelStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_SpawnPointEntityRecord
==============
*/

void __fastcall Preload_SpawnPointEntityRecord(const DBStreamStart streamStart)
{
  ?Preload_SpawnPointEntityRecord@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_MapEdgeListStream
==============
*/

void __fastcall Load_MapEdgeListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_MapEdgeListStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_SpawnerList
==============
*/

SpawnerList *__fastcall AllocPostload_SpawnerList()
{
  return ?AllocPostload_SpawnerList@@YAPEAUSpawnerList@@XZ();
}

/*
==============
AllocLoad_CreateFxPaletteDef
==============
*/

CreateFxPaletteDef *__fastcall AllocLoad_CreateFxPaletteDef()
{
  return ?AllocLoad_CreateFxPaletteDef@@YAPEAUCreateFxPaletteDef@@XZ();
}

/*
==============
Postload_DynEntityListPtrArray
==============
*/

void __fastcall Postload_DynEntityListPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_DynEntityListPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_clipMap_t
==============
*/

clipMap_t *__fastcall AllocPostload_clipMap_t()
{
  return ?AllocPostload_clipMap_t@@YAPEAUclipMap_t@@XZ();
}

/*
==============
Load_ProcessStructLayout_AddonMapEntsPtr
==============
*/

void Load_ProcessStructLayout_AddonMapEntsPtr(void)
{
  ?Load_ProcessStructLayout_AddonMapEntsPtr@@YAXXZ();
}

/*
==============
Postload_clipMap_tStream
==============
*/

void __fastcall Postload_clipMap_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_clipMap_tStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ClientExploderDefStream
==============
*/

void __fastcall Preload_ClientExploderDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientExploderDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ClientEntityLinkToDefPtr
==============
*/

ClientEntityLinkToDef **__fastcall AllocPostload_ClientEntityLinkToDefPtr()
{
  return ?AllocPostload_ClientEntityLinkToDefPtr@@YAPEAPEAUClientEntityLinkToDef@@XZ();
}

/*
==============
Postload_MapEnts
==============
*/

void __fastcall Postload_MapEnts(const DBStreamStart streamStart)
{
  ?Postload_MapEnts@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_CollMapLookupEntryStream
==============
*/

void __fastcall Postload_CollMapLookupEntryStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_CollMapLookupEntryStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ClientMapTriggersArray
==============
*/

void __fastcall Preload_ClientMapTriggersArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientMapTriggersArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_StaticModelCollisionModel
==============
*/

void __fastcall Preload_StaticModelCollisionModel(const DBStreamStart streamStart)
{
  ?Preload_StaticModelCollisionModel@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_SpawnPointRecordList
==============
*/

void Load_ProcessStructLayout_SpawnPointRecordList(void)
{
  ?Load_ProcessStructLayout_SpawnPointRecordList@@YAXXZ();
}

/*
==============
Postload_ClientIntervalSoundDefStream
==============
*/

void __fastcall Postload_ClientIntervalSoundDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientIntervalSoundDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ClientReactiveEntDefStream
==============
*/

void __fastcall Preload_ClientReactiveEntDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientReactiveEntDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_SpawnerListStream
==============
*/

void __fastcall Preload_SpawnerListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_SpawnerListStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ClientReactiveEntDef
==============
*/

void __fastcall Load_ClientReactiveEntDef(const DBStreamStart streamStart)
{
  ?Load_ClientReactiveEntDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_SplinePointRecordList
==============
*/

SplinePointRecordList *__fastcall AllocPreload_SplinePointRecordList()
{
  return ?AllocPreload_SplinePointRecordList@@YAPEAUSplinePointRecordList@@XZ();
}

/*
==============
AllocLoad_ClientTriggerHull
==============
*/

ClientTriggerHull *__fastcall AllocLoad_ClientTriggerHull()
{
  return ?AllocLoad_ClientTriggerHull@@YAPEAUClientTriggerHull@@XZ();
}

/*
==============
Mark_MapEdgeListArray
==============
*/

int __fastcall Mark_MapEdgeListArray(const unsigned __int64 count)
{
  return ?Mark_MapEdgeListArray@@YAH_K@Z(count);
}

/*
==============
Load_CreateFxPaletteDefArray
==============
*/

void __fastcall Load_CreateFxPaletteDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_CreateFxPaletteDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_TriggerWindingStream
==============
*/

void __fastcall Load_TriggerWindingStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_TriggerWindingStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_AudioPropagationNode
==============
*/

void __fastcall Preload_AudioPropagationNode(const DBStreamStart streamStart)
{
  ?Preload_AudioPropagationNode@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_PhysicsCapacities
==============
*/

PhysicsCapacities *__fastcall AllocPreload_PhysicsCapacities()
{
  return ?AllocPreload_PhysicsCapacities@@YAPEAUPhysicsCapacities@@XZ();
}

/*
==============
Postload_TriggerWinding
==============
*/

void __fastcall Postload_TriggerWinding(const DBStreamStart streamStart)
{
  ?Postload_TriggerWinding@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_SpawnGroup
==============
*/

SpawnGroup *__fastcall AllocPostload_SpawnGroup()
{
  return ?AllocPostload_SpawnGroup@@YAPEAUSpawnGroup@@XZ();
}

/*
==============
Mark_CollisionTilePtrArray
==============
*/

int __fastcall Mark_CollisionTilePtrArray(const unsigned __int64 count)
{
  return ?Mark_CollisionTilePtrArray@@YAH_K@Z(count);
}

/*
==============
Mark_VariableType
==============
*/

int __fastcall Mark_VariableType()
{
  return ?Mark_VariableType@@YAHXZ();
}

/*
==============
Postload_StaticModelCollisionModelArray
==============
*/

void __fastcall Postload_StaticModelCollisionModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_StaticModelCollisionModelArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_MapEdgeListArray
==============
*/

void __fastcall Postload_MapEdgeListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_MapEdgeListArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_SplinePointEntityRecordArray
==============
*/

void __fastcall Postload_SplinePointEntityRecordArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_SplinePointEntityRecordArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_CreateFxPaletteDefStream
==============
*/

void __fastcall Postload_CreateFxPaletteDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_CreateFxPaletteDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_Spawner
==============
*/

void __fastcall Preload_Spawner(const DBStreamStart streamStart)
{
  ?Preload_Spawner@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ClientEntityLinkToDefPtrStream
==============
*/

void __fastcall Load_ClientEntityLinkToDefPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientEntityLinkToDefPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_clipMap_t
==============
*/

int __fastcall Mark_clipMap_t()
{
  return ?Mark_clipMap_t@@YAHXZ();
}

/*
==============
AllocLoad_AudioPASpeaker
==============
*/

AudioPASpeaker *__fastcall AllocLoad_AudioPASpeaker()
{
  return ?AllocLoad_AudioPASpeaker@@YAPEAUAudioPASpeaker@@XZ();
}

/*
==============
Load_TriggerModel
==============
*/

void __fastcall Load_TriggerModel(const DBStreamStart streamStart)
{
  ?Load_TriggerModel@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_AddonMapEntsPtr
==============
*/

void __fastcall Preload_AddonMapEntsPtr(const DBStreamStart streamStart)
{
  ?Preload_AddonMapEntsPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ClientOneshotEffectDefStream
==============
*/

void __fastcall Preload_ClientOneshotEffectDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientOneshotEffectDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_StaticModelCollisionModelArray
==============
*/

int __fastcall Mark_StaticModelCollisionModelArray(const unsigned __int64 count)
{
  return ?Mark_StaticModelCollisionModelArray@@YAH_K@Z(count);
}

/*
==============
Load_StaticModelCollisionCompressedModelList
==============
*/

void __fastcall Load_StaticModelCollisionCompressedModelList(const DBStreamStart streamStart)
{
  ?Load_StaticModelCollisionCompressedModelList@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ClientTriggers
==============
*/

int __fastcall Mark_ClientTriggers()
{
  return ?Mark_ClientTriggers@@YAHXZ();
}

/*
==============
AllocPostload_CollisionTile
==============
*/

CollisionTile *__fastcall AllocPostload_CollisionTile()
{
  return ?AllocPostload_CollisionTile@@YAPEAUCollisionTile@@XZ();
}

/*
==============
Mark_ClientTriggerModelArray
==============
*/

int __fastcall Mark_ClientTriggerModelArray(const unsigned __int64 count)
{
  return ?Mark_ClientTriggerModelArray@@YAH_K@Z(count);
}

/*
==============
AllocPostload_DynEntityList
==============
*/

DynEntityList *__fastcall AllocPostload_DynEntityList()
{
  return ?AllocPostload_DynEntityList@@YAPEAUDynEntityList@@XZ();
}

/*
==============
Postload_TriggerWindingPoint
==============
*/

void __fastcall Postload_TriggerWindingPoint(const DBStreamStart streamStart)
{
  ?Postload_TriggerWindingPoint@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_TriggerWindingArray
==============
*/

int __fastcall Mark_TriggerWindingArray(const unsigned __int64 count)
{
  return ?Mark_TriggerWindingArray@@YAH_K@Z(count);
}

/*
==============
Postload_ClientTriggerBlend
==============
*/

void __fastcall Postload_ClientTriggerBlend(const DBStreamStart streamStart)
{
  ?Postload_ClientTriggerBlend@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_SpawnerArray
==============
*/

void __fastcall Load_SpawnerArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_SpawnerArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_CollisionHeatmapEntry
==============
*/

void __fastcall Postload_CollisionHeatmapEntry(const DBStreamStart streamStart)
{
  ?Postload_CollisionHeatmapEntry@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_DynEntityListPtr
==============
*/

int __fastcall Mark_DynEntityListPtr()
{
  return ?Mark_DynEntityListPtr@@YAHXZ();
}

/*
==============
Load_ClientTriggersArray
==============
*/

void __fastcall Load_ClientTriggersArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientTriggersArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ClientIntervalSoundDefStream
==============
*/

void __fastcall Preload_ClientIntervalSoundDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientIntervalSoundDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_DynEntityList
==============
*/

DynEntityList *__fastcall AllocLoad_DynEntityList()
{
  return ?AllocLoad_DynEntityList@@YAPEAUDynEntityList@@XZ();
}

/*
==============
Load_ClientTriggerBlendNode
==============
*/

void __fastcall Load_ClientTriggerBlendNode(const DBStreamStart streamStart)
{
  ?Load_ClientTriggerBlendNode@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_TriggerModel
==============
*/

TriggerModel *__fastcall AllocPostload_TriggerModel()
{
  return ?AllocPostload_TriggerModel@@YAPEAUTriggerModel@@XZ();
}

/*
==============
Load_ProcessStructLayout_TriggerSlab
==============
*/

void Load_ProcessStructLayout_TriggerSlab(void)
{
  ?Load_ProcessStructLayout_TriggerSlab@@YAXXZ();
}

/*
==============
Load_SpawnGroupStream
==============
*/

void __fastcall Load_SpawnGroupStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_SpawnGroupStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ClientTriggerModelStream
==============
*/

void __fastcall Postload_ClientTriggerModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientTriggerModelStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_SpawnGroupPointArray
==============
*/

int __fastcall Mark_SpawnGroupPointArray(const unsigned __int64 count)
{
  return ?Mark_SpawnGroupPointArray@@YAH_K@Z(count);
}

/*
==============
AllocPreload_AddonMapEntsPtr
==============
*/

AddonMapEnts **__fastcall AllocPreload_AddonMapEntsPtr()
{
  return ?AllocPreload_AddonMapEntsPtr@@YAPEAPEAUAddonMapEnts@@XZ();
}

/*
==============
Postload_clipMap_t
==============
*/

void __fastcall Postload_clipMap_t(const DBStreamStart streamStart)
{
  ?Postload_clipMap_t@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_SpawnPointEntityRecordArray
==============
*/

void __fastcall Preload_SpawnPointEntityRecordArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_SpawnPointEntityRecordArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_cmodel_t
==============
*/

cmodel_t *__fastcall AllocPostload_cmodel_t()
{
  return ?AllocPostload_cmodel_t@@YAPEAUcmodel_t@@XZ();
}

/*
==============
AllocPreload_DynEntityListPtr
==============
*/

DynEntityList **__fastcall AllocPreload_DynEntityListPtr()
{
  return ?AllocPreload_DynEntityListPtr@@YAPEAPEAUDynEntityList@@XZ();
}

/*
==============
Mark_ClientIntervalSoundDefArray
==============
*/

int __fastcall Mark_ClientIntervalSoundDefArray(const unsigned __int64 count)
{
  return ?Mark_ClientIntervalSoundDefArray@@YAH_K@Z(count);
}

/*
==============
AllocLoad_TriggerHull
==============
*/

TriggerHull *__fastcall AllocLoad_TriggerHull()
{
  return ?AllocLoad_TriggerHull@@YAPEAUTriggerHull@@XZ();
}

/*
==============
Preload_ClientOneshotEffectDefArray
==============
*/

void __fastcall Preload_ClientOneshotEffectDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientOneshotEffectDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_AudioPASpeaker
==============
*/

AudioPASpeaker *__fastcall AllocPreload_AudioPASpeaker()
{
  return ?AllocPreload_AudioPASpeaker@@YAPEAUAudioPASpeaker@@XZ();
}

/*
==============
Load_CheckArrayMemberDynEntityList388
==============
*/

void Load_CheckArrayMemberDynEntityList388(void)
{
  ?Load_CheckArrayMemberDynEntityList388@@YAXXZ();
}

/*
==============
Mark_ClientEntAnchor
==============
*/

int __fastcall Mark_ClientEntAnchor()
{
  return ?Mark_ClientEntAnchor@@YAHXZ();
}

/*
==============
Load_DynEntityListPtrStream
==============
*/

void __fastcall Load_DynEntityListPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_DynEntityListPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_CreateFxAssetData
==============
*/

void Load_ProcessStructLayout_CreateFxAssetData(void)
{
  ?Load_ProcessStructLayout_CreateFxAssetData@@YAXXZ();
}

/*
==============
Preload_StaticModelCollisionCompressedModelListStream
==============
*/

void __fastcall Preload_StaticModelCollisionCompressedModelListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_StaticModelCollisionCompressedModelListStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ClientEntityLinkToDefPtrStream
==============
*/

void __fastcall Postload_ClientEntityLinkToDefPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientEntityLinkToDefPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_VariableTypeStream
==============
*/

void __fastcall Preload_VariableTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_VariableTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ClientMapTriggersArray
==============
*/

int __fastcall Mark_ClientMapTriggersArray(const unsigned __int64 count)
{
  return ?Mark_ClientMapTriggersArray@@YAH_K@Z(count);
}

/*
==============
Load_CollisionTileArray
==============
*/

void __fastcall Load_CollisionTileArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_CollisionTileArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_AudioPropagationEdge
==============
*/

AudioPropagationEdge *__fastcall AllocPreload_AudioPropagationEdge()
{
  return ?AllocPreload_AudioPropagationEdge@@YAPEAUAudioPropagationEdge@@XZ();
}

/*
==============
Load_ProcessStructLayout_SplinePointEntityRecord
==============
*/

void Load_ProcessStructLayout_SplinePointEntityRecord(void)
{
  ?Load_ProcessStructLayout_SplinePointEntityRecord@@YAXXZ();
}

/*
==============
AllocPreload_ClientTriggerModel
==============
*/

ClientTriggerModel *__fastcall AllocPreload_ClientTriggerModel()
{
  return ?AllocPreload_ClientTriggerModel@@YAPEAUClientTriggerModel@@XZ();
}

/*
==============
Load_ClientTriggerHull
==============
*/

void __fastcall Load_ClientTriggerHull(const DBStreamStart streamStart)
{
  ?Load_ClientTriggerHull@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ClientIntervalSoundDef
==============
*/

void __fastcall Load_ClientIntervalSoundDef(const DBStreamStart streamStart)
{
  ?Load_ClientIntervalSoundDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_AddonMapEnts
==============
*/

void __fastcall Load_AddonMapEnts(const DBStreamStart streamStart)
{
  ?Load_AddonMapEnts@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_StaticModelCollisionCompressedInstanceStream
==============
*/

void __fastcall Postload_StaticModelCollisionCompressedInstanceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_StaticModelCollisionCompressedInstanceStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_PhysicsCapacities
==============
*/

int __fastcall Mark_PhysicsCapacities()
{
  return ?Mark_PhysicsCapacities@@YAHXZ();
}

/*
==============
AllocLoad_SpawnerList
==============
*/

SpawnerList *__fastcall AllocLoad_SpawnerList()
{
  return ?AllocLoad_SpawnerList@@YAPEAUSpawnerList@@XZ();
}

/*
==============
AllocPostload_StaticModelCollisionCompressedModel
==============
*/

StaticModelCollisionCompressedModel *__fastcall AllocPostload_StaticModelCollisionCompressedModel()
{
  return ?AllocPostload_StaticModelCollisionCompressedModel@@YAPEAUStaticModelCollisionCompressedModel@@XZ();
}

/*
==============
Preload_clipMap_tStream
==============
*/

void __fastcall Preload_clipMap_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_clipMap_tStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ServerSideEffects
==============
*/

void __fastcall Preload_ServerSideEffects(const DBStreamStart streamStart)
{
  ?Preload_ServerSideEffects@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_AudioPASpeakerArray
==============
*/

void __fastcall Postload_AudioPASpeakerArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_AudioPASpeakerArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ServerSideEffectsStream
==============
*/

void __fastcall Postload_ServerSideEffectsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ServerSideEffectsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_StaticModelCollisionCompressedModel
==============
*/

int __fastcall Mark_StaticModelCollisionCompressedModel()
{
  return ?Mark_StaticModelCollisionCompressedModel@@YAHXZ();
}

/*
==============
Load_alignHavokShapeData_t
==============
*/

void __fastcall Load_alignHavokShapeData_t(const DBStreamStart streamStart)
{
  ?Load_alignHavokShapeData_t@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_MapEntsArray
==============
*/

void __fastcall Preload_MapEntsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_MapEntsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberDynEntityList402
==============
*/

void Load_CheckArrayMemberDynEntityList402(void)
{
  ?Load_CheckArrayMemberDynEntityList402@@YAXXZ();
}

/*
==============
Preload_cmodel_t
==============
*/

void __fastcall Preload_cmodel_t(const DBStreamStart streamStart)
{
  ?Preload_cmodel_t@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_SpawnPointEntityRecord
==============
*/

SpawnPointEntityRecord *__fastcall AllocPostload_SpawnPointEntityRecord()
{
  return ?AllocPostload_SpawnPointEntityRecord@@YAPEAUSpawnPointEntityRecord@@XZ();
}

/*
==============
Preload_clipMap_ptrArray
==============
*/

void __fastcall Preload_clipMap_ptrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_clipMap_ptrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_SplineRecordList
==============
*/

void __fastcall Load_SplineRecordList(const DBStreamStart streamStart)
{
  ?Load_SplineRecordList@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_TriggerModelStream
==============
*/

void __fastcall Postload_TriggerModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_TriggerModelStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ClientTriggersStream
==============
*/

void __fastcall Preload_ClientTriggersStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientTriggersStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ClientEntAnchor
==============
*/

ClientEntAnchor *__fastcall AllocPostload_ClientEntAnchor()
{
  return ?AllocPostload_ClientEntAnchor@@YAPEAUClientEntAnchor@@XZ();
}

/*
==============
Postload_ClientSideEffectsStream
==============
*/

void __fastcall Postload_ClientSideEffectsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientSideEffectsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_VariableTypeArray
==============
*/

int __fastcall Mark_VariableTypeArray(const unsigned __int64 count)
{
  return ?Mark_VariableTypeArray@@YAH_K@Z(count);
}

/*
==============
Postload_MapTriggers
==============
*/

void __fastcall Postload_MapTriggers(const DBStreamStart streamStart)
{
  ?Postload_MapTriggers@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_AddonMapEntsPtrStream
==============
*/

void __fastcall Preload_AddonMapEntsPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_AddonMapEntsPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_TriggerHull
==============
*/

TriggerHull *__fastcall AllocPostload_TriggerHull()
{
  return ?AllocPostload_TriggerHull@@YAPEAUTriggerHull@@XZ();
}

/*
==============
Load_ProcessStructLayout_CollMapLookupEntry
==============
*/

void Load_ProcessStructLayout_CollMapLookupEntry(void)
{
  ?Load_ProcessStructLayout_CollMapLookupEntry@@YAXXZ();
}

/*
==============
Postload_MapEdgeListPtrStream
==============
*/

void __fastcall Postload_MapEdgeListPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_MapEdgeListPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_CollisionHeatmapEntryStream
==============
*/

void __fastcall Postload_CollisionHeatmapEntryStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_CollisionHeatmapEntryStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_MapEntsStream
==============
*/

void __fastcall Load_MapEntsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_MapEntsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_MapTriggersArray
==============
*/

void __fastcall Load_MapTriggersArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_MapTriggersArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ServerSideEffects
==============
*/

int __fastcall Mark_ServerSideEffects()
{
  return ?Mark_ServerSideEffects@@YAHXZ();
}

/*
==============
AllocPreload_CollMapLookupEntry
==============
*/

CollMapLookupEntry *__fastcall AllocPreload_CollMapLookupEntry()
{
  return ?AllocPreload_CollMapLookupEntry@@YAPEAUCollMapLookupEntry@@XZ();
}

/*
==============
AllocPreload_StaticModelCollisionModelList
==============
*/

StaticModelCollisionModelList *__fastcall AllocPreload_StaticModelCollisionModelList()
{
  return ?AllocPreload_StaticModelCollisionModelList@@YAPEAUStaticModelCollisionModelList@@XZ();
}

/*
==============
Preload_AudioPASpeakerArray
==============
*/

void __fastcall Preload_AudioPASpeakerArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_AudioPASpeakerArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CollMapLookupEntry
==============
*/

void __fastcall Load_CollMapLookupEntry(const DBStreamStart streamStart)
{
  ?Load_CollMapLookupEntry@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_CreateFxPaletteDefArray
==============
*/

int __fastcall Mark_CreateFxPaletteDefArray(const unsigned __int64 count)
{
  return ?Mark_CreateFxPaletteDefArray@@YAH_K@Z(count);
}

/*
==============
Preload_StaticModelCollisionCompressedInstance
==============
*/

void __fastcall Preload_StaticModelCollisionCompressedInstance(const DBStreamStart streamStart)
{
  ?Preload_StaticModelCollisionCompressedInstance@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_TriggerHullArray
==============
*/

int __fastcall Mark_TriggerHullArray(const unsigned __int64 count)
{
  return ?Mark_TriggerHullArray@@YAH_K@Z(count);
}

/*
==============
AllocPostload_AddonMapEnts
==============
*/

AddonMapEnts *__fastcall AllocPostload_AddonMapEnts()
{
  return ?AllocPostload_AddonMapEnts@@YAPEAUAddonMapEnts@@XZ();
}

/*
==============
AllocPostload_CreateFxAssetData
==============
*/

CreateFxAssetData *__fastcall AllocPostload_CreateFxAssetData()
{
  return ?AllocPostload_CreateFxAssetData@@YAPEAUCreateFxAssetData@@XZ();
}

/*
==============
Load_TriggerSlabStream
==============
*/

void __fastcall Load_TriggerSlabStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_TriggerSlabStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_TriggerHull
==============
*/

void __fastcall Postload_TriggerHull(const DBStreamStart streamStart)
{
  ?Postload_TriggerHull@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_CollisionTile
==============
*/

CollisionTile *__fastcall AllocPreload_CollisionTile()
{
  return ?AllocPreload_CollisionTile@@YAPEAUCollisionTile@@XZ();
}

/*
==============
Preload_DynEntityListPtrArray
==============
*/

void __fastcall Preload_DynEntityListPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_DynEntityListPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_AudioPropagationNodeArray
==============
*/

void __fastcall Postload_AudioPropagationNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_AudioPropagationNodeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ClientIntervalSoundDefArray
==============
*/

void __fastcall Postload_ClientIntervalSoundDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientIntervalSoundDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ServerExploderDefArray
==============
*/

void __fastcall Load_ServerExploderDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ServerExploderDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ClientEntityLinkToDefPtr
==============
*/

ClientEntityLinkToDef **__fastcall AllocLoad_ClientEntityLinkToDefPtr()
{
  return ?AllocLoad_ClientEntityLinkToDefPtr@@YAPEAPEAUClientEntityLinkToDef@@XZ();
}

/*
==============
Preload_AudioPropagationNodeStream
==============
*/

void __fastcall Preload_AudioPropagationNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_AudioPropagationNodeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ClientTriggerBlend
==============
*/

ClientTriggerBlend *__fastcall AllocLoad_ClientTriggerBlend()
{
  return ?AllocLoad_ClientTriggerBlend@@YAPEAUClientTriggerBlend@@XZ();
}

/*
==============
Load_TriggerSlabArray
==============
*/

void __fastcall Load_TriggerSlabArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_TriggerSlabArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_SpawnPointEntityRecordStream
==============
*/

void __fastcall Preload_SpawnPointEntityRecordStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_SpawnPointEntityRecordStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CreateFxAssetDataStream
==============
*/

void __fastcall Load_CreateFxAssetDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_CreateFxAssetDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_cmodel_t
==============
*/

cmodel_t *__fastcall AllocLoad_cmodel_t()
{
  return ?AllocLoad_cmodel_t@@YAPEAUcmodel_t@@XZ();
}

/*
==============
Mark_SplinePointRecordListArray
==============
*/

int __fastcall Mark_SplinePointRecordListArray(const unsigned __int64 count)
{
  return ?Mark_SplinePointRecordListArray@@YAH_K@Z(count);
}

/*
==============
AllocLoad_CollisionTilePtr
==============
*/

CollisionTile **__fastcall AllocLoad_CollisionTilePtr()
{
  return ?AllocLoad_CollisionTilePtr@@YAPEAPEAUCollisionTile@@XZ();
}

/*
==============
Load_ClientSideEffectsStream
==============
*/

void __fastcall Load_ClientSideEffectsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientSideEffectsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ClientRootDefStream
==============
*/

void __fastcall Postload_ClientRootDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientRootDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ClientTriggerHullArray
==============
*/

void __fastcall Load_ClientTriggerHullArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientTriggerHullArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_AudioPropagationEdgeArray
==============
*/

int __fastcall Mark_AudioPropagationEdgeArray(const unsigned __int64 count)
{
  return ?Mark_AudioPropagationEdgeArray@@YAH_K@Z(count);
}

/*
==============
Preload_StaticModelCollisionInstanceArray
==============
*/

void __fastcall Preload_StaticModelCollisionInstanceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_StaticModelCollisionInstanceArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_StaticModelCollisionCompressedModelListArray
==============
*/

int __fastcall Mark_StaticModelCollisionCompressedModelListArray(const unsigned __int64 count)
{
  return ?Mark_StaticModelCollisionCompressedModelListArray@@YAH_K@Z(count);
}

/*
==============
Load_SpawnGroupZone
==============
*/

void __fastcall Load_SpawnGroupZone(const DBStreamStart streamStart)
{
  ?Load_SpawnGroupZone@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_MapEdgeListPtr
==============
*/

int __fastcall Mark_MapEdgeListPtr()
{
  return ?Mark_MapEdgeListPtr@@YAHXZ();
}

/*
==============
Postload_TriggerHullStream
==============
*/

void __fastcall Postload_TriggerHullStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_TriggerHullStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_StaticModelCollisionCompressedModelList
==============
*/

int __fastcall Mark_StaticModelCollisionCompressedModelList()
{
  return ?Mark_StaticModelCollisionCompressedModelList@@YAHXZ();
}

/*
==============
Load_ProcessStructLayout_SpawnerList
==============
*/

void Load_ProcessStructLayout_SpawnerList(void)
{
  ?Load_ProcessStructLayout_SpawnerList@@YAXXZ();
}

/*
==============
Mark_AudioPASpeaker
==============
*/

int __fastcall Mark_AudioPASpeaker()
{
  return ?Mark_AudioPASpeaker@@YAHXZ();
}

/*
==============
Postload_CreateFxPaletteDefArray
==============
*/

void __fastcall Postload_CreateFxPaletteDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_CreateFxPaletteDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_AudioPropagationNodeArray
==============
*/

int __fastcall Mark_AudioPropagationNodeArray(const unsigned __int64 count)
{
  return ?Mark_AudioPropagationNodeArray@@YAH_K@Z(count);
}

/*
==============
Preload_CTAudRvbPanInfoArray
==============
*/

void __fastcall Preload_CTAudRvbPanInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_CTAudRvbPanInfoArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_SplineRecordList
==============
*/

void __fastcall Postload_SplineRecordList(const DBStreamStart streamStart)
{
  ?Postload_SplineRecordList@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_SpawnerStream
==============
*/

void __fastcall Load_SpawnerStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_SpawnerStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ClientTriggersArray
==============
*/

void __fastcall Preload_ClientTriggersArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientTriggersArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_CTAudRvbPanInfo
==============
*/

CTAudRvbPanInfo *__fastcall AllocPreload_CTAudRvbPanInfo()
{
  return ?AllocPreload_CTAudRvbPanInfo@@YAPEAUCTAudRvbPanInfo@@XZ();
}

/*
==============
Preload_ServerSideEffectsArray
==============
*/

void __fastcall Preload_ServerSideEffectsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ServerSideEffectsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_AudioPropagationEdgeArray
==============
*/

void __fastcall Load_AudioPropagationEdgeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_AudioPropagationEdgeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_StaticModelCollisionCompressedInstance
==============
*/

StaticModelCollisionCompressedInstance *__fastcall AllocLoad_StaticModelCollisionCompressedInstance()
{
  return ?AllocLoad_StaticModelCollisionCompressedInstance@@YAPEAUStaticModelCollisionCompressedInstance@@XZ();
}

/*
==============
Postload_StaticModelCollisionCompressedInstanceArray
==============
*/

void __fastcall Postload_StaticModelCollisionCompressedInstanceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_StaticModelCollisionCompressedInstanceArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_SplineRecordList
==============
*/

void Load_ProcessStructLayout_SplineRecordList(void)
{
  ?Load_ProcessStructLayout_SplineRecordList@@YAXXZ();
}

/*
==============
Preload_StaticModelCollisionInstanceStream
==============
*/

void __fastcall Preload_StaticModelCollisionInstanceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_StaticModelCollisionInstanceStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ClientSideEffectsStream
==============
*/

void __fastcall Preload_ClientSideEffectsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientSideEffectsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_SpawnPointRecordList
==============
*/

SpawnPointRecordList *__fastcall AllocPostload_SpawnPointRecordList()
{
  return ?AllocPostload_SpawnPointRecordList@@YAPEAUSpawnPointRecordList@@XZ();
}

/*
==============
Preload_SpawnerArray
==============
*/

void __fastcall Preload_SpawnerArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_SpawnerArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_StaticModelCollisionInstance
==============
*/

int __fastcall Mark_StaticModelCollisionInstance()
{
  return ?Mark_StaticModelCollisionInstance@@YAHXZ();
}

/*
==============
Preload_AddonMapEnts
==============
*/

void __fastcall Preload_AddonMapEnts(const DBStreamStart streamStart)
{
  ?Preload_AddonMapEnts@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_AudioPropagationNodeStream
==============
*/

void __fastcall Load_AudioPropagationNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_AudioPropagationNodeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_PhysicsCapacitiesArray
==============
*/

void __fastcall Preload_PhysicsCapacitiesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_PhysicsCapacitiesArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_SpawnGroupStream
==============
*/

void __fastcall Preload_SpawnGroupStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_SpawnGroupStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CollisionHeatmapEntryArray
==============
*/

void __fastcall Load_CollisionHeatmapEntryArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_CollisionHeatmapEntryArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_TriggerWindingArray
==============
*/

void __fastcall Postload_TriggerWindingArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_TriggerWindingArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_AudioPropagationEdgeArray
==============
*/

void __fastcall Postload_AudioPropagationEdgeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_AudioPropagationEdgeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_StaticModelCollisionCompressedModelList
==============
*/

void Load_ProcessStructLayout_StaticModelCollisionCompressedModelList(void)
{
  ?Load_ProcessStructLayout_StaticModelCollisionCompressedModelList@@YAXXZ();
}

/*
==============
Preload_DynEntityList
==============
*/

void __fastcall Preload_DynEntityList(const DBStreamStart streamStart)
{
  ?Preload_DynEntityList@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_MapEnts
==============
*/

void __fastcall Preload_MapEnts(const DBStreamStart streamStart)
{
  ?Preload_MapEnts@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_cmodel_tStream
==============
*/

void __fastcall Preload_cmodel_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_cmodel_tStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_SpawnerField
==============
*/

void __fastcall Preload_SpawnerField(const DBStreamStart streamStart)
{
  ?Preload_SpawnerField@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_SpawnGroupZone
==============
*/

void Load_ProcessStructLayout_SpawnGroupZone(void)
{
  ?Load_ProcessStructLayout_SpawnGroupZone@@YAXXZ();
}

/*
==============
Load_clipMap_tArray
==============
*/

void __fastcall Load_clipMap_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_clipMap_tArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_StaticModelCollisionCompressedModelStream
==============
*/

void __fastcall Preload_StaticModelCollisionCompressedModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_StaticModelCollisionCompressedModelStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_SpawnGroupZone
==============
*/

void __fastcall Postload_SpawnGroupZone(const DBStreamStart streamStart)
{
  ?Postload_SpawnGroupZone@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_DynEntityListArray
==============
*/

void __fastcall Load_DynEntityListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_DynEntityListArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ClientLoopSoundDefArray
==============
*/

void __fastcall Load_ClientLoopSoundDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientLoopSoundDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_AudioPASpeakerStream
==============
*/

void __fastcall Preload_AudioPASpeakerStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_AudioPASpeakerStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_TriggerWindingPointArray
==============
*/

void __fastcall Postload_TriggerWindingPointArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_TriggerWindingPointArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_SplineRecordList
==============
*/

SplineRecordList *__fastcall AllocPostload_SplineRecordList()
{
  return ?AllocPostload_SplineRecordList@@YAPEAUSplineRecordList@@XZ();
}

/*
==============
Preload_CreateFxAssetData
==============
*/

void __fastcall Preload_CreateFxAssetData(const DBStreamStart streamStart)
{
  ?Preload_CreateFxAssetData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CTAudRvbPanInfoStream
==============
*/

void __fastcall Load_CTAudRvbPanInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_CTAudRvbPanInfoStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_TriggerHullArray
==============
*/

void __fastcall Preload_TriggerHullArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_TriggerHullArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_MapTriggers
==============
*/

MapTriggers *__fastcall AllocPostload_MapTriggers()
{
  return ?AllocPostload_MapTriggers@@YAPEAUMapTriggers@@XZ();
}

/*
==============
Load_ClientEntAnchorArray
==============
*/

void __fastcall Load_ClientEntAnchorArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientEntAnchorArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_StaticModelCollisionModel
==============
*/

int __fastcall Mark_StaticModelCollisionModel()
{
  return ?Mark_StaticModelCollisionModel@@YAHXZ();
}

/*
==============
Preload_CollisionTilePtrStream
==============
*/

void __fastcall Preload_CollisionTilePtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_CollisionTilePtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_AddonMapEnts
==============
*/

AddonMapEnts *__fastcall AllocPreload_AddonMapEnts()
{
  return ?AllocPreload_AddonMapEnts@@YAPEAUAddonMapEnts@@XZ();
}

/*
==============
Load_clipMap_ptrArray
==============
*/

void __fastcall Load_clipMap_ptrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_clipMap_ptrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_SplineRecordListArray
==============
*/

void __fastcall Preload_SplineRecordListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_SplineRecordListArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_TriggerSlabArray
==============
*/

void __fastcall Preload_TriggerSlabArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_TriggerSlabArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_SpawnGroupZoneStream
==============
*/

void __fastcall Load_SpawnGroupZoneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_SpawnGroupZoneStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_CollisionHeatmapEntryArray
==============
*/

void __fastcall Preload_CollisionHeatmapEntryArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_CollisionHeatmapEntryArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_PhysicsCapacitiesStream
==============
*/

void __fastcall Postload_PhysicsCapacitiesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_PhysicsCapacitiesStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ClientTriggerModel
==============
*/

void __fastcall Preload_ClientTriggerModel(const DBStreamStart streamStart)
{
  ?Preload_ClientTriggerModel@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ClientEntAnchor
==============
*/

ClientEntAnchor *__fastcall AllocPreload_ClientEntAnchor()
{
  return ?AllocPreload_ClientEntAnchor@@YAPEAUClientEntAnchor@@XZ();
}

/*
==============
Mark_TriggerHull
==============
*/

int __fastcall Mark_TriggerHull()
{
  return ?Mark_TriggerHull@@YAHXZ();
}

/*
==============
AllocPostload_TriggerWindingPoint
==============
*/

TriggerWindingPoint *__fastcall AllocPostload_TriggerWindingPoint()
{
  return ?AllocPostload_TriggerWindingPoint@@YAPEAUTriggerWindingPoint@@XZ();
}

/*
==============
Load_clipMap_ptr
==============
*/

void __fastcall Load_clipMap_ptr(const DBStreamStart streamStart)
{
  ?Load_clipMap_ptr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_StaticModelCollisionInstanceStream
==============
*/

void __fastcall Postload_StaticModelCollisionInstanceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_StaticModelCollisionInstanceStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_TriggerHullStream
==============
*/

void __fastcall Load_TriggerHullStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_TriggerHullStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_MapTriggers
==============
*/

void __fastcall Load_MapTriggers(const DBStreamStart streamStart)
{
  ?Load_MapTriggers@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ClientTriggerHull
==============
*/

void __fastcall Preload_ClientTriggerHull(const DBStreamStart streamStart)
{
  ?Preload_ClientTriggerHull@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_alignHavokShapeData_t
==============
*/

char *__fastcall AllocPostload_alignHavokShapeData_t()
{
  return ?AllocPostload_alignHavokShapeData_t@@YAPEADXZ();
}

/*
==============
Preload_ClientRootDefArray
==============
*/

void __fastcall Preload_ClientRootDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientRootDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_StaticModelCollisionCompressedInstance
==============
*/

StaticModelCollisionCompressedInstance *__fastcall AllocPreload_StaticModelCollisionCompressedInstance()
{
  return ?AllocPreload_StaticModelCollisionCompressedInstance@@YAPEAUStaticModelCollisionCompressedInstance@@XZ();
}

/*
==============
Load_StaticModelCollisionCompressedInstanceStream
==============
*/

void __fastcall Load_StaticModelCollisionCompressedInstanceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_StaticModelCollisionCompressedInstanceStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_MapEntsPtrStream
==============
*/

void __fastcall Postload_MapEntsPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_MapEntsPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_alignHavokShapeData_tArray
==============
*/

void __fastcall Load_alignHavokShapeData_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_alignHavokShapeData_tArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_SpawnGroupZoneArray
==============
*/

void __fastcall Postload_SpawnGroupZoneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_SpawnGroupZoneArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ClientSideEffects
==============
*/

ClientSideEffects *__fastcall AllocPreload_ClientSideEffects()
{
  return ?AllocPreload_ClientSideEffects@@YAPEAUClientSideEffects@@XZ();
}

/*
==============
AllocLoad_ClientSideEffects
==============
*/

ClientSideEffects *__fastcall AllocLoad_ClientSideEffects()
{
  return ?AllocLoad_ClientSideEffects@@YAPEAUClientSideEffects@@XZ();
}

/*
==============
Postload_SplinePointRecordListStream
==============
*/

void __fastcall Postload_SplinePointRecordListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_SplinePointRecordListStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_SpawnGroupZoneStream
==============
*/

void __fastcall Postload_SpawnGroupZoneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_SpawnGroupZoneStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_SplinePointRecordListArray
==============
*/

void __fastcall Load_SplinePointRecordListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_SplinePointRecordListArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_MapEntsPtrArray
==============
*/

void __fastcall Postload_MapEntsPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_MapEntsPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ClientOneshotEffectDefArray
==============
*/

void __fastcall Postload_ClientOneshotEffectDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientOneshotEffectDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ClientEntAnchorArray
==============
*/

void __fastcall Preload_ClientEntAnchorArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientEntAnchorArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_MapEdgeList
==============
*/

void __fastcall Postload_MapEdgeList(const DBStreamStart streamStart)
{
  ?Postload_MapEdgeList@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ClientMapTriggersArray
==============
*/

void __fastcall Load_ClientMapTriggersArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientMapTriggersArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ClientEntAnchorStream
==============
*/

void __fastcall Postload_ClientEntAnchorStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientEntAnchorStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_clipMap_ptr
==============
*/

int __fastcall Mark_clipMap_ptr()
{
  return ?Mark_clipMap_ptr@@YAHXZ();
}

/*
==============
AllocPostload_AudioPASpeaker
==============
*/

AudioPASpeaker *__fastcall AllocPostload_AudioPASpeaker()
{
  return ?AllocPostload_AudioPASpeaker@@YAPEAUAudioPASpeaker@@XZ();
}

/*
==============
Load_TriggerWindingPointStream
==============
*/

void __fastcall Load_TriggerWindingPointStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_TriggerWindingPointStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_MapEdgeListPtrStream
==============
*/

void __fastcall Load_MapEdgeListPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_MapEdgeListPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_AddonMapEntsPtrStream
==============
*/

void __fastcall Postload_AddonMapEntsPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_AddonMapEntsPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ClientTriggerBlendNode
==============
*/

void Load_ProcessStructLayout_ClientTriggerBlendNode(void)
{
  ?Load_ProcessStructLayout_ClientTriggerBlendNode@@YAXXZ();
}

/*
==============
Load_DynEntityListPtrArray
==============
*/

void __fastcall Load_DynEntityListPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_DynEntityListPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_CollisionTilePtr
==============
*/

CollisionTile **__fastcall AllocPostload_CollisionTilePtr()
{
  return ?AllocPostload_CollisionTilePtr@@YAPEAPEAUCollisionTile@@XZ();
}

/*
==============
Preload_ClientTriggerBlendNodeArray
==============
*/

void __fastcall Preload_ClientTriggerBlendNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientTriggerBlendNodeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_StaticModelCollisionCompressedModelStream
==============
*/

void __fastcall Postload_StaticModelCollisionCompressedModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_StaticModelCollisionCompressedModelStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_SpawnGroupPoint
==============
*/

SpawnGroupPoint *__fastcall AllocPostload_SpawnGroupPoint()
{
  return ?AllocPostload_SpawnGroupPoint@@YAPEAUSpawnGroupPoint@@XZ();
}

/*
==============
Preload_CollisionHeatmapEntryStream
==============
*/

void __fastcall Preload_CollisionHeatmapEntryStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_CollisionHeatmapEntryStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ClientSideEffects
==============
*/

void Load_ProcessStructLayout_ClientSideEffects(void)
{
  ?Load_ProcessStructLayout_ClientSideEffects@@YAXXZ();
}

/*
==============
AllocPostload_MapEnts
==============
*/

MapEnts *__fastcall AllocPostload_MapEnts()
{
  return ?AllocPostload_MapEnts@@YAPEAUMapEnts@@XZ();
}

/*
==============
Postload_SpawnGroupPointStream
==============
*/

void __fastcall Postload_SpawnGroupPointStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_SpawnGroupPointStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_MapEnts
==============
*/

void Load_ProcessStructLayout_MapEnts(void)
{
  ?Load_ProcessStructLayout_MapEnts@@YAXXZ();
}

/*
==============
AllocLoad_ServerSideEffects
==============
*/

ServerSideEffects *__fastcall AllocLoad_ServerSideEffects()
{
  return ?AllocLoad_ServerSideEffects@@YAPEAUServerSideEffects@@XZ();
}

/*
==============
Load_ClientExploderDefStream
==============
*/

void __fastcall Load_ClientExploderDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientExploderDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ClientLoopSoundDef
==============
*/

ClientLoopSoundDef *__fastcall AllocLoad_ClientLoopSoundDef()
{
  return ?AllocLoad_ClientLoopSoundDef@@YAPEAUClientLoopSoundDef@@XZ();
}

/*
==============
Preload_DynEntityListArray
==============
*/

void __fastcall Preload_DynEntityListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_DynEntityListArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_MapEdgeListPtrStream
==============
*/

void __fastcall Preload_MapEdgeListPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_MapEdgeListPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ClientExploderDefArray
==============
*/

int __fastcall Mark_ClientExploderDefArray(const unsigned __int64 count)
{
  return ?Mark_ClientExploderDefArray@@YAH_K@Z(count);
}

/*
==============
Load_ClientTriggerBlendArray
==============
*/

void __fastcall Load_ClientTriggerBlendArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientTriggerBlendArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_SplineRecordListArray
==============
*/

int __fastcall Mark_SplineRecordListArray(const unsigned __int64 count)
{
  return ?Mark_SplineRecordListArray@@YAH_K@Z(count);
}

/*
==============
Load_SpawnGroupArray
==============
*/

void __fastcall Load_SpawnGroupArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_SpawnGroupArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_SpawnGroupPoint
==============
*/

SpawnGroupPoint *__fastcall AllocPreload_SpawnGroupPoint()
{
  return ?AllocPreload_SpawnGroupPoint@@YAPEAUSpawnGroupPoint@@XZ();
}

/*
==============
Postload_ClientTriggerBlendNodeStream
==============
*/

void __fastcall Postload_ClientTriggerBlendNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientTriggerBlendNodeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_clipMap_t
==============
*/

void __fastcall Load_clipMap_t(const DBStreamStart streamStart)
{
  ?Load_clipMap_t@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_VariableType
==============
*/

VariableType *__fastcall AllocLoad_VariableType()
{
  return ?AllocLoad_VariableType@@YAPEAW4VariableType@@XZ();
}

/*
==============
Load_ServerSideEffects
==============
*/

void __fastcall Load_ServerSideEffects(const DBStreamStart streamStart)
{
  ?Load_ServerSideEffects@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_StaticModelCollisionModel
==============
*/

void __fastcall Postload_StaticModelCollisionModel(const DBStreamStart streamStart)
{
  ?Postload_StaticModelCollisionModel@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_SplinePointRecordList
==============
*/

void Load_ProcessStructLayout_SplinePointRecordList(void)
{
  ?Load_ProcessStructLayout_SplinePointRecordList@@YAXXZ();
}

/*
==============
Postload_ClientTriggersStream
==============
*/

void __fastcall Postload_ClientTriggersStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientTriggersStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_SpawnerFieldStream
==============
*/

void __fastcall Preload_SpawnerFieldStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_SpawnerFieldStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ClientReactiveEntDefArray
==============
*/

void __fastcall Load_ClientReactiveEntDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientReactiveEntDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_Spawner
==============
*/

Spawner *__fastcall AllocPreload_Spawner()
{
  return ?AllocPreload_Spawner@@YAPEAUSpawner@@XZ();
}

/*
==============
Load_ClientSideEffectsArray
==============
*/

void __fastcall Load_ClientSideEffectsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientSideEffectsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_SpawnGroupArray
==============
*/

int __fastcall Mark_SpawnGroupArray(const unsigned __int64 count)
{
  return ?Mark_SpawnGroupArray@@YAH_K@Z(count);
}

/*
==============
AllocPreload_ClientEntityLinkToDefPtr
==============
*/

ClientEntityLinkToDef **__fastcall AllocPreload_ClientEntityLinkToDefPtr()
{
  return ?AllocPreload_ClientEntityLinkToDefPtr@@YAPEAPEAUClientEntityLinkToDef@@XZ();
}

/*
==============
AllocLoad_CTAudRvbPanInfo
==============
*/

CTAudRvbPanInfo *__fastcall AllocLoad_CTAudRvbPanInfo()
{
  return ?AllocLoad_CTAudRvbPanInfo@@YAPEAUCTAudRvbPanInfo@@XZ();
}

/*
==============
Preload_StaticModelCollisionInstance
==============
*/

void __fastcall Preload_StaticModelCollisionInstance(const DBStreamStart streamStart)
{
  ?Preload_StaticModelCollisionInstance@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_SplinePointEntityRecordArray
==============
*/

int __fastcall Mark_SplinePointEntityRecordArray(const unsigned __int64 count)
{
  return ?Mark_SplinePointEntityRecordArray@@YAH_K@Z(count);
}

/*
==============
Load_CollisionTileStream
==============
*/

void __fastcall Load_CollisionTileStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_CollisionTileStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_CollisionHeatmapEntry
==============
*/

CollisionHeatmapEntry *__fastcall AllocPostload_CollisionHeatmapEntry()
{
  return ?AllocPostload_CollisionHeatmapEntry@@YAPEAUCollisionHeatmapEntry@@XZ();
}

/*
==============
AllocLoad_SpawnGroupPoint
==============
*/

SpawnGroupPoint *__fastcall AllocLoad_SpawnGroupPoint()
{
  return ?AllocLoad_SpawnGroupPoint@@YAPEAUSpawnGroupPoint@@XZ();
}

/*
==============
AllocLoad_CreateFxAssetData
==============
*/

CreateFxAssetData *__fastcall AllocLoad_CreateFxAssetData()
{
  return ?AllocLoad_CreateFxAssetData@@YAPEAUCreateFxAssetData@@XZ();
}

/*
==============
Mark_ClientEntityLinkToDefPtr
==============
*/

int __fastcall Mark_ClientEntityLinkToDefPtr()
{
  return ?Mark_ClientEntityLinkToDefPtr@@YAHXZ();
}

/*
==============
Preload_SpawnGroupPointStream
==============
*/

void __fastcall Preload_SpawnGroupPointStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_SpawnGroupPointStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_clipMap_t
==============
*/

clipMap_t *__fastcall AllocLoad_clipMap_t()
{
  return ?AllocLoad_clipMap_t@@YAPEAUclipMap_t@@XZ();
}

/*
==============
AllocPreload_ClientIntervalSoundDef
==============
*/

ClientIntervalSoundDef *__fastcall AllocPreload_ClientIntervalSoundDef()
{
  return ?AllocPreload_ClientIntervalSoundDef@@YAPEAUClientIntervalSoundDef@@XZ();
}

/*
==============
Postload_SpawnerFieldArray
==============
*/

void __fastcall Postload_SpawnerFieldArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_SpawnerFieldArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_CollisionTilePtrArray
==============
*/

void __fastcall Postload_CollisionTilePtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_CollisionTilePtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_AudioPropagationNode
==============
*/

void __fastcall Postload_AudioPropagationNode(const DBStreamStart streamStart)
{
  ?Postload_AudioPropagationNode@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_SpawnGroupZoneArray
==============
*/

void __fastcall Load_SpawnGroupZoneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_SpawnGroupZoneArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CTAudRvbPanInfoArray
==============
*/

void __fastcall Load_CTAudRvbPanInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_CTAudRvbPanInfoArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_SpawnGroupClusterArray
==============
*/

int __fastcall Mark_SpawnGroupClusterArray(const unsigned __int64 count)
{
  return ?Mark_SpawnGroupClusterArray@@YAH_K@Z(count);
}

/*
==============
AllocPreload_ClientOneshotEffectDef
==============
*/

ClientOneshotEffectDef *__fastcall AllocPreload_ClientOneshotEffectDef()
{
  return ?AllocPreload_ClientOneshotEffectDef@@YAPEAUClientOneshotEffectDef@@XZ();
}

/*
==============
Postload_ClientTriggerBlendArray
==============
*/

void __fastcall Postload_ClientTriggerBlendArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientTriggerBlendArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_StaticModelCollisionModelList
==============
*/

void __fastcall Postload_StaticModelCollisionModelList(const DBStreamStart streamStart)
{
  ?Postload_StaticModelCollisionModelList@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_SpawnerList
==============
*/

void __fastcall Preload_SpawnerList(const DBStreamStart streamStart)
{
  ?Preload_SpawnerList@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ClientTriggers
==============
*/

void __fastcall Load_ClientTriggers(const DBStreamStart streamStart)
{
  ?Load_ClientTriggers@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_CTAudRvbPanInfo
==============
*/

void __fastcall Postload_CTAudRvbPanInfo(const DBStreamStart streamStart)
{
  ?Postload_CTAudRvbPanInfo@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_SplinePointEntityRecord
==============
*/

void __fastcall Preload_SplinePointEntityRecord(const DBStreamStart streamStart)
{
  ?Preload_SplinePointEntityRecord@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_TriggerWinding
==============
*/

void Load_ProcessStructLayout_TriggerWinding(void)
{
  ?Load_ProcessStructLayout_TriggerWinding@@YAXXZ();
}

/*
==============
Postload_CreateFxPaletteDef
==============
*/

void __fastcall Postload_CreateFxPaletteDef(const DBStreamStart streamStart)
{
  ?Postload_CreateFxPaletteDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ClientRootDef
==============
*/

ClientRootDef *__fastcall AllocLoad_ClientRootDef()
{
  return ?AllocLoad_ClientRootDef@@YAPEAUClientRootDef@@XZ();
}

/*
==============
Load_ClientLoopSoundDef
==============
*/

void __fastcall Load_ClientLoopSoundDef(const DBStreamStart streamStart)
{
  ?Load_ClientLoopSoundDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_clipMap_ptr
==============
*/

clipMap_t **__fastcall AllocPostload_clipMap_ptr()
{
  return ?AllocPostload_clipMap_ptr@@YAPEAPEAUclipMap_t@@XZ();
}

/*
==============
Postload_SplinePointRecordList
==============
*/

void __fastcall Postload_SplinePointRecordList(const DBStreamStart streamStart)
{
  ?Postload_SplinePointRecordList@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_clipMap_ptrStream
==============
*/

void __fastcall Load_clipMap_ptrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_clipMap_ptrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_SpawnGroupPointArray
==============
*/

void __fastcall Load_SpawnGroupPointArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_SpawnGroupPointArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_CollisionHeatmapEntryArray
==============
*/

int __fastcall Mark_CollisionHeatmapEntryArray(const unsigned __int64 count)
{
  return ?Mark_CollisionHeatmapEntryArray@@YAH_K@Z(count);
}

/*
==============
Preload_ClientEntityLinkToDefPtrStream
==============
*/

void __fastcall Preload_ClientEntityLinkToDefPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientEntityLinkToDefPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_SplinePointEntityRecord
==============
*/

void __fastcall Load_SplinePointEntityRecord(const DBStreamStart streamStart)
{
  ?Load_SplinePointEntityRecord@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_AudioPASpeakerStream
==============
*/

void __fastcall Postload_AudioPASpeakerStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_AudioPASpeakerStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ClientMapTriggers
==============
*/

ClientMapTriggers *__fastcall AllocLoad_ClientMapTriggers()
{
  return ?AllocLoad_ClientMapTriggers@@YAPEAUClientMapTriggers@@XZ();
}

/*
==============
AllocPostload_StaticModelCollisionModelList
==============
*/

StaticModelCollisionModelList *__fastcall AllocPostload_StaticModelCollisionModelList()
{
  return ?AllocPostload_StaticModelCollisionModelList@@YAPEAUStaticModelCollisionModelList@@XZ();
}

/*
==============
Mark_MapEntsPtr
==============
*/

int __fastcall Mark_MapEntsPtr()
{
  return ?Mark_MapEntsPtr@@YAHXZ();
}

/*
==============
AllocPreload_TriggerModel
==============
*/

TriggerModel *__fastcall AllocPreload_TriggerModel()
{
  return ?AllocPreload_TriggerModel@@YAPEAUTriggerModel@@XZ();
}

/*
==============
Postload_alignHavokShapeData_tArray
==============
*/

void __fastcall Postload_alignHavokShapeData_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_alignHavokShapeData_tArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_StaticModelCollisionModelStream
==============
*/

void __fastcall Postload_StaticModelCollisionModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_StaticModelCollisionModelStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ClientExploderDef
==============
*/

int __fastcall Mark_ClientExploderDef()
{
  return ?Mark_ClientExploderDef@@YAHXZ();
}

/*
==============
AllocLoad_PhysicsCapacities
==============
*/

PhysicsCapacities *__fastcall AllocLoad_PhysicsCapacities()
{
  return ?AllocLoad_PhysicsCapacities@@YAPEAUPhysicsCapacities@@XZ();
}

/*
==============
Preload_TriggerWinding
==============
*/

void __fastcall Preload_TriggerWinding(const DBStreamStart streamStart)
{
  ?Preload_TriggerWinding@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_TriggerSlabArray
==============
*/

int __fastcall Mark_TriggerSlabArray(const unsigned __int64 count)
{
  return ?Mark_TriggerSlabArray@@YAH_K@Z(count);
}

/*
==============
Mark_ClientReactiveEntDefArray
==============
*/

int __fastcall Mark_ClientReactiveEntDefArray(const unsigned __int64 count)
{
  return ?Mark_ClientReactiveEntDefArray@@YAH_K@Z(count);
}

/*
==============
Postload_SpawnerStream
==============
*/

void __fastcall Postload_SpawnerStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_SpawnerStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_CreateFxAssetDataArray
==============
*/

void __fastcall Preload_CreateFxAssetDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_CreateFxAssetDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_cmodel_t
==============
*/

cmodel_t *__fastcall AllocPreload_cmodel_t()
{
  return ?AllocPreload_cmodel_t@@YAPEAUcmodel_t@@XZ();
}

/*
==============
Mark_StaticModelCollisionCompressedInstance
==============
*/

int __fastcall Mark_StaticModelCollisionCompressedInstance()
{
  return ?Mark_StaticModelCollisionCompressedInstance@@YAHXZ();
}

/*
==============
Postload_ClientExploderDefStream
==============
*/

void __fastcall Postload_ClientExploderDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientExploderDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_SpawnerFieldStream
==============
*/

void __fastcall Postload_SpawnerFieldStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_SpawnerFieldStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_AudioPropagationEdge
==============
*/

void __fastcall Postload_AudioPropagationEdge(const DBStreamStart streamStart)
{
  ?Postload_AudioPropagationEdge@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ClientExploderDefArray
==============
*/

void __fastcall Preload_ClientExploderDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientExploderDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_SpawnerFieldArray
==============
*/

int __fastcall Mark_SpawnerFieldArray(const unsigned __int64 count)
{
  return ?Mark_SpawnerFieldArray@@YAH_K@Z(count);
}

/*
==============
Postload_ClientEntAnchorArray
==============
*/

void __fastcall Postload_ClientEntAnchorArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientEntAnchorArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_SplineRecordListArray
==============
*/

void __fastcall Load_SplineRecordListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_SplineRecordListArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_SpawnPointRecordListArray
==============
*/

void __fastcall Load_SpawnPointRecordListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_SpawnPointRecordListArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_SpawnerList
==============
*/

void __fastcall Postload_SpawnerList(const DBStreamStart streamStart)
{
  ?Postload_SpawnerList@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_MapEntsPtrArray
==============
*/

void __fastcall Load_MapEntsPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_MapEntsPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ClientLoopSoundDefArray
==============
*/

void __fastcall Postload_ClientLoopSoundDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientLoopSoundDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ServerExploderDef
==============
*/

ServerExploderDef *__fastcall AllocPostload_ServerExploderDef()
{
  return ?AllocPostload_ServerExploderDef@@YAPEAUServerExploderDef@@XZ();
}

/*
==============
Load_ProcessStructLayout_ClientTriggerHull
==============
*/

void Load_ProcessStructLayout_ClientTriggerHull(void)
{
  ?Load_ProcessStructLayout_ClientTriggerHull@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_MapTriggers
==============
*/

void Load_ProcessStructLayout_MapTriggers(void)
{
  ?Load_ProcessStructLayout_MapTriggers@@YAXXZ();
}

/*
==============
AllocPreload_ClientTriggerHull
==============
*/

ClientTriggerHull *__fastcall AllocPreload_ClientTriggerHull()
{
  return ?AllocPreload_ClientTriggerHull@@YAPEAUClientTriggerHull@@XZ();
}

/*
==============
AllocLoad_ClientTriggerModel
==============
*/

ClientTriggerModel *__fastcall AllocLoad_ClientTriggerModel()
{
  return ?AllocLoad_ClientTriggerModel@@YAPEAUClientTriggerModel@@XZ();
}

/*
==============
AllocLoad_AddonMapEntsPtr
==============
*/

AddonMapEnts **__fastcall AllocLoad_AddonMapEntsPtr()
{
  return ?AllocLoad_AddonMapEntsPtr@@YAPEAPEAUAddonMapEnts@@XZ();
}

/*
==============
Load_PhysicsCapacitiesStream
==============
*/

void __fastcall Load_PhysicsCapacitiesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_PhysicsCapacitiesStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ServerSideEffectsArray
==============
*/

int __fastcall Mark_ServerSideEffectsArray(const unsigned __int64 count)
{
  return ?Mark_ServerSideEffectsArray@@YAH_K@Z(count);
}

/*
==============
AllocPostload_ClientSideEffects
==============
*/

ClientSideEffects *__fastcall AllocPostload_ClientSideEffects()
{
  return ?AllocPostload_ClientSideEffects@@YAPEAUClientSideEffects@@XZ();
}

/*
==============
Preload_ClientIntervalSoundDef
==============
*/

void __fastcall Preload_ClientIntervalSoundDef(const DBStreamStart streamStart)
{
  ?Preload_ClientIntervalSoundDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ServerSideEffectsStream
==============
*/

void __fastcall Preload_ServerSideEffectsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ServerSideEffectsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CollMapLookupEntryArray
==============
*/

void __fastcall Load_CollMapLookupEntryArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_CollMapLookupEntryArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_SplineRecordList
==============
*/

void __fastcall Preload_SplineRecordList(const DBStreamStart streamStart)
{
  ?Preload_SplineRecordList@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_SpawnGroupCluster
==============
*/

void __fastcall Postload_SpawnGroupCluster(const DBStreamStart streamStart)
{
  ?Postload_SpawnGroupCluster@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_VariableTypeArray
==============
*/

void __fastcall Load_VariableTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_VariableTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_CTAudRvbPanInfoArray
==============
*/

void __fastcall Postload_CTAudRvbPanInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_CTAudRvbPanInfoArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_MapTriggers
==============
*/

int __fastcall Mark_MapTriggers()
{
  return ?Mark_MapTriggers@@YAHXZ();
}

/*
==============
Load_CollisionTilePtr
==============
*/

void __fastcall Load_CollisionTilePtr(const DBStreamStart streamStart)
{
  ?Load_CollisionTilePtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_AudioPropagationEdge
==============
*/

int __fastcall Mark_AudioPropagationEdge()
{
  return ?Mark_AudioPropagationEdge@@YAHXZ();
}

/*
==============
Load_ServerExploderDef
==============
*/

void __fastcall Load_ServerExploderDef(const DBStreamStart streamStart)
{
  ?Load_ServerExploderDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_SpawnGroupArray
==============
*/

void __fastcall Postload_SpawnGroupArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_SpawnGroupArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_TriggerSlabArray
==============
*/

void __fastcall Postload_TriggerSlabArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_TriggerSlabArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_alignHavokShapeData_t
==============
*/

void __fastcall Postload_alignHavokShapeData_t(const DBStreamStart streamStart)
{
  ?Postload_alignHavokShapeData_t@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ClientMapTriggersArray
==============
*/

void __fastcall Postload_ClientMapTriggersArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientMapTriggersArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_MapEdgeListPtr
==============
*/

void __fastcall Preload_MapEdgeListPtr(const DBStreamStart streamStart)
{
  ?Preload_MapEdgeListPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ClientEntityLinkToDefPtrArray
==============
*/

void __fastcall Preload_ClientEntityLinkToDefPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientEntityLinkToDefPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_SpawnGroup
==============
*/

void __fastcall Postload_SpawnGroup(const DBStreamStart streamStart)
{
  ?Postload_SpawnGroup@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_SpawnPointEntityRecordArray
==============
*/

void __fastcall Load_SpawnPointEntityRecordArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_SpawnPointEntityRecordArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_MapEdgeListPtr
==============
*/

void __fastcall Load_MapEdgeListPtr(const DBStreamStart streamStart)
{
  ?Load_MapEdgeListPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_clipMap_ptr
==============
*/

clipMap_t **__fastcall AllocPreload_clipMap_ptr()
{
  return ?AllocPreload_clipMap_ptr@@YAPEAPEAUclipMap_t@@XZ();
}

/*
==============
Preload_CreateFxPaletteDef
==============
*/

void __fastcall Preload_CreateFxPaletteDef(const DBStreamStart streamStart)
{
  ?Preload_CreateFxPaletteDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_AudioPropagationNode
==============
*/

void Load_ProcessStructLayout_AudioPropagationNode(void)
{
  ?Load_ProcessStructLayout_AudioPropagationNode@@YAXXZ();
}

/*
==============
Postload_CollisionTilePtrStream
==============
*/

void __fastcall Postload_CollisionTilePtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_CollisionTilePtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ClientReactiveEntDefStream
==============
*/

void __fastcall Postload_ClientReactiveEntDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientReactiveEntDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ClientSideEffectsArray
==============
*/

void __fastcall Postload_ClientSideEffectsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientSideEffectsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_TriggerHullStream
==============
*/

void __fastcall Preload_TriggerHullStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_TriggerHullStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_SpawnerField
==============
*/

SpawnerField *__fastcall AllocPreload_SpawnerField()
{
  return ?AllocPreload_SpawnerField@@YAPEAUSpawnerField@@XZ();
}

/*
==============
Postload_SpawnGroupClusterArray
==============
*/

void __fastcall Postload_SpawnGroupClusterArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_SpawnGroupClusterArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_AudioPropagationNode
==============
*/

AudioPropagationNode *__fastcall AllocLoad_AudioPropagationNode()
{
  return ?AllocLoad_AudioPropagationNode@@YAPEAUAudioPropagationNode@@XZ();
}

/*
==============
Load_ProcessStructLayout_DynEntityList
==============
*/

void Load_ProcessStructLayout_DynEntityList(void)
{
  ?Load_ProcessStructLayout_DynEntityList@@YAXXZ();
}

/*
==============
Load_CheckArrayMemberMapEnts484
==============
*/

void Load_CheckArrayMemberMapEnts484(void)
{
  ?Load_CheckArrayMemberMapEnts484@@YAXXZ();
}

/*
==============
AllocPostload_Spawner
==============
*/

Spawner *__fastcall AllocPostload_Spawner()
{
  return ?AllocPostload_Spawner@@YAPEAUSpawner@@XZ();
}

/*
==============
Mark_cmodel_t
==============
*/

int __fastcall Mark_cmodel_t()
{
  return ?Mark_cmodel_t@@YAHXZ();
}

/*
==============
Load_ProcessStructLayout_cmodel_t
==============
*/

void Load_ProcessStructLayout_cmodel_t(void)
{
  ?Load_ProcessStructLayout_cmodel_t@@YAXXZ();
}

/*
==============
Load_SpawnGroupPoint
==============
*/

void __fastcall Load_SpawnGroupPoint(const DBStreamStart streamStart)
{
  ?Load_SpawnGroupPoint@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_TriggerModelArray
==============
*/

void __fastcall Preload_TriggerModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_TriggerModelArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_StaticModelCollisionCompressedModelListStream
==============
*/

void __fastcall Postload_StaticModelCollisionCompressedModelListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_StaticModelCollisionCompressedModelListStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_SplinePointRecordList
==============
*/

void __fastcall Preload_SplinePointRecordList(const DBStreamStart streamStart)
{
  ?Preload_SplinePointRecordList@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_CollisionTile
==============
*/

CollisionTile *__fastcall AllocLoad_CollisionTile()
{
  return ?AllocLoad_CollisionTile@@YAPEAUCollisionTile@@XZ();
}

/*
==============
Postload_Spawner
==============
*/

void __fastcall Postload_Spawner(const DBStreamStart streamStart)
{
  ?Postload_Spawner@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_SplinePointRecordList
==============
*/

int __fastcall Mark_SplinePointRecordList()
{
  return ?Mark_SplinePointRecordList@@YAHXZ();
}

/*
==============
Mark_ServerExploderDef
==============
*/

int __fastcall Mark_ServerExploderDef()
{
  return ?Mark_ServerExploderDef@@YAHXZ();
}

/*
==============
Postload_ServerSideEffects
==============
*/

void __fastcall Postload_ServerSideEffects(const DBStreamStart streamStart)
{
  ?Postload_ServerSideEffects@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_MapEntsPtr
==============
*/

void __fastcall Preload_MapEntsPtr(const DBStreamStart streamStart)
{
  ?Preload_MapEntsPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CollMapLookupEntryStream
==============
*/

void __fastcall Load_CollMapLookupEntryStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_CollMapLookupEntryStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_MapEntsArray
==============
*/

int __fastcall Mark_MapEntsArray(const unsigned __int64 count)
{
  return ?Mark_MapEntsArray@@YAH_K@Z(count);
}

/*
==============
Mark_TriggerWinding
==============
*/

int __fastcall Mark_TriggerWinding()
{
  return ?Mark_TriggerWinding@@YAHXZ();
}

/*
==============
Preload_ClientLoopSoundDefStream
==============
*/

void __fastcall Preload_ClientLoopSoundDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientLoopSoundDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_SplineRecordList
==============
*/

int __fastcall Mark_SplineRecordList()
{
  return ?Mark_SplineRecordList@@YAHXZ();
}

/*
==============
Postload_ClientLoopSoundDefStream
==============
*/

void __fastcall Postload_ClientLoopSoundDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientLoopSoundDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_SpawnGroupPointArray
==============
*/

void __fastcall Postload_SpawnGroupPointArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_SpawnGroupPointArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ClientTriggers
==============
*/

void __fastcall Preload_ClientTriggers(const DBStreamStart streamStart)
{
  ?Preload_ClientTriggers@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_SpawnerListArray
==============
*/

void __fastcall Preload_SpawnerListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_SpawnerListArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_AddonMapEntsArray
==============
*/

void __fastcall Preload_AddonMapEntsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_AddonMapEntsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_MapEntsPtrStream
==============
*/

void __fastcall Load_MapEntsPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_MapEntsPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_AddonMapEntsArray
==============
*/

int __fastcall Mark_AddonMapEntsArray(const unsigned __int64 count)
{
  return ?Mark_AddonMapEntsArray@@YAH_K@Z(count);
}

/*
==============
Load_ProcessStructLayout_ClientOneshotEffectDef
==============
*/

void Load_ProcessStructLayout_ClientOneshotEffectDef(void)
{
  ?Load_ProcessStructLayout_ClientOneshotEffectDef@@YAXXZ();
}

/*
==============
Load_VariableType
==============
*/

void __fastcall Load_VariableType(const DBStreamStart streamStart)
{
  ?Load_VariableType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CheckArrayMemberDynEntityList382
==============
*/

void Load_CheckArrayMemberDynEntityList382(void)
{
  ?Load_CheckArrayMemberDynEntityList382@@YAXXZ();
}

/*
==============
Postload_VariableTypeStream
==============
*/

void __fastcall Postload_VariableTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_VariableTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_MapTriggersStream
==============
*/

void __fastcall Preload_MapTriggersStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_MapTriggersStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ServerExploderDefStream
==============
*/

void __fastcall Load_ServerExploderDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ServerExploderDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_clipMap_t
==============
*/

void __fastcall Preload_clipMap_t(const DBStreamStart streamStart)
{
  ?Preload_clipMap_t@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_Spawner
==============
*/

void Load_ProcessStructLayout_Spawner(void)
{
  ?Load_ProcessStructLayout_Spawner@@YAXXZ();
}

/*
==============
Postload_MapEntsArray
==============
*/

void __fastcall Postload_MapEntsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_MapEntsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_AudioPropagationEdgeStream
==============
*/

void __fastcall Load_AudioPropagationEdgeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_AudioPropagationEdgeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_MapEntsArray
==============
*/

void __fastcall Load_MapEntsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_MapEntsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_TriggerWindingStream
==============
*/

void __fastcall Preload_TriggerWindingStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_TriggerWindingStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ClientTriggers
==============
*/

void __fastcall Postload_ClientTriggers(const DBStreamStart streamStart)
{
  ?Postload_ClientTriggers@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_MapTriggers
==============
*/

MapTriggers *__fastcall AllocLoad_MapTriggers()
{
  return ?AllocLoad_MapTriggers@@YAPEAUMapTriggers@@XZ();
}

/*
==============
Load_SpawnGroupClusterStream
==============
*/

void __fastcall Load_SpawnGroupClusterStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_SpawnGroupClusterStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_TriggerModelStream
==============
*/

void __fastcall Load_TriggerModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_TriggerModelStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_CollisionTilePtr
==============
*/

void __fastcall Preload_CollisionTilePtr(const DBStreamStart streamStart)
{
  ?Preload_CollisionTilePtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_DynEntityList
==============
*/

int __fastcall Mark_DynEntityList()
{
  return ?Mark_DynEntityList@@YAHXZ();
}

/*
==============
Postload_cmodel_tArray
==============
*/

void __fastcall Postload_cmodel_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_cmodel_tArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_SpawnerListArray
==============
*/

void __fastcall Postload_SpawnerListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_SpawnerListArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_MapEntsPtr
==============
*/

void __fastcall Postload_MapEntsPtr(const DBStreamStart streamStart)
{
  ?Postload_MapEntsPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CreateFxAssetData
==============
*/

void __fastcall Load_CreateFxAssetData(const DBStreamStart streamStart)
{
  ?Load_CreateFxAssetData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_TriggerWindingPoint
==============
*/

void __fastcall Load_TriggerWindingPoint(const DBStreamStart streamStart)
{
  ?Load_TriggerWindingPoint@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_SpawnerListStream
==============
*/

void __fastcall Load_SpawnerListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_SpawnerListStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_StaticModelCollisionCompressedModelListStream
==============
*/

void __fastcall Load_StaticModelCollisionCompressedModelListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_StaticModelCollisionCompressedModelListStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_cmodel_tStream
==============
*/

void __fastcall Postload_cmodel_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_cmodel_tStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_StaticModelCollisionInstanceArray
==============
*/

void __fastcall Postload_StaticModelCollisionInstanceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_StaticModelCollisionInstanceArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_MapTriggersStream
==============
*/

void __fastcall Load_MapTriggersStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_MapTriggersStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_CTAudRvbPanInfo
==============
*/

CTAudRvbPanInfo *__fastcall AllocPostload_CTAudRvbPanInfo()
{
  return ?AllocPostload_CTAudRvbPanInfo@@YAPEAUCTAudRvbPanInfo@@XZ();
}

/*
==============
Preload_ClientTriggerModelArray
==============
*/

void __fastcall Preload_ClientTriggerModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientTriggerModelArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_alignHavokShapeData_tStream
==============
*/

void __fastcall Preload_alignHavokShapeData_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_alignHavokShapeData_tStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ClientTriggerHull
==============
*/

ClientTriggerHull *__fastcall AllocPostload_ClientTriggerHull()
{
  return ?AllocPostload_ClientTriggerHull@@YAPEAUClientTriggerHull@@XZ();
}

/*
==============
Postload_AddonMapEntsStream
==============
*/

void __fastcall Postload_AddonMapEntsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_AddonMapEntsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_PhysicsCapacities
==============
*/

void __fastcall Preload_PhysicsCapacities(const DBStreamStart streamStart)
{
  ?Preload_PhysicsCapacities@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_SpawnGroupCluster
==============
*/

SpawnGroupCluster *__fastcall AllocPostload_SpawnGroupCluster()
{
  return ?AllocPostload_SpawnGroupCluster@@YAPEAUSpawnGroupCluster@@XZ();
}

/*
==============
Mark_DynEntityListPtrArray
==============
*/

int __fastcall Mark_DynEntityListPtrArray(const unsigned __int64 count)
{
  return ?Mark_DynEntityListPtrArray@@YAH_K@Z(count);
}

/*
==============
Mark_ClientTriggerBlend
==============
*/

int __fastcall Mark_ClientTriggerBlend()
{
  return ?Mark_ClientTriggerBlend@@YAHXZ();
}

/*
==============
Preload_SplinePointRecordListArray
==============
*/

void __fastcall Preload_SplinePointRecordListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_SplinePointRecordListArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_VariableType
==============
*/

void __fastcall Postload_VariableType(const DBStreamStart streamStart)
{
  ?Postload_VariableType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_SplinePointEntityRecordArray
==============
*/

void __fastcall Load_SplinePointEntityRecordArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_SplinePointEntityRecordArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ClientOneshotEffectDefArray
==============
*/

int __fastcall Mark_ClientOneshotEffectDefArray(const unsigned __int64 count)
{
  return ?Mark_ClientOneshotEffectDefArray@@YAH_K@Z(count);
}

/*
==============
Postload_SpawnPointEntityRecordArray
==============
*/

void __fastcall Postload_SpawnPointEntityRecordArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_SpawnPointEntityRecordArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ClientExploderDef
==============
*/

ClientExploderDef *__fastcall AllocPostload_ClientExploderDef()
{
  return ?AllocPostload_ClientExploderDef@@YAPEAUClientExploderDef@@XZ();
}

/*
==============
Mark_ClientIntervalSoundDef
==============
*/

int __fastcall Mark_ClientIntervalSoundDef()
{
  return ?Mark_ClientIntervalSoundDef@@YAHXZ();
}

/*
==============
AllocLoad_StaticModelCollisionCompressedModelList
==============
*/

StaticModelCollisionCompressedModelList *__fastcall AllocLoad_StaticModelCollisionCompressedModelList()
{
  return ?AllocLoad_StaticModelCollisionCompressedModelList@@YAPEAUStaticModelCollisionCompressedModelList@@XZ();
}

/*
==============
Load_Spawner
==============
*/

void __fastcall Load_Spawner(const DBStreamStart streamStart)
{
  ?Load_Spawner@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_AudioPASpeaker
==============
*/

void __fastcall Preload_AudioPASpeaker(const DBStreamStart streamStart)
{
  ?Preload_AudioPASpeaker@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_StaticModelCollisionCompressedModel
==============
*/

void Load_ProcessStructLayout_StaticModelCollisionCompressedModel(void)
{
  ?Load_ProcessStructLayout_StaticModelCollisionCompressedModel@@YAXXZ();
}

/*
==============
Postload_StaticModelCollisionModelListStream
==============
*/

void __fastcall Postload_StaticModelCollisionModelListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_StaticModelCollisionModelListStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ClientEntAnchorStream
==============
*/

void __fastcall Preload_ClientEntAnchorStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientEntAnchorStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_AudioPASpeaker
==============
*/

void Load_ProcessStructLayout_AudioPASpeaker(void)
{
  ?Load_ProcessStructLayout_AudioPASpeaker@@YAXXZ();
}

/*
==============
Mark_SpawnGroupCluster
==============
*/

int __fastcall Mark_SpawnGroupCluster()
{
  return ?Mark_SpawnGroupCluster@@YAHXZ();
}

/*
==============
Preload_ClientMapTriggers
==============
*/

void __fastcall Preload_ClientMapTriggers(const DBStreamStart streamStart)
{
  ?Preload_ClientMapTriggers@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_MapEntsPtrArray
==============
*/

int __fastcall Mark_MapEntsPtrArray(const unsigned __int64 count)
{
  return ?Mark_MapEntsPtrArray@@YAH_K@Z(count);
}

/*
==============
Mark_AddonMapEntsPtr
==============
*/

int __fastcall Mark_AddonMapEntsPtr()
{
  return ?Mark_AddonMapEntsPtr@@YAHXZ();
}

/*
==============
Mark_ClientRootDef
==============
*/

int __fastcall Mark_ClientRootDef()
{
  return ?Mark_ClientRootDef@@YAHXZ();
}

/*
==============
AllocPreload_MapEdgeListPtr
==============
*/

MapEdgeList **__fastcall AllocPreload_MapEdgeListPtr()
{
  return ?AllocPreload_MapEdgeListPtr@@YAPEAPEAUMapEdgeList@@XZ();
}

/*
==============
Load_ProcessStructLayout_SpawnPointEntityRecord
==============
*/

void Load_ProcessStructLayout_SpawnPointEntityRecord(void)
{
  ?Load_ProcessStructLayout_SpawnPointEntityRecord@@YAXXZ();
}

/*
==============
Preload_CTAudRvbPanInfoStream
==============
*/

void __fastcall Preload_CTAudRvbPanInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_CTAudRvbPanInfoStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ServerSideEffectsArray
==============
*/

void __fastcall Load_ServerSideEffectsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ServerSideEffectsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ClientTriggerHullStream
==============
*/

void __fastcall Postload_ClientTriggerHullStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientTriggerHullStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_CollisionTilePtr
==============
*/

void __fastcall Postload_CollisionTilePtr(const DBStreamStart streamStart)
{
  ?Postload_CollisionTilePtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_TriggerHullArray
==============
*/

void __fastcall Postload_TriggerHullArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_TriggerHullArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_SpawnGroup
==============
*/

void Load_ProcessStructLayout_SpawnGroup(void)
{
  ?Load_ProcessStructLayout_SpawnGroup@@YAXXZ();
}

/*
==============
Preload_CollMapLookupEntryStream
==============
*/

void __fastcall Preload_CollMapLookupEntryStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_CollMapLookupEntryStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_CTAudRvbPanInfo
==============
*/

void __fastcall Preload_CTAudRvbPanInfo(const DBStreamStart streamStart)
{
  ?Preload_CTAudRvbPanInfo@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_MapTriggersStream
==============
*/

void __fastcall Postload_MapTriggersStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_MapTriggersStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ClientEntityLinkToDefPtr
==============
*/

void Load_ProcessStructLayout_ClientEntityLinkToDefPtr(void)
{
  ?Load_ProcessStructLayout_ClientEntityLinkToDefPtr@@YAXXZ();
}

/*
==============
Postload_clipMap_ptrArray
==============
*/

void __fastcall Postload_clipMap_ptrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_clipMap_ptrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ClientEntityLinkToDefPtr
==============
*/

void __fastcall Postload_ClientEntityLinkToDefPtr(const DBStreamStart streamStart)
{
  ?Postload_ClientEntityLinkToDefPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ServerExploderDefArray
==============
*/

void __fastcall Preload_ServerExploderDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ServerExploderDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_CollMapLookupEntry
==============
*/

CollMapLookupEntry *__fastcall AllocPostload_CollMapLookupEntry()
{
  return ?AllocPostload_CollMapLookupEntry@@YAPEAUCollMapLookupEntry@@XZ();
}

/*
==============
AllocLoad_DynEntityListPtr
==============
*/

DynEntityList **__fastcall AllocLoad_DynEntityListPtr()
{
  return ?AllocLoad_DynEntityListPtr@@YAPEAPEAUDynEntityList@@XZ();
}

/*
==============
Postload_ClientTriggerBlendStream
==============
*/

void __fastcall Postload_ClientTriggerBlendStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientTriggerBlendStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_CollisionHeatmapEntry
==============
*/

void __fastcall Preload_CollisionHeatmapEntry(const DBStreamStart streamStart)
{
  ?Preload_CollisionHeatmapEntry@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CreateFxPaletteDef
==============
*/

void __fastcall Load_CreateFxPaletteDef(const DBStreamStart streamStart)
{
  ?Load_CreateFxPaletteDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ClientReactiveEntDefArray
==============
*/

void __fastcall Preload_ClientReactiveEntDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientReactiveEntDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_CreateFxPaletteDefStream
==============
*/

void __fastcall Preload_CreateFxPaletteDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_CreateFxPaletteDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_SpawnPointRecordList
==============
*/

SpawnPointRecordList *__fastcall AllocPreload_SpawnPointRecordList()
{
  return ?AllocPreload_SpawnPointRecordList@@YAPEAUSpawnPointRecordList@@XZ();
}

/*
==============
Mark_SpawnPointEntityRecord
==============
*/

int __fastcall Mark_SpawnPointEntityRecord()
{
  return ?Mark_SpawnPointEntityRecord@@YAHXZ();
}

/*
==============
Preload_SplinePointEntityRecordStream
==============
*/

void __fastcall Preload_SplinePointEntityRecordStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_SplinePointEntityRecordStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_MapTriggersArray
==============
*/

void __fastcall Preload_MapTriggersArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_MapTriggersArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_DynEntityListPtr
==============
*/

void __fastcall Preload_DynEntityListPtr(const DBStreamStart streamStart)
{
  ?Preload_DynEntityListPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_alignHavokShapeData_t
==============
*/

char *__fastcall AllocLoad_alignHavokShapeData_t()
{
  return ?AllocLoad_alignHavokShapeData_t@@YAPEADXZ();
}

/*
==============
Preload_MapEntsStream
==============
*/

void __fastcall Preload_MapEntsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_MapEntsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_SplinePointRecordList
==============
*/

void __fastcall Load_SplinePointRecordList(const DBStreamStart streamStart)
{
  ?Load_SplinePointRecordList@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_AudioPASpeaker
==============
*/

void __fastcall Load_AudioPASpeaker(const DBStreamStart streamStart)
{
  ?Load_AudioPASpeaker@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_MapEdgeListPtr
==============
*/

void __fastcall Postload_MapEdgeListPtr(const DBStreamStart streamStart)
{
  ?Postload_MapEdgeListPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ClientSideEffectsArray
==============
*/

void __fastcall Preload_ClientSideEffectsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientSideEffectsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_SplineRecordList
==============
*/

SplineRecordList *__fastcall AllocPreload_SplineRecordList()
{
  return ?AllocPreload_SplineRecordList@@YAPEAUSplineRecordList@@XZ();
}

/*
==============
Mark_SpawnGroupZoneArray
==============
*/

int __fastcall Mark_SpawnGroupZoneArray(const unsigned __int64 count)
{
  return ?Mark_SpawnGroupZoneArray@@YAH_K@Z(count);
}

/*
==============
AllocPreload_MapEntsPtr
==============
*/

MapEnts **__fastcall AllocPreload_MapEntsPtr()
{
  return ?AllocPreload_MapEntsPtr@@YAPEAPEAUMapEnts@@XZ();
}

/*
==============
AllocPostload_ClientTriggers
==============
*/

ClientTriggers *__fastcall AllocPostload_ClientTriggers()
{
  return ?AllocPostload_ClientTriggers@@YAPEAUClientTriggers@@XZ();
}

/*
==============
Load_ProcessStructLayout_clipMap_t
==============
*/

void Load_ProcessStructLayout_clipMap_t(void)
{
  ?Load_ProcessStructLayout_clipMap_t@@YAXXZ();
}

/*
==============
Load_ClientTriggerBlendNodeStream
==============
*/

void __fastcall Load_ClientTriggerBlendNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientTriggerBlendNodeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_TriggerModelStream
==============
*/

void __fastcall Preload_TriggerModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_TriggerModelStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ClientTriggerBlendStream
==============
*/

void __fastcall Load_ClientTriggerBlendStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientTriggerBlendStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_SpawnerList
==============
*/

SpawnerList *__fastcall AllocPreload_SpawnerList()
{
  return ?AllocPreload_SpawnerList@@YAPEAUSpawnerList@@XZ();
}

/*
==============
Postload_StaticModelCollisionModelListArray
==============
*/

void __fastcall Postload_StaticModelCollisionModelListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_StaticModelCollisionModelListArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_VariableType
==============
*/

VariableType *__fastcall AllocPreload_VariableType()
{
  return ?AllocPreload_VariableType@@YAPEAW4VariableType@@XZ();
}

/*
==============
AllocLoad_ClientReactiveEntDef
==============
*/

ClientReactiveEntDef *__fastcall AllocLoad_ClientReactiveEntDef()
{
  return ?AllocLoad_ClientReactiveEntDef@@YAPEAUClientReactiveEntDef@@XZ();
}

/*
==============
Preload_AudioPropagationEdgeArray
==============
*/

void __fastcall Preload_AudioPropagationEdgeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_AudioPropagationEdgeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ServerExploderDef
==============
*/

ServerExploderDef *__fastcall AllocPreload_ServerExploderDef()
{
  return ?AllocPreload_ServerExploderDef@@YAPEAUServerExploderDef@@XZ();
}

/*
==============
AllocPostload_StaticModelCollisionInstance
==============
*/

StaticModelCollisionInstance *__fastcall AllocPostload_StaticModelCollisionInstance()
{
  return ?AllocPostload_StaticModelCollisionInstance@@YAPEAUStaticModelCollisionInstance@@XZ();
}

/*
==============
Load_PhysicsCapacities
==============
*/

void __fastcall Load_PhysicsCapacities(const DBStreamStart streamStart)
{
  ?Load_PhysicsCapacities@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_SpawnerField
==============
*/

int __fastcall Mark_SpawnerField()
{
  return ?Mark_SpawnerField@@YAHXZ();
}

/*
==============
Load_ProcessStructLayout_alignHavokShapeData_t
==============
*/

void Load_ProcessStructLayout_alignHavokShapeData_t(void)
{
  ?Load_ProcessStructLayout_alignHavokShapeData_t@@YAXXZ();
}

/*
==============
Load_ClientIntervalSoundDefStream
==============
*/

void __fastcall Load_ClientIntervalSoundDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientIntervalSoundDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_clipMap_tStream
==============
*/

void __fastcall Load_clipMap_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_clipMap_tStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ClientRootDef
==============
*/

ClientRootDef *__fastcall AllocPostload_ClientRootDef()
{
  return ?AllocPostload_ClientRootDef@@YAPEAUClientRootDef@@XZ();
}

/*
==============
AllocPreload_SpawnPointEntityRecord
==============
*/

SpawnPointEntityRecord *__fastcall AllocPreload_SpawnPointEntityRecord()
{
  return ?AllocPreload_SpawnPointEntityRecord@@YAPEAUSpawnPointEntityRecord@@XZ();
}

/*
==============
Preload_CreateFxAssetDataStream
==============
*/

void __fastcall Preload_CreateFxAssetDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_CreateFxAssetDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_SpawnPointRecordList
==============
*/

void __fastcall Preload_SpawnPointRecordList(const DBStreamStart streamStart)
{
  ?Preload_SpawnPointRecordList@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ClientEntAnchorStream
==============
*/

void __fastcall Load_ClientEntAnchorStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientEntAnchorStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ClientEntAnchorArray
==============
*/

int __fastcall Mark_ClientEntAnchorArray(const unsigned __int64 count)
{
  return ?Mark_ClientEntAnchorArray@@YAH_K@Z(count);
}

/*
==============
Load_ProcessStructLayout_SpawnerField
==============
*/

void Load_ProcessStructLayout_SpawnerField(void)
{
  ?Load_ProcessStructLayout_SpawnerField@@YAXXZ();
}

/*
==============
Preload_SpawnGroupCluster
==============
*/

void __fastcall Preload_SpawnGroupCluster(const DBStreamStart streamStart)
{
  ?Preload_SpawnGroupCluster@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_SpawnGroupPointArray
==============
*/

void __fastcall Preload_SpawnGroupPointArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_SpawnGroupPointArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_SpawnGroupPoint
==============
*/

int __fastcall Mark_SpawnGroupPoint()
{
  return ?Mark_SpawnGroupPoint@@YAHXZ();
}

/*
==============
Preload_alignHavokShapeData_t
==============
*/

void __fastcall Preload_alignHavokShapeData_t(const DBStreamStart streamStart)
{
  ?Preload_alignHavokShapeData_t@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_MapTriggersArray
==============
*/

int __fastcall Mark_MapTriggersArray(const unsigned __int64 count)
{
  return ?Mark_MapTriggersArray@@YAH_K@Z(count);
}

/*
==============
Postload_CreateFxAssetData
==============
*/

void __fastcall Postload_CreateFxAssetData(const DBStreamStart streamStart)
{
  ?Postload_CreateFxAssetData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_AudioPropagationNode
==============
*/

AudioPropagationNode *__fastcall AllocPreload_AudioPropagationNode()
{
  return ?AllocPreload_AudioPropagationNode@@YAPEAUAudioPropagationNode@@XZ();
}

/*
==============
Postload_ClientEntAnchor
==============
*/

void __fastcall Postload_ClientEntAnchor(const DBStreamStart streamStart)
{
  ?Postload_ClientEntAnchor@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_alignHavokShapeData_tArray
==============
*/

void __fastcall Preload_alignHavokShapeData_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_alignHavokShapeData_tArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ClientTriggerBlendNodeArray
==============
*/

void __fastcall Postload_ClientTriggerBlendNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientTriggerBlendNodeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_AddonMapEntsArray
==============
*/

void __fastcall Load_AddonMapEntsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_AddonMapEntsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_VariableType
==============
*/

void __fastcall Preload_VariableType(const DBStreamStart streamStart)
{
  ?Preload_VariableType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ClientTriggerBlendArray
==============
*/

void __fastcall Preload_ClientTriggerBlendArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientTriggerBlendArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_AudioPropagationNode
==============
*/

void __fastcall Load_AudioPropagationNode(const DBStreamStart streamStart)
{
  ?Load_AudioPropagationNode@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ClientTriggers
==============
*/

ClientTriggers *__fastcall AllocPreload_ClientTriggers()
{
  return ?AllocPreload_ClientTriggers@@YAPEAUClientTriggers@@XZ();
}

/*
==============
AllocLoad_Spawner
==============
*/

Spawner *__fastcall AllocLoad_Spawner()
{
  return ?AllocLoad_Spawner@@YAPEAUSpawner@@XZ();
}

/*
==============
Preload_SpawnerStream
==============
*/

void __fastcall Preload_SpawnerStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_SpawnerStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_TriggerWindingPointArray
==============
*/

void __fastcall Load_TriggerWindingPointArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_TriggerWindingPointArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_StaticModelCollisionModelList
==============
*/

void Load_ProcessStructLayout_StaticModelCollisionModelList(void)
{
  ?Load_ProcessStructLayout_StaticModelCollisionModelList@@YAXXZ();
}

/*
==============
Load_ClientMapTriggersStream
==============
*/

void __fastcall Load_ClientMapTriggersStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientMapTriggersStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_DynEntityListStream
==============
*/

void __fastcall Preload_DynEntityListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_DynEntityListStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ClientEntityLinkToDefPtr
==============
*/

void __fastcall Load_ClientEntityLinkToDefPtr(const DBStreamStart streamStart)
{
  ?Load_ClientEntityLinkToDefPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_CreateFxPaletteDef
==============
*/

CreateFxPaletteDef *__fastcall AllocPreload_CreateFxPaletteDef()
{
  return ?AllocPreload_CreateFxPaletteDef@@YAPEAUCreateFxPaletteDef@@XZ();
}

/*
==============
AllocPreload_ClientMapTriggers
==============
*/

ClientMapTriggers *__fastcall AllocPreload_ClientMapTriggers()
{
  return ?AllocPreload_ClientMapTriggers@@YAPEAUClientMapTriggers@@XZ();
}

/*
==============
Mark_ClientTriggerBlendNodeArray
==============
*/

int __fastcall Mark_ClientTriggerBlendNodeArray(const unsigned __int64 count)
{
  return ?Mark_ClientTriggerBlendNodeArray@@YAH_K@Z(count);
}

/*
==============
Load_ProcessStructLayout_ServerSideEffects
==============
*/

void Load_ProcessStructLayout_ServerSideEffects(void)
{
  ?Load_ProcessStructLayout_ServerSideEffects@@YAXXZ();
}

/*
==============
Postload_ClientSideEffects
==============
*/

void __fastcall Postload_ClientSideEffects(const DBStreamStart streamStart)
{
  ?Postload_ClientSideEffects@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ClientTriggerBlendNode
==============
*/

int __fastcall Mark_ClientTriggerBlendNode()
{
  return ?Mark_ClientTriggerBlendNode@@YAHXZ();
}

/*
==============
Mark_CreateFxAssetDataArray
==============
*/

int __fastcall Mark_CreateFxAssetDataArray(const unsigned __int64 count)
{
  return ?Mark_CreateFxAssetDataArray@@YAH_K@Z(count);
}

/*
==============
Load_PhysicsCapacitiesArray
==============
*/

void __fastcall Load_PhysicsCapacitiesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_PhysicsCapacitiesArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_clipMap_ptr
==============
*/

void __fastcall Preload_clipMap_ptr(const DBStreamStart streamStart)
{
  ?Preload_clipMap_ptr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_StaticModelCollisionModel
==============
*/

StaticModelCollisionModel *__fastcall AllocPostload_StaticModelCollisionModel()
{
  return ?AllocPostload_StaticModelCollisionModel@@YAPEAUStaticModelCollisionModel@@XZ();
}

/*
==============
AllocPostload_SplinePointRecordList
==============
*/

SplinePointRecordList *__fastcall AllocPostload_SplinePointRecordList()
{
  return ?AllocPostload_SplinePointRecordList@@YAPEAUSplinePointRecordList@@XZ();
}

/*
==============
AllocPreload_ClientReactiveEntDef
==============
*/

ClientReactiveEntDef *__fastcall AllocPreload_ClientReactiveEntDef()
{
  return ?AllocPreload_ClientReactiveEntDef@@YAPEAUClientReactiveEntDef@@XZ();
}

/*
==============
AllocLoad_SpawnGroupCluster
==============
*/

SpawnGroupCluster *__fastcall AllocLoad_SpawnGroupCluster()
{
  return ?AllocLoad_SpawnGroupCluster@@YAPEAUSpawnGroupCluster@@XZ();
}

/*
==============
Preload_ClientEntAnchor
==============
*/

void __fastcall Preload_ClientEntAnchor(const DBStreamStart streamStart)
{
  ?Preload_ClientEntAnchor@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_StaticModelCollisionModel
==============
*/

void Load_ProcessStructLayout_StaticModelCollisionModel(void)
{
  ?Load_ProcessStructLayout_StaticModelCollisionModel@@YAXXZ();
}

/*
==============
Load_MapEdgeListArray
==============
*/

void __fastcall Load_MapEdgeListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_MapEdgeListArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_TriggerModel
==============
*/

void Load_ProcessStructLayout_TriggerModel(void)
{
  ?Load_ProcessStructLayout_TriggerModel@@YAXXZ();
}

/*
==============
AllocPostload_SpawnerField
==============
*/

SpawnerField *__fastcall AllocPostload_SpawnerField()
{
  return ?AllocPostload_SpawnerField@@YAPEAUSpawnerField@@XZ();
}

/*
==============
Load_MapEdgeListPtrArray
==============
*/

void __fastcall Load_MapEdgeListPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_MapEdgeListPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_AddonMapEntsPtrArray
==============
*/

void __fastcall Preload_AddonMapEntsPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_AddonMapEntsPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_SpawnerField
==============
*/

void __fastcall Load_SpawnerField(const DBStreamStart streamStart)
{
  ?Load_SpawnerField@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_CollMapLookupEntry
==============
*/

void __fastcall Preload_CollMapLookupEntry(const DBStreamStart streamStart)
{
  ?Preload_CollMapLookupEntry@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ClientReactiveEntDef
==============
*/

void __fastcall Postload_ClientReactiveEntDef(const DBStreamStart streamStart)
{
  ?Postload_ClientReactiveEntDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_AudioPASpeaker
==============
*/

void __fastcall Postload_AudioPASpeaker(const DBStreamStart streamStart)
{
  ?Postload_AudioPASpeaker@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ClientIntervalSoundDef
==============
*/

void Load_ProcessStructLayout_ClientIntervalSoundDef(void)
{
  ?Load_ProcessStructLayout_ClientIntervalSoundDef@@YAXXZ();
}

/*
==============
Preload_TriggerWindingPoint
==============
*/

void __fastcall Preload_TriggerWindingPoint(const DBStreamStart streamStart)
{
  ?Preload_TriggerWindingPoint@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ClientMapTriggers
==============
*/

void __fastcall Postload_ClientMapTriggers(const DBStreamStart streamStart)
{
  ?Postload_ClientMapTriggers@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_MapEdgeList
==============
*/

void __fastcall Preload_MapEdgeList(const DBStreamStart streamStart)
{
  ?Preload_MapEdgeList@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_AudioPropagationNodeArray
==============
*/

void __fastcall Load_AudioPropagationNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_AudioPropagationNodeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_CollMapLookupEntry
==============
*/

void __fastcall Postload_CollMapLookupEntry(const DBStreamStart streamStart)
{
  ?Postload_CollMapLookupEntry@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ClientTriggerBlendArray
==============
*/

int __fastcall Mark_ClientTriggerBlendArray(const unsigned __int64 count)
{
  return ?Mark_ClientTriggerBlendArray@@YAH_K@Z(count);
}

/*
==============
Mark_ClientEntityLinkToDefPtrArray
==============
*/

int __fastcall Mark_ClientEntityLinkToDefPtrArray(const unsigned __int64 count)
{
  return ?Mark_ClientEntityLinkToDefPtrArray@@YAH_K@Z(count);
}

/*
==============
AllocPreload_StaticModelCollisionCompressedModelList
==============
*/

StaticModelCollisionCompressedModelList *__fastcall AllocPreload_StaticModelCollisionCompressedModelList()
{
  return ?AllocPreload_StaticModelCollisionCompressedModelList@@YAPEAUStaticModelCollisionCompressedModelList@@XZ();
}

/*
==============
AllocPreload_TriggerSlab
==============
*/

TriggerSlab *__fastcall AllocPreload_TriggerSlab()
{
  return ?AllocPreload_TriggerSlab@@YAPEAUTriggerSlab@@XZ();
}

/*
==============
Load_AddonMapEntsPtr
==============
*/

void __fastcall Load_AddonMapEntsPtr(const DBStreamStart streamStart)
{
  ?Load_AddonMapEntsPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_CollMapLookupEntryArray
==============
*/

void __fastcall Preload_CollMapLookupEntryArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_CollMapLookupEntryArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_StaticModelCollisionCompressedModelArray
==============
*/

void __fastcall Load_StaticModelCollisionCompressedModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_StaticModelCollisionCompressedModelArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ClientRootDef
==============
*/

void __fastcall Postload_ClientRootDef(const DBStreamStart streamStart)
{
  ?Postload_ClientRootDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_SplinePointEntityRecordArray
==============
*/

void __fastcall Preload_SplinePointEntityRecordArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_SplinePointEntityRecordArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ClientTriggerBlendNodeArray
==============
*/

void __fastcall Load_ClientTriggerBlendNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientTriggerBlendNodeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ClientTriggersArray
==============
*/

void __fastcall Postload_ClientTriggersArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientTriggersArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_SpawnerListArray
==============
*/

int __fastcall Mark_SpawnerListArray(const unsigned __int64 count)
{
  return ?Mark_SpawnerListArray@@YAH_K@Z(count);
}

/*
==============
Load_CheckArrayMemberDynEntityList395
==============
*/

void Load_CheckArrayMemberDynEntityList395(void)
{
  ?Load_CheckArrayMemberDynEntityList395@@YAXXZ();
}

/*
==============
Load_CreateFxAssetDataArray
==============
*/

void __fastcall Load_CreateFxAssetDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_CreateFxAssetDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_SpawnPointEntityRecordArray
==============
*/

int __fastcall Mark_SpawnPointEntityRecordArray(const unsigned __int64 count)
{
  return ?Mark_SpawnPointEntityRecordArray@@YAH_K@Z(count);
}

/*
==============
AllocPostload_ClientOneshotEffectDef
==============
*/

ClientOneshotEffectDef *__fastcall AllocPostload_ClientOneshotEffectDef()
{
  return ?AllocPostload_ClientOneshotEffectDef@@YAPEAUClientOneshotEffectDef@@XZ();
}

/*
==============
Load_ProcessStructLayout_ClientTriggers
==============
*/

void Load_ProcessStructLayout_ClientTriggers(void)
{
  ?Load_ProcessStructLayout_ClientTriggers@@YAXXZ();
}

/*
==============
Load_TriggerModelArray
==============
*/

void __fastcall Load_TriggerModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_TriggerModelArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_StaticModelCollisionCompressedModel
==============
*/

void __fastcall Load_StaticModelCollisionCompressedModel(const DBStreamStart streamStart)
{
  ?Load_StaticModelCollisionCompressedModel@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_MapEdgeListPtrArray
==============
*/

void __fastcall Preload_MapEdgeListPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_MapEdgeListPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_SpawnGroupZoneStream
==============
*/

void __fastcall Preload_SpawnGroupZoneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_SpawnGroupZoneStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_AddonMapEntsStream
==============
*/

void __fastcall Preload_AddonMapEntsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_AddonMapEntsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ServerExploderDefArray
==============
*/

int __fastcall Mark_ServerExploderDefArray(const unsigned __int64 count)
{
  return ?Mark_ServerExploderDefArray@@YAH_K@Z(count);
}

/*
==============
Preload_StaticModelCollisionModelArray
==============
*/

void __fastcall Preload_StaticModelCollisionModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_StaticModelCollisionModelArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_CreateFxAssetDataArray
==============
*/

void __fastcall Postload_CreateFxAssetDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_CreateFxAssetDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_SpawnGroupZone
==============
*/

SpawnGroupZone *__fastcall AllocPreload_SpawnGroupZone()
{
  return ?AllocPreload_SpawnGroupZone@@YAPEAUSpawnGroupZone@@XZ();
}

/*
==============
Preload_MapTriggers
==============
*/

void __fastcall Preload_MapTriggers(const DBStreamStart streamStart)
{
  ?Preload_MapTriggers@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ClientReactiveEntDef
==============
*/

ClientReactiveEntDef *__fastcall AllocPostload_ClientReactiveEntDef()
{
  return ?AllocPostload_ClientReactiveEntDef@@YAPEAUClientReactiveEntDef@@XZ();
}

/*
==============
Postload_SpawnGroupClusterStream
==============
*/

void __fastcall Postload_SpawnGroupClusterStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_SpawnGroupClusterStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_TriggerHull
==============
*/

void __fastcall Preload_TriggerHull(const DBStreamStart streamStart)
{
  ?Preload_TriggerHull@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_AudioPASpeakerArray
==============
*/

void __fastcall Load_AudioPASpeakerArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_AudioPASpeakerArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_SpawnPointEntityRecordStream
==============
*/

void __fastcall Postload_SpawnPointEntityRecordStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_SpawnPointEntityRecordStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_SplinePointRecordListStream
==============
*/

void __fastcall Load_SplinePointRecordListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_SplinePointRecordListStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ClientOneshotEffectDef
==============
*/

void __fastcall Postload_ClientOneshotEffectDef(const DBStreamStart streamStart)
{
  ?Postload_ClientOneshotEffectDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ClientTriggerBlendNode
==============
*/

ClientTriggerBlendNode *__fastcall AllocPostload_ClientTriggerBlendNode()
{
  return ?AllocPostload_ClientTriggerBlendNode@@YAPEAUClientTriggerBlendNode@@XZ();
}

/*
==============
Load_CheckArrayMemberMapEnts478
==============
*/

void Load_CheckArrayMemberMapEnts478(void)
{
  ?Load_CheckArrayMemberMapEnts478@@YAXXZ();
}

/*
==============
AllocPreload_TriggerWindingPoint
==============
*/

TriggerWindingPoint *__fastcall AllocPreload_TriggerWindingPoint()
{
  return ?AllocPreload_TriggerWindingPoint@@YAPEAUTriggerWindingPoint@@XZ();
}

/*
==============
Mark_alignHavokShapeData_tArray
==============
*/

int __fastcall Mark_alignHavokShapeData_tArray(const unsigned __int64 count)
{
  return ?Mark_alignHavokShapeData_tArray@@YAH_K@Z(count);
}

/*
==============
Postload_AddonMapEntsArray
==============
*/

void __fastcall Postload_AddonMapEntsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_AddonMapEntsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_StaticModelCollisionInstanceArray
==============
*/

void __fastcall Load_StaticModelCollisionInstanceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_StaticModelCollisionInstanceArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_SpawnPointEntityRecord
==============
*/

void __fastcall Load_SpawnPointEntityRecord(const DBStreamStart streamStart)
{
  ?Load_SpawnPointEntityRecord@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_StaticModelCollisionCompressedModelArray
==============
*/

void __fastcall Preload_StaticModelCollisionCompressedModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_StaticModelCollisionCompressedModelArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_clipMap_ptrStream
==============
*/

void __fastcall Postload_clipMap_ptrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_clipMap_ptrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_AddonMapEntsPtrStream
==============
*/

void __fastcall Load_AddonMapEntsPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_AddonMapEntsPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_SpawnGroupClusterStream
==============
*/

void __fastcall Preload_SpawnGroupClusterStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_SpawnGroupClusterStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_TriggerWindingStream
==============
*/

void __fastcall Postload_TriggerWindingStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_TriggerWindingStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_SpawnerListArray
==============
*/

void __fastcall Load_SpawnerListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_SpawnerListArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_AddonMapEntsPtrArray
==============
*/

void __fastcall Postload_AddonMapEntsPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_AddonMapEntsPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_MapEntsPtr
==============
*/

void Load_ProcessStructLayout_MapEntsPtr(void)
{
  ?Load_ProcessStructLayout_MapEntsPtr@@YAXXZ();
}

/*
==============
Postload_ClientTriggerModelArray
==============
*/

void __fastcall Postload_ClientTriggerModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ClientTriggerModelArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_SplinePointRecordListArray
==============
*/

void __fastcall Postload_SplinePointRecordListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_SplinePointRecordListArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ServerSideEffectsArray
==============
*/

void __fastcall Postload_ServerSideEffectsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ServerSideEffectsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_StaticModelCollisionCompressedInstanceArray
==============
*/

void __fastcall Preload_StaticModelCollisionCompressedInstanceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_StaticModelCollisionCompressedInstanceArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_CollisionTile
==============
*/

void Load_ProcessStructLayout_CollisionTile(void)
{
  ?Load_ProcessStructLayout_CollisionTile@@YAXXZ();
}

/*
==============
Load_ClientEntityLinkToDefPtrArray
==============
*/

void __fastcall Load_ClientEntityLinkToDefPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientEntityLinkToDefPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_TriggerWindingPoint
==============
*/

TriggerWindingPoint *__fastcall AllocLoad_TriggerWindingPoint()
{
  return ?AllocLoad_TriggerWindingPoint@@YAPEAUTriggerWindingPoint@@XZ();
}

/*
==============
AllocPreload_SplinePointEntityRecord
==============
*/

SplinePointEntityRecord *__fastcall AllocPreload_SplinePointEntityRecord()
{
  return ?AllocPreload_SplinePointEntityRecord@@YAPEAUSplinePointEntityRecord@@XZ();
}

/*
==============
AllocPreload_clipMap_t
==============
*/

clipMap_t *__fastcall AllocPreload_clipMap_t()
{
  return ?AllocPreload_clipMap_t@@YAPEAUclipMap_t@@XZ();
}

/*
==============
Mark_CollisionTile
==============
*/

int __fastcall Mark_CollisionTile()
{
  return ?Mark_CollisionTile@@YAHXZ();
}

/*
==============
Postload_DynEntityListStream
==============
*/

void __fastcall Postload_DynEntityListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_DynEntityListStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_CTAudRvbPanInfoStream
==============
*/

void __fastcall Postload_CTAudRvbPanInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_CTAudRvbPanInfoStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_DynEntityList
==============
*/

DynEntityList *__fastcall AllocPreload_DynEntityList()
{
  return ?AllocPreload_DynEntityList@@YAPEAUDynEntityList@@XZ();
}

/*
==============
AllocPreload_TriggerHull
==============
*/

TriggerHull *__fastcall AllocPreload_TriggerHull()
{
  return ?AllocPreload_TriggerHull@@YAPEAUTriggerHull@@XZ();
}

/*
==============
Load_ClientOneshotEffectDefStream
==============
*/

void __fastcall Load_ClientOneshotEffectDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientOneshotEffectDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_StaticModelCollisionCompressedInstanceArray
==============
*/

int __fastcall Mark_StaticModelCollisionCompressedInstanceArray(const unsigned __int64 count)
{
  return ?Mark_StaticModelCollisionCompressedInstanceArray@@YAH_K@Z(count);
}

/*
==============
Mark_ClientSideEffects
==============
*/

int __fastcall Mark_ClientSideEffects()
{
  return ?Mark_ClientSideEffects@@YAHXZ();
}

/*
==============
Load_ServerSideEffectsStream
==============
*/

void __fastcall Load_ServerSideEffectsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ServerSideEffectsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_DynEntityListPtr
==============
*/

DynEntityList **__fastcall AllocPostload_DynEntityListPtr()
{
  return ?AllocPostload_DynEntityListPtr@@YAPEAPEAUDynEntityList@@XZ();
}

/*
==============
AllocLoad_SplinePointEntityRecord
==============
*/

SplinePointEntityRecord *__fastcall AllocLoad_SplinePointEntityRecord()
{
  return ?AllocLoad_SplinePointEntityRecord@@YAPEAUSplinePointEntityRecord@@XZ();
}

/*
==============
AllocLoad_TriggerSlab
==============
*/

TriggerSlab *__fastcall AllocLoad_TriggerSlab()
{
  return ?AllocLoad_TriggerSlab@@YAPEAUTriggerSlab@@XZ();
}

/*
==============
Load_ProcessStructLayout_TriggerWindingPoint
==============
*/

void Load_ProcessStructLayout_TriggerWindingPoint(void)
{
  ?Load_ProcessStructLayout_TriggerWindingPoint@@YAXXZ();
}

/*
==============
Load_StaticModelCollisionModelListStream
==============
*/

void __fastcall Load_StaticModelCollisionModelListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_StaticModelCollisionModelListStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_AudioPropagationNode
==============
*/

AudioPropagationNode *__fastcall AllocPostload_AudioPropagationNode()
{
  return ?AllocPostload_AudioPropagationNode@@YAPEAUAudioPropagationNode@@XZ();
}

/*
==============
Load_TriggerWinding
==============
*/

void __fastcall Load_TriggerWinding(const DBStreamStart streamStart)
{
  ?Load_TriggerWinding@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_SpawnerList
==============
*/

int __fastcall Mark_SpawnerList()
{
  return ?Mark_SpawnerList@@YAHXZ();
}

/*
==============
Preload_SpawnGroupZoneArray
==============
*/

void __fastcall Preload_SpawnGroupZoneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_SpawnGroupZoneArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_SpawnGroupPoint
==============
*/

void __fastcall Postload_SpawnGroupPoint(const DBStreamStart streamStart)
{
  ?Postload_SpawnGroupPoint@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_CreateFxAssetData
==============
*/

int __fastcall Mark_CreateFxAssetData()
{
  return ?Mark_CreateFxAssetData@@YAHXZ();
}

/*
==============
AllocLoad_SpawnPointRecordList
==============
*/

SpawnPointRecordList *__fastcall AllocLoad_SpawnPointRecordList()
{
  return ?AllocLoad_SpawnPointRecordList@@YAPEAUSpawnPointRecordList@@XZ();
}

/*
==============
Postload_DynEntityListArray
==============
*/

void __fastcall Postload_DynEntityListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_DynEntityListArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ClientTriggerHull
==============
*/

int __fastcall Mark_ClientTriggerHull()
{
  return ?Mark_ClientTriggerHull@@YAHXZ();
}

/*
==============
AllocPreload_TriggerWinding
==============
*/

TriggerWinding *__fastcall AllocPreload_TriggerWinding()
{
  return ?AllocPreload_TriggerWinding@@YAPEAUTriggerWinding@@XZ();
}

/*
==============
Postload_TriggerWindingPointStream
==============
*/

void __fastcall Postload_TriggerWindingPointStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_TriggerWindingPointStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_CTAudRvbPanInfo
==============
*/

int __fastcall Mark_CTAudRvbPanInfo()
{
  return ?Mark_CTAudRvbPanInfo@@YAHXZ();
}

/*
==============
Load_ProcessStructLayout_ClientRootDef
==============
*/

void Load_ProcessStructLayout_ClientRootDef(void)
{
  ?Load_ProcessStructLayout_ClientRootDef@@YAXXZ();
}

/*
==============
AllocPreload_CreateFxAssetData
==============
*/

CreateFxAssetData *__fastcall AllocPreload_CreateFxAssetData()
{
  return ?AllocPreload_CreateFxAssetData@@YAPEAUCreateFxAssetData@@XZ();
}

/*
==============
AllocPreload_SpawnGroupCluster
==============
*/

SpawnGroupCluster *__fastcall AllocPreload_SpawnGroupCluster()
{
  return ?AllocPreload_SpawnGroupCluster@@YAPEAUSpawnGroupCluster@@XZ();
}

/*
==============
AllocLoad_TriggerWinding
==============
*/

TriggerWinding *__fastcall AllocLoad_TriggerWinding()
{
  return ?AllocLoad_TriggerWinding@@YAPEAUTriggerWinding@@XZ();
}

/*
==============
Postload_SpawnGroupStream
==============
*/

void __fastcall Postload_SpawnGroupStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_SpawnGroupStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_StaticModelCollisionModelList
==============
*/

int __fastcall Mark_StaticModelCollisionModelList()
{
  return ?Mark_StaticModelCollisionModelList@@YAHXZ();
}

/*
==============
AllocPreload_ServerSideEffects
==============
*/

ServerSideEffects *__fastcall AllocPreload_ServerSideEffects()
{
  return ?AllocPreload_ServerSideEffects@@YAPEAUServerSideEffects@@XZ();
}

/*
==============
Load_DynEntityListStream
==============
*/

void __fastcall Load_DynEntityListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_DynEntityListStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_MapEntsPtr
==============
*/

MapEnts **__fastcall AllocLoad_MapEntsPtr()
{
  return ?AllocLoad_MapEntsPtr@@YAPEAPEAUMapEnts@@XZ();
}

/*
==============
Preload_ClientTriggerBlendNodeStream
==============
*/

void __fastcall Preload_ClientTriggerBlendNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientTriggerBlendNodeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_CollisionTileArray
==============
*/

void __fastcall Preload_CollisionTileArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_CollisionTileArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_MapEdgeListPtr
==============
*/

MapEdgeList **__fastcall AllocPostload_MapEdgeListPtr()
{
  return ?AllocPostload_MapEdgeListPtr@@YAPEAPEAUMapEdgeList@@XZ();
}

/*
==============
Load_ProcessStructLayout_StaticModelCollisionCompressedInstance
==============
*/

void Load_ProcessStructLayout_StaticModelCollisionCompressedInstance(void)
{
  ?Load_ProcessStructLayout_StaticModelCollisionCompressedInstance@@YAXXZ();
}

/*
==============
AllocPostload_PhysicsCapacities
==============
*/

PhysicsCapacities *__fastcall AllocPostload_PhysicsCapacities()
{
  return ?AllocPostload_PhysicsCapacities@@YAPEAUPhysicsCapacities@@XZ();
}

/*
==============
AllocPostload_SplinePointEntityRecord
==============
*/

SplinePointEntityRecord *__fastcall AllocPostload_SplinePointEntityRecord()
{
  return ?AllocPostload_SplinePointEntityRecord@@YAPEAUSplinePointEntityRecord@@XZ();
}

/*
==============
Mark_SplinePointEntityRecord
==============
*/

int __fastcall Mark_SplinePointEntityRecord()
{
  return ?Mark_SplinePointEntityRecord@@YAHXZ();
}

/*
==============
AllocLoad_SpawnGroupZone
==============
*/

SpawnGroupZone *__fastcall AllocLoad_SpawnGroupZone()
{
  return ?AllocLoad_SpawnGroupZone@@YAPEAUSpawnGroupZone@@XZ();
}

/*
==============
Mark_DynEntityListArray
==============
*/

int __fastcall Mark_DynEntityListArray(const unsigned __int64 count)
{
  return ?Mark_DynEntityListArray@@YAH_K@Z(count);
}

/*
==============
Mark_ClientLoopSoundDef
==============
*/

int __fastcall Mark_ClientLoopSoundDef()
{
  return ?Mark_ClientLoopSoundDef@@YAHXZ();
}

/*
==============
Load_ClientIntervalSoundDefArray
==============
*/

void __fastcall Load_ClientIntervalSoundDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientIntervalSoundDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ClientTriggerBlend
==============
*/

void __fastcall Load_ClientTriggerBlend(const DBStreamStart streamStart)
{
  ?Load_ClientTriggerBlend@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_DynEntityListPtr
==============
*/

void __fastcall Postload_DynEntityListPtr(const DBStreamStart streamStart)
{
  ?Postload_DynEntityListPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_AudioPropagationEdge
==============
*/

AudioPropagationEdge *__fastcall AllocLoad_AudioPropagationEdge()
{
  return ?AllocLoad_AudioPropagationEdge@@YAPEAUAudioPropagationEdge@@XZ();
}

/*
==============
Mark_ClientReactiveEntDef
==============
*/

int __fastcall Mark_ClientReactiveEntDef()
{
  return ?Mark_ClientReactiveEntDef@@YAHXZ();
}

/*
==============
Load_cmodel_t
==============
*/

void __fastcall Load_cmodel_t(const DBStreamStart streamStart)
{
  ?Load_cmodel_t@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_CollisionTileStream
==============
*/

void __fastcall Postload_CollisionTileStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_CollisionTileStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_StaticModelCollisionCompressedInstance
==============
*/

void __fastcall Postload_StaticModelCollisionCompressedInstance(const DBStreamStart streamStart)
{
  ?Postload_StaticModelCollisionCompressedInstance@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_AudioPropagationEdge
==============
*/

AudioPropagationEdge *__fastcall AllocPostload_AudioPropagationEdge()
{
  return ?AllocPostload_AudioPropagationEdge@@YAPEAUAudioPropagationEdge@@XZ();
}

/*
==============
Postload_clipMap_tArray
==============
*/

void __fastcall Postload_clipMap_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_clipMap_tArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ClientReactiveEntDefStream
==============
*/

void __fastcall Load_ClientReactiveEntDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientReactiveEntDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ClientTriggersStream
==============
*/

void __fastcall Load_ClientTriggersStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientTriggersStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_CollisionHeatmapEntryArray
==============
*/

void __fastcall Postload_CollisionHeatmapEntryArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_CollisionHeatmapEntryArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_AudioPropagationNodeStream
==============
*/

void __fastcall Postload_AudioPropagationNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_AudioPropagationNodeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ClientTriggerBlend
==============
*/

ClientTriggerBlend *__fastcall AllocPostload_ClientTriggerBlend()
{
  return ?AllocPostload_ClientTriggerBlend@@YAPEAUClientTriggerBlend@@XZ();
}

/*
==============
AllocLoad_StaticModelCollisionInstance
==============
*/

StaticModelCollisionInstance *__fastcall AllocLoad_StaticModelCollisionInstance()
{
  return ?AllocLoad_StaticModelCollisionInstance@@YAPEAUStaticModelCollisionInstance@@XZ();
}

/*
==============
Postload_cmodel_t
==============
*/

void __fastcall Postload_cmodel_t(const DBStreamStart streamStart)
{
  ?Postload_cmodel_t@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_SpawnGroupPoint
==============
*/

void Load_ProcessStructLayout_SpawnGroupPoint(void)
{
  ?Load_ProcessStructLayout_SpawnGroupPoint@@YAXXZ();
}

/*
==============
Preload_ClientRootDef
==============
*/

void __fastcall Preload_ClientRootDef(const DBStreamStart streamStart)
{
  ?Preload_ClientRootDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_StaticModelCollisionInstanceStream
==============
*/

void __fastcall Load_StaticModelCollisionInstanceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_StaticModelCollisionInstanceStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_StaticModelCollisionModelStream
==============
*/

void __fastcall Load_StaticModelCollisionModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_StaticModelCollisionModelStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ClientTriggers
==============
*/

ClientTriggers *__fastcall AllocLoad_ClientTriggers()
{
  return ?AllocLoad_ClientTriggers@@YAPEAUClientTriggers@@XZ();
}

/*
==============
Mark_AddonMapEntsPtrArray
==============
*/

int __fastcall Mark_AddonMapEntsPtrArray(const unsigned __int64 count)
{
  return ?Mark_AddonMapEntsPtrArray@@YAH_K@Z(count);
}

/*
==============
AllocLoad_StaticModelCollisionModel
==============
*/

StaticModelCollisionModel *__fastcall AllocLoad_StaticModelCollisionModel()
{
  return ?AllocLoad_StaticModelCollisionModel@@YAPEAUStaticModelCollisionModel@@XZ();
}

/*
==============
AllocLoad_StaticModelCollisionCompressedModel
==============
*/

StaticModelCollisionCompressedModel *__fastcall AllocLoad_StaticModelCollisionCompressedModel()
{
  return ?AllocLoad_StaticModelCollisionCompressedModel@@YAPEAUStaticModelCollisionCompressedModel@@XZ();
}

/*
==============
AllocPostload_ClientMapTriggers
==============
*/

ClientMapTriggers *__fastcall AllocPostload_ClientMapTriggers()
{
  return ?AllocPostload_ClientMapTriggers@@YAPEAUClientMapTriggers@@XZ();
}

/*
==============
Mark_MapEdgeList
==============
*/

int __fastcall Mark_MapEdgeList()
{
  return ?Mark_MapEdgeList@@YAHXZ();
}

/*
==============
Mark_ClientRootDefArray
==============
*/

int __fastcall Mark_ClientRootDefArray(const unsigned __int64 count)
{
  return ?Mark_ClientRootDefArray@@YAH_K@Z(count);
}

/*
==============
Load_StaticModelCollisionModel
==============
*/

void __fastcall Load_StaticModelCollisionModel(const DBStreamStart streamStart)
{
  ?Load_StaticModelCollisionModel@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_DynEntityList
==============
*/

void __fastcall Postload_DynEntityList(const DBStreamStart streamStart)
{
  ?Postload_DynEntityList@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ClientRootDef
==============
*/

ClientRootDef *__fastcall AllocPreload_ClientRootDef()
{
  return ?AllocPreload_ClientRootDef@@YAPEAUClientRootDef@@XZ();
}

/*
==============
Postload_PhysicsCapacities
==============
*/

void __fastcall Postload_PhysicsCapacities(const DBStreamStart streamStart)
{
  ?Postload_PhysicsCapacities@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_StaticModelCollisionCompressedModelList
==============
*/

void __fastcall Postload_StaticModelCollisionCompressedModelList(const DBStreamStart streamStart)
{
  ?Postload_StaticModelCollisionCompressedModelList@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_CollMapLookupEntryArray
==============
*/

int __fastcall Mark_CollMapLookupEntryArray(const unsigned __int64 count)
{
  return ?Mark_CollMapLookupEntryArray@@YAH_K@Z(count);
}

/*
==============
Preload_PhysicsCapacitiesStream
==============
*/

void __fastcall Preload_PhysicsCapacitiesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_PhysicsCapacitiesStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_StaticModelCollisionModelListArray
==============
*/

void __fastcall Preload_StaticModelCollisionModelListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_StaticModelCollisionModelListArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_CreateFxPaletteDef
==============
*/

void Load_ProcessStructLayout_CreateFxPaletteDef(void)
{
  ?Load_ProcessStructLayout_CreateFxPaletteDef@@YAXXZ();
}

/*
==============
Postload_CollMapLookupEntryArray
==============
*/

void __fastcall Postload_CollMapLookupEntryArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_CollMapLookupEntryArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_Spawner
==============
*/

int __fastcall Mark_Spawner()
{
  return ?Mark_Spawner@@YAHXZ();
}

/*
==============
Mark_TriggerSlab
==============
*/

int __fastcall Mark_TriggerSlab()
{
  return ?Mark_TriggerSlab@@YAHXZ();
}

/*
==============
AllocPostload_CreateFxPaletteDef
==============
*/

CreateFxPaletteDef *__fastcall AllocPostload_CreateFxPaletteDef()
{
  return ?AllocPostload_CreateFxPaletteDef@@YAPEAUCreateFxPaletteDef@@XZ();
}

/*
==============
Postload_VariableTypeArray
==============
*/

void __fastcall Postload_VariableTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_VariableTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ClientRootDefStream
==============
*/

void __fastcall Load_ClientRootDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ClientRootDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ClientOneshotEffectDef
==============
*/

ClientOneshotEffectDef *__fastcall AllocLoad_ClientOneshotEffectDef()
{
  return ?AllocLoad_ClientOneshotEffectDef@@YAPEAUClientOneshotEffectDef@@XZ();
}

/*
==============
Load_SpawnGroupClusterArray
==============
*/

void __fastcall Load_SpawnGroupClusterArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_SpawnGroupClusterArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CollisionHeatmapEntry
==============
*/

void __fastcall Load_CollisionHeatmapEntry(const DBStreamStart streamStart)
{
  ?Load_CollisionHeatmapEntry@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_MapEntsPtrArray
==============
*/

void __fastcall Preload_MapEntsPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_MapEntsPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_TriggerModelArray
==============
*/

int __fastcall Mark_TriggerModelArray(const unsigned __int64 count)
{
  return ?Mark_TriggerModelArray@@YAH_K@Z(count);
}

/*
==============
Load_StaticModelCollisionCompressedInstance
==============
*/

void __fastcall Load_StaticModelCollisionCompressedInstance(const DBStreamStart streamStart)
{
  ?Load_StaticModelCollisionCompressedInstance@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_SplineRecordList
==============
*/

SplineRecordList *__fastcall AllocLoad_SplineRecordList()
{
  return ?AllocLoad_SplineRecordList@@YAPEAUSplineRecordList@@XZ();
}

/*
==============
Postload_AudioPropagationEdgeStream
==============
*/

void __fastcall Postload_AudioPropagationEdgeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_AudioPropagationEdgeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_CollisionTilePtrArray
==============
*/

void __fastcall Preload_CollisionTilePtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_CollisionTilePtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_SpawnPointRecordList
==============
*/

void __fastcall Postload_SpawnPointRecordList(const DBStreamStart streamStart)
{
  ?Postload_SpawnPointRecordList@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_MapEntsPtr
==============
*/

void __fastcall Load_MapEntsPtr(const DBStreamStart streamStart)
{
  ?Load_MapEntsPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ClientTriggerModel
==============
*/

void Load_ProcessStructLayout_ClientTriggerModel(void)
{
  ?Load_ProcessStructLayout_ClientTriggerModel@@YAXXZ();
}

/*
==============
Mark_MapEdgeListPtrArray
==============
*/

int __fastcall Mark_MapEdgeListPtrArray(const unsigned __int64 count)
{
  return ?Mark_MapEdgeListPtrArray@@YAH_K@Z(count);
}

/*
==============
AllocLoad_MapEdgeList
==============
*/

MapEdgeList *__fastcall AllocLoad_MapEdgeList()
{
  return ?AllocLoad_MapEdgeList@@YAPEAUMapEdgeList@@XZ();
}

/*
==============
Mark_StaticModelCollisionInstanceArray
==============
*/

int __fastcall Mark_StaticModelCollisionInstanceArray(const unsigned __int64 count)
{
  return ?Mark_StaticModelCollisionInstanceArray@@YAH_K@Z(count);
}

/*
==============
AllocPreload_SpawnGroup
==============
*/

SpawnGroup *__fastcall AllocPreload_SpawnGroup()
{
  return ?AllocPreload_SpawnGroup@@YAPEAUSpawnGroup@@XZ();
}

/*
==============
Preload_ClientTriggerModelStream
==============
*/

void __fastcall Preload_ClientTriggerModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ClientTriggerModelStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_AddonMapEntsPtrArray
==============
*/

void __fastcall Load_AddonMapEntsPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_AddonMapEntsPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ClientSideEffectsArray
==============
*/

int __fastcall Mark_ClientSideEffectsArray(const unsigned __int64 count)
{
  return ?Mark_ClientSideEffectsArray@@YAH_K@Z(count);
}

/*
==============
Load_StaticModelCollisionModelList
==============
*/

void __fastcall Load_StaticModelCollisionModelList(const DBStreamStart streamStart)
{
  ?Load_StaticModelCollisionModelList@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_MapEnts
==============
*/

int __fastcall Mark_MapEnts()
{
  return ?Mark_MapEnts@@YAHXZ();
}

/*
==============
Preload_CollisionTileStream
==============
*/

void __fastcall Preload_CollisionTileStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_CollisionTileStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_TriggerWindingArray
==============
*/

void __fastcall Preload_TriggerWindingArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_TriggerWindingArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_SpawnGroupPointStream
==============
*/

void __fastcall Load_SpawnGroupPointStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_SpawnGroupPointStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ClientTriggerBlend
==============
*/

ClientTriggerBlend *__fastcall AllocPreload_ClientTriggerBlend()
{
  return ?AllocPreload_ClientTriggerBlend@@YAPEAUClientTriggerBlend@@XZ();
}

/*
==============
AllocLoad_AddonMapEnts
==============
*/
AddonMapEnts *AllocLoad_AddonMapEnts()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (AddonMapEnts *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_AddonMapEntsPtr
==============
*/
AddonMapEnts **AllocLoad_AddonMapEntsPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (AddonMapEnts **)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_AudioPASpeaker
==============
*/
AudioPASpeaker *AllocLoad_AudioPASpeaker()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (AudioPASpeaker *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_AudioPropagationEdge
==============
*/
AudioPropagationEdge *AllocLoad_AudioPropagationEdge()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (AudioPropagationEdge *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_AudioPropagationNode
==============
*/
AudioPropagationNode *AllocLoad_AudioPropagationNode()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (AudioPropagationNode *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_CTAudRvbPanInfo
==============
*/
CTAudRvbPanInfo *AllocLoad_CTAudRvbPanInfo()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (CTAudRvbPanInfo *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ClientEntAnchor
==============
*/
ClientEntAnchor *AllocLoad_ClientEntAnchor()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientEntAnchor *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ClientEntityLinkToDefPtr
==============
*/
ClientEntityLinkToDef **AllocLoad_ClientEntityLinkToDefPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientEntityLinkToDef **)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ClientExploderDef
==============
*/
ClientExploderDef *AllocLoad_ClientExploderDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientExploderDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ClientIntervalSoundDef
==============
*/
ClientIntervalSoundDef *AllocLoad_ClientIntervalSoundDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientIntervalSoundDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ClientLoopSoundDef
==============
*/
ClientLoopSoundDef *AllocLoad_ClientLoopSoundDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientLoopSoundDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ClientMapTriggers
==============
*/
ClientMapTriggers *AllocLoad_ClientMapTriggers()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientMapTriggers *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ClientOneshotEffectDef
==============
*/
ClientOneshotEffectDef *AllocLoad_ClientOneshotEffectDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientOneshotEffectDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ClientReactiveEntDef
==============
*/
ClientReactiveEntDef *AllocLoad_ClientReactiveEntDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientReactiveEntDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ClientRootDef
==============
*/
ClientRootDef *AllocLoad_ClientRootDef()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientRootDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ClientSideEffects
==============
*/
ClientSideEffects *AllocLoad_ClientSideEffects()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientSideEffects *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ClientTriggerBlend
==============
*/
ClientTriggerBlend *AllocLoad_ClientTriggerBlend()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientTriggerBlend *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ClientTriggerBlendNode
==============
*/
ClientTriggerBlendNode *AllocLoad_ClientTriggerBlendNode()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientTriggerBlendNode *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ClientTriggerHull
==============
*/
ClientTriggerHull *AllocLoad_ClientTriggerHull()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientTriggerHull *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ClientTriggerModel
==============
*/
ClientTriggerModel *AllocLoad_ClientTriggerModel()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientTriggerModel *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ClientTriggers
==============
*/
ClientTriggers *AllocLoad_ClientTriggers()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientTriggers *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_CollMapLookupEntry
==============
*/
CollMapLookupEntry *AllocLoad_CollMapLookupEntry()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (CollMapLookupEntry *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_CollisionHeatmapEntry
==============
*/
CollisionHeatmapEntry *AllocLoad_CollisionHeatmapEntry()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (CollisionHeatmapEntry *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_CollisionTile
==============
*/
CollisionTile *AllocLoad_CollisionTile()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (CollisionTile *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_CollisionTilePtr
==============
*/
CollisionTile **AllocLoad_CollisionTilePtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (CollisionTile **)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_CreateFxAssetData
==============
*/
CreateFxAssetData *AllocLoad_CreateFxAssetData()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (CreateFxAssetData *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_CreateFxPaletteDef
==============
*/
CreateFxPaletteDef *AllocLoad_CreateFxPaletteDef()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (CreateFxPaletteDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_DynEntityList
==============
*/
DynEntityList *AllocLoad_DynEntityList()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (DynEntityList *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_DynEntityListPtr
==============
*/
DynEntityList **AllocLoad_DynEntityListPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (DynEntityList **)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_MapEdgeList
==============
*/
MapEdgeList *AllocLoad_MapEdgeList()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (MapEdgeList *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_MapEdgeListPtr
==============
*/
MapEdgeList **AllocLoad_MapEdgeListPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (MapEdgeList **)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_MapEnts
==============
*/
MapEnts *AllocLoad_MapEnts()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (MapEnts *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_MapEntsPtr
==============
*/
MapEnts **AllocLoad_MapEntsPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (MapEnts **)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_MapTriggers
==============
*/
MapTriggers *AllocLoad_MapTriggers()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (MapTriggers *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_PhysicsCapacities
==============
*/
PhysicsCapacities *AllocLoad_PhysicsCapacities()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (PhysicsCapacities *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ServerExploderDef
==============
*/
ServerExploderDef *AllocLoad_ServerExploderDef()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ServerExploderDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ServerSideEffects
==============
*/
ServerSideEffects *AllocLoad_ServerSideEffects()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ServerSideEffects *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_SpawnGroup
==============
*/
SpawnGroup *AllocLoad_SpawnGroup()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SpawnGroup *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_SpawnGroupCluster
==============
*/
SpawnGroupCluster *AllocLoad_SpawnGroupCluster()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SpawnGroupCluster *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_SpawnGroupPoint
==============
*/
SpawnGroupPoint *AllocLoad_SpawnGroupPoint()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SpawnGroupPoint *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_SpawnGroupZone
==============
*/
SpawnGroupZone *AllocLoad_SpawnGroupZone()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SpawnGroupZone *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_SpawnPointEntityRecord
==============
*/
SpawnPointEntityRecord *AllocLoad_SpawnPointEntityRecord()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SpawnPointEntityRecord *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_SpawnPointRecordList
==============
*/
SpawnPointRecordList *AllocLoad_SpawnPointRecordList()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SpawnPointRecordList *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_Spawner
==============
*/
Spawner *AllocLoad_Spawner()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Spawner *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_SpawnerField
==============
*/
SpawnerField *AllocLoad_SpawnerField()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SpawnerField *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_SpawnerList
==============
*/
SpawnerList *AllocLoad_SpawnerList()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SpawnerList *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_SplinePointEntityRecord
==============
*/
SplinePointEntityRecord *AllocLoad_SplinePointEntityRecord()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SplinePointEntityRecord *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_SplinePointRecordList
==============
*/
SplinePointRecordList *AllocLoad_SplinePointRecordList()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SplinePointRecordList *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_SplineRecordList
==============
*/
SplineRecordList *AllocLoad_SplineRecordList()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SplineRecordList *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_StaticModelCollisionCompressedInstance
==============
*/
StaticModelCollisionCompressedInstance *AllocLoad_StaticModelCollisionCompressedInstance()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (StaticModelCollisionCompressedInstance *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_StaticModelCollisionCompressedModel
==============
*/
StaticModelCollisionCompressedModel *AllocLoad_StaticModelCollisionCompressedModel()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (StaticModelCollisionCompressedModel *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_StaticModelCollisionCompressedModelList
==============
*/
StaticModelCollisionCompressedModelList *AllocLoad_StaticModelCollisionCompressedModelList()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (StaticModelCollisionCompressedModelList *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_StaticModelCollisionInstance
==============
*/
StaticModelCollisionInstance *AllocLoad_StaticModelCollisionInstance()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (StaticModelCollisionInstance *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_StaticModelCollisionModel
==============
*/
StaticModelCollisionModel *AllocLoad_StaticModelCollisionModel()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (StaticModelCollisionModel *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_StaticModelCollisionModelList
==============
*/
StaticModelCollisionModelList *AllocLoad_StaticModelCollisionModelList()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (StaticModelCollisionModelList *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_TriggerHull
==============
*/
TriggerHull *AllocLoad_TriggerHull()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (TriggerHull *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_TriggerModel
==============
*/
TriggerModel *AllocLoad_TriggerModel()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (TriggerModel *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_TriggerSlab
==============
*/
TriggerSlab *AllocLoad_TriggerSlab()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (TriggerSlab *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_TriggerWinding
==============
*/
TriggerWinding *AllocLoad_TriggerWinding()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (TriggerWinding *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_TriggerWindingPoint
==============
*/
TriggerWindingPoint *AllocLoad_TriggerWindingPoint()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (TriggerWindingPoint *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_VariableType
==============
*/
VariableType *AllocLoad_VariableType()
{
  return (VariableType *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_alignHavokShapeData_t
==============
*/
char *AllocLoad_alignHavokShapeData_t()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (char *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_clipMap_ptr
==============
*/
clipMap_t **AllocLoad_clipMap_ptr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (clipMap_t **)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_clipMap_t
==============
*/
clipMap_t *AllocLoad_clipMap_t()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (clipMap_t *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_cmodel_t
==============
*/
cmodel_t *AllocLoad_cmodel_t()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (cmodel_t *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_AddonMapEnts
==============
*/
AddonMapEnts *AllocPostload_AddonMapEnts()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (AddonMapEnts *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_AddonMapEntsPtr
==============
*/
AddonMapEnts **AllocPostload_AddonMapEntsPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (AddonMapEnts **)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_AudioPASpeaker
==============
*/
AudioPASpeaker *AllocPostload_AudioPASpeaker()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (AudioPASpeaker *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_AudioPropagationEdge
==============
*/
AudioPropagationEdge *AllocPostload_AudioPropagationEdge()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (AudioPropagationEdge *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_AudioPropagationNode
==============
*/
AudioPropagationNode *AllocPostload_AudioPropagationNode()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (AudioPropagationNode *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_CTAudRvbPanInfo
==============
*/
CTAudRvbPanInfo *AllocPostload_CTAudRvbPanInfo()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (CTAudRvbPanInfo *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ClientEntAnchor
==============
*/
ClientEntAnchor *AllocPostload_ClientEntAnchor()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientEntAnchor *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ClientEntityLinkToDefPtr
==============
*/
ClientEntityLinkToDef **AllocPostload_ClientEntityLinkToDefPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientEntityLinkToDef **)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ClientExploderDef
==============
*/
ClientExploderDef *AllocPostload_ClientExploderDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientExploderDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ClientIntervalSoundDef
==============
*/
ClientIntervalSoundDef *AllocPostload_ClientIntervalSoundDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientIntervalSoundDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ClientLoopSoundDef
==============
*/
ClientLoopSoundDef *AllocPostload_ClientLoopSoundDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientLoopSoundDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ClientMapTriggers
==============
*/
ClientMapTriggers *AllocPostload_ClientMapTriggers()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientMapTriggers *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ClientOneshotEffectDef
==============
*/
ClientOneshotEffectDef *AllocPostload_ClientOneshotEffectDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientOneshotEffectDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ClientReactiveEntDef
==============
*/
ClientReactiveEntDef *AllocPostload_ClientReactiveEntDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientReactiveEntDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ClientRootDef
==============
*/
ClientRootDef *AllocPostload_ClientRootDef()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientRootDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ClientSideEffects
==============
*/
ClientSideEffects *AllocPostload_ClientSideEffects()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientSideEffects *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ClientTriggerBlend
==============
*/
ClientTriggerBlend *AllocPostload_ClientTriggerBlend()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientTriggerBlend *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ClientTriggerBlendNode
==============
*/
ClientTriggerBlendNode *AllocPostload_ClientTriggerBlendNode()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientTriggerBlendNode *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ClientTriggerHull
==============
*/
ClientTriggerHull *AllocPostload_ClientTriggerHull()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientTriggerHull *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ClientTriggerModel
==============
*/
ClientTriggerModel *AllocPostload_ClientTriggerModel()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientTriggerModel *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ClientTriggers
==============
*/
ClientTriggers *AllocPostload_ClientTriggers()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientTriggers *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_CollMapLookupEntry
==============
*/
CollMapLookupEntry *AllocPostload_CollMapLookupEntry()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (CollMapLookupEntry *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_CollisionHeatmapEntry
==============
*/
CollisionHeatmapEntry *AllocPostload_CollisionHeatmapEntry()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (CollisionHeatmapEntry *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_CollisionTile
==============
*/
CollisionTile *AllocPostload_CollisionTile()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (CollisionTile *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_CollisionTilePtr
==============
*/
CollisionTile **AllocPostload_CollisionTilePtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (CollisionTile **)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_CreateFxAssetData
==============
*/
CreateFxAssetData *AllocPostload_CreateFxAssetData()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (CreateFxAssetData *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_CreateFxPaletteDef
==============
*/
CreateFxPaletteDef *AllocPostload_CreateFxPaletteDef()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (CreateFxPaletteDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_DynEntityList
==============
*/
DynEntityList *AllocPostload_DynEntityList()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (DynEntityList *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_DynEntityListPtr
==============
*/
DynEntityList **AllocPostload_DynEntityListPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (DynEntityList **)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_MapEdgeList
==============
*/
MapEdgeList *AllocPostload_MapEdgeList()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (MapEdgeList *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_MapEdgeListPtr
==============
*/
MapEdgeList **AllocPostload_MapEdgeListPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (MapEdgeList **)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_MapEnts
==============
*/
MapEnts *AllocPostload_MapEnts()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (MapEnts *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_MapEntsPtr
==============
*/
MapEnts **AllocPostload_MapEntsPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (MapEnts **)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_MapTriggers
==============
*/
MapTriggers *AllocPostload_MapTriggers()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (MapTriggers *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_PhysicsCapacities
==============
*/
PhysicsCapacities *AllocPostload_PhysicsCapacities()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (PhysicsCapacities *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ServerExploderDef
==============
*/
ServerExploderDef *AllocPostload_ServerExploderDef()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ServerExploderDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ServerSideEffects
==============
*/
ServerSideEffects *AllocPostload_ServerSideEffects()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ServerSideEffects *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_SpawnGroup
==============
*/
SpawnGroup *AllocPostload_SpawnGroup()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SpawnGroup *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_SpawnGroupCluster
==============
*/
SpawnGroupCluster *AllocPostload_SpawnGroupCluster()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SpawnGroupCluster *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_SpawnGroupPoint
==============
*/
SpawnGroupPoint *AllocPostload_SpawnGroupPoint()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SpawnGroupPoint *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_SpawnGroupZone
==============
*/
SpawnGroupZone *AllocPostload_SpawnGroupZone()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SpawnGroupZone *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_SpawnPointEntityRecord
==============
*/
SpawnPointEntityRecord *AllocPostload_SpawnPointEntityRecord()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SpawnPointEntityRecord *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_SpawnPointRecordList
==============
*/
SpawnPointRecordList *AllocPostload_SpawnPointRecordList()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SpawnPointRecordList *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_Spawner
==============
*/
Spawner *AllocPostload_Spawner()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Spawner *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_SpawnerField
==============
*/
SpawnerField *AllocPostload_SpawnerField()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SpawnerField *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_SpawnerList
==============
*/
SpawnerList *AllocPostload_SpawnerList()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SpawnerList *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_SplinePointEntityRecord
==============
*/
SplinePointEntityRecord *AllocPostload_SplinePointEntityRecord()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SplinePointEntityRecord *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_SplinePointRecordList
==============
*/
SplinePointRecordList *AllocPostload_SplinePointRecordList()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SplinePointRecordList *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_SplineRecordList
==============
*/
SplineRecordList *AllocPostload_SplineRecordList()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SplineRecordList *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_StaticModelCollisionCompressedInstance
==============
*/
StaticModelCollisionCompressedInstance *AllocPostload_StaticModelCollisionCompressedInstance()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (StaticModelCollisionCompressedInstance *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_StaticModelCollisionCompressedModel
==============
*/
StaticModelCollisionCompressedModel *AllocPostload_StaticModelCollisionCompressedModel()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (StaticModelCollisionCompressedModel *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_StaticModelCollisionCompressedModelList
==============
*/
StaticModelCollisionCompressedModelList *AllocPostload_StaticModelCollisionCompressedModelList()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (StaticModelCollisionCompressedModelList *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_StaticModelCollisionInstance
==============
*/
StaticModelCollisionInstance *AllocPostload_StaticModelCollisionInstance()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (StaticModelCollisionInstance *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_StaticModelCollisionModel
==============
*/
StaticModelCollisionModel *AllocPostload_StaticModelCollisionModel()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (StaticModelCollisionModel *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_StaticModelCollisionModelList
==============
*/
StaticModelCollisionModelList *AllocPostload_StaticModelCollisionModelList()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (StaticModelCollisionModelList *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_TriggerHull
==============
*/
TriggerHull *AllocPostload_TriggerHull()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (TriggerHull *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_TriggerModel
==============
*/
TriggerModel *AllocPostload_TriggerModel()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (TriggerModel *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_TriggerSlab
==============
*/
TriggerSlab *AllocPostload_TriggerSlab()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (TriggerSlab *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_TriggerWinding
==============
*/
TriggerWinding *AllocPostload_TriggerWinding()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (TriggerWinding *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_TriggerWindingPoint
==============
*/
TriggerWindingPoint *AllocPostload_TriggerWindingPoint()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (TriggerWindingPoint *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_VariableType
==============
*/
VariableType *AllocPostload_VariableType()
{
  return (VariableType *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_alignHavokShapeData_t
==============
*/
char *AllocPostload_alignHavokShapeData_t()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (char *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_clipMap_ptr
==============
*/
clipMap_t **AllocPostload_clipMap_ptr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (clipMap_t **)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_clipMap_t
==============
*/
clipMap_t *AllocPostload_clipMap_t()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (clipMap_t *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_cmodel_t
==============
*/
cmodel_t *AllocPostload_cmodel_t()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (cmodel_t *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_AddonMapEnts
==============
*/
AddonMapEnts *AllocPreload_AddonMapEnts()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (AddonMapEnts *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_AddonMapEntsPtr
==============
*/
AddonMapEnts **AllocPreload_AddonMapEntsPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (AddonMapEnts **)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_AudioPASpeaker
==============
*/
AudioPASpeaker *AllocPreload_AudioPASpeaker()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (AudioPASpeaker *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_AudioPropagationEdge
==============
*/
AudioPropagationEdge *AllocPreload_AudioPropagationEdge()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (AudioPropagationEdge *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_AudioPropagationNode
==============
*/
AudioPropagationNode *AllocPreload_AudioPropagationNode()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (AudioPropagationNode *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_CTAudRvbPanInfo
==============
*/
CTAudRvbPanInfo *AllocPreload_CTAudRvbPanInfo()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (CTAudRvbPanInfo *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ClientEntAnchor
==============
*/
ClientEntAnchor *AllocPreload_ClientEntAnchor()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientEntAnchor *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ClientEntityLinkToDefPtr
==============
*/
ClientEntityLinkToDef **AllocPreload_ClientEntityLinkToDefPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientEntityLinkToDef **)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ClientExploderDef
==============
*/
ClientExploderDef *AllocPreload_ClientExploderDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientExploderDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ClientIntervalSoundDef
==============
*/
ClientIntervalSoundDef *AllocPreload_ClientIntervalSoundDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientIntervalSoundDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ClientLoopSoundDef
==============
*/
ClientLoopSoundDef *AllocPreload_ClientLoopSoundDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientLoopSoundDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ClientMapTriggers
==============
*/
ClientMapTriggers *AllocPreload_ClientMapTriggers()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientMapTriggers *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ClientOneshotEffectDef
==============
*/
ClientOneshotEffectDef *AllocPreload_ClientOneshotEffectDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientOneshotEffectDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ClientReactiveEntDef
==============
*/
ClientReactiveEntDef *AllocPreload_ClientReactiveEntDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientReactiveEntDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ClientRootDef
==============
*/
ClientRootDef *AllocPreload_ClientRootDef()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientRootDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ClientSideEffects
==============
*/
ClientSideEffects *AllocPreload_ClientSideEffects()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientSideEffects *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ClientTriggerBlend
==============
*/
ClientTriggerBlend *AllocPreload_ClientTriggerBlend()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientTriggerBlend *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ClientTriggerBlendNode
==============
*/
ClientTriggerBlendNode *AllocPreload_ClientTriggerBlendNode()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientTriggerBlendNode *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ClientTriggerHull
==============
*/
ClientTriggerHull *AllocPreload_ClientTriggerHull()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientTriggerHull *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ClientTriggerModel
==============
*/
ClientTriggerModel *AllocPreload_ClientTriggerModel()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientTriggerModel *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ClientTriggers
==============
*/
ClientTriggers *AllocPreload_ClientTriggers()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ClientTriggers *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_CollMapLookupEntry
==============
*/
CollMapLookupEntry *AllocPreload_CollMapLookupEntry()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (CollMapLookupEntry *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_CollisionHeatmapEntry
==============
*/
CollisionHeatmapEntry *AllocPreload_CollisionHeatmapEntry()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (CollisionHeatmapEntry *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_CollisionTile
==============
*/
CollisionTile *AllocPreload_CollisionTile()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (CollisionTile *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_CollisionTilePtr
==============
*/
CollisionTile **AllocPreload_CollisionTilePtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (CollisionTile **)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_CreateFxAssetData
==============
*/
CreateFxAssetData *AllocPreload_CreateFxAssetData()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (CreateFxAssetData *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_CreateFxPaletteDef
==============
*/
CreateFxPaletteDef *AllocPreload_CreateFxPaletteDef()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (CreateFxPaletteDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_DynEntityList
==============
*/
DynEntityList *AllocPreload_DynEntityList()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (DynEntityList *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_DynEntityListPtr
==============
*/
DynEntityList **AllocPreload_DynEntityListPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (DynEntityList **)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_MapEdgeList
==============
*/
MapEdgeList *AllocPreload_MapEdgeList()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (MapEdgeList *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_MapEdgeListPtr
==============
*/
MapEdgeList **AllocPreload_MapEdgeListPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (MapEdgeList **)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_MapEnts
==============
*/
MapEnts *AllocPreload_MapEnts()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (MapEnts *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_MapEntsPtr
==============
*/
MapEnts **AllocPreload_MapEntsPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (MapEnts **)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_MapTriggers
==============
*/
MapTriggers *AllocPreload_MapTriggers()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (MapTriggers *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_PhysicsCapacities
==============
*/
PhysicsCapacities *AllocPreload_PhysicsCapacities()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (PhysicsCapacities *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ServerExploderDef
==============
*/
ServerExploderDef *AllocPreload_ServerExploderDef()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ServerExploderDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ServerSideEffects
==============
*/
ServerSideEffects *AllocPreload_ServerSideEffects()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ServerSideEffects *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_SpawnGroup
==============
*/
SpawnGroup *AllocPreload_SpawnGroup()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SpawnGroup *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_SpawnGroupCluster
==============
*/
SpawnGroupCluster *AllocPreload_SpawnGroupCluster()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SpawnGroupCluster *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_SpawnGroupPoint
==============
*/
SpawnGroupPoint *AllocPreload_SpawnGroupPoint()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SpawnGroupPoint *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_SpawnGroupZone
==============
*/
SpawnGroupZone *AllocPreload_SpawnGroupZone()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SpawnGroupZone *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_SpawnPointEntityRecord
==============
*/
SpawnPointEntityRecord *AllocPreload_SpawnPointEntityRecord()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SpawnPointEntityRecord *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_SpawnPointRecordList
==============
*/
SpawnPointRecordList *AllocPreload_SpawnPointRecordList()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SpawnPointRecordList *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_Spawner
==============
*/
Spawner *AllocPreload_Spawner()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Spawner *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_SpawnerField
==============
*/
SpawnerField *AllocPreload_SpawnerField()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SpawnerField *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_SpawnerList
==============
*/
SpawnerList *AllocPreload_SpawnerList()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SpawnerList *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_SplinePointEntityRecord
==============
*/
SplinePointEntityRecord *AllocPreload_SplinePointEntityRecord()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SplinePointEntityRecord *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_SplinePointRecordList
==============
*/
SplinePointRecordList *AllocPreload_SplinePointRecordList()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SplinePointRecordList *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_SplineRecordList
==============
*/
SplineRecordList *AllocPreload_SplineRecordList()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (SplineRecordList *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_StaticModelCollisionCompressedInstance
==============
*/
StaticModelCollisionCompressedInstance *AllocPreload_StaticModelCollisionCompressedInstance()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (StaticModelCollisionCompressedInstance *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_StaticModelCollisionCompressedModel
==============
*/
StaticModelCollisionCompressedModel *AllocPreload_StaticModelCollisionCompressedModel()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (StaticModelCollisionCompressedModel *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_StaticModelCollisionCompressedModelList
==============
*/
StaticModelCollisionCompressedModelList *AllocPreload_StaticModelCollisionCompressedModelList()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (StaticModelCollisionCompressedModelList *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_StaticModelCollisionInstance
==============
*/
StaticModelCollisionInstance *AllocPreload_StaticModelCollisionInstance()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (StaticModelCollisionInstance *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_StaticModelCollisionModel
==============
*/
StaticModelCollisionModel *AllocPreload_StaticModelCollisionModel()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (StaticModelCollisionModel *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_StaticModelCollisionModelList
==============
*/
StaticModelCollisionModelList *AllocPreload_StaticModelCollisionModelList()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (StaticModelCollisionModelList *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_TriggerHull
==============
*/
TriggerHull *AllocPreload_TriggerHull()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (TriggerHull *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_TriggerModel
==============
*/
TriggerModel *AllocPreload_TriggerModel()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (TriggerModel *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_TriggerSlab
==============
*/
TriggerSlab *AllocPreload_TriggerSlab()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (TriggerSlab *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_TriggerWinding
==============
*/
TriggerWinding *AllocPreload_TriggerWinding()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (TriggerWinding *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_TriggerWindingPoint
==============
*/
TriggerWindingPoint *AllocPreload_TriggerWindingPoint()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (TriggerWindingPoint *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_VariableType
==============
*/
VariableType *AllocPreload_VariableType()
{
  return (VariableType *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_alignHavokShapeData_t
==============
*/
char *AllocPreload_alignHavokShapeData_t()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (char *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_clipMap_ptr
==============
*/
clipMap_t **AllocPreload_clipMap_ptr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (clipMap_t **)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_clipMap_t
==============
*/
clipMap_t *AllocPreload_clipMap_t()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (clipMap_t *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_cmodel_t
==============
*/
cmodel_t *AllocPreload_cmodel_t()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (cmodel_t *)g_streamPosGlob.pos;
}

/*
==============
Load_AddonMapEnts
==============
*/
void Load_AddonMapEnts(const DBStreamStart streamStart)
{
  const char **v2; 
  AddonMapEnts *v3; 
  char *v4; 
  char *v5; 
  MapTriggers *v6; 
  AddonMapEnts *v7; 
  cmodel_t *v8; 
  GfxBrushModel *v9; 
  GfxBrushModel *GfxBrushModel; 

  DB_PatchMem_PushAsset(56, varAddonMapEnts);
  Load_Stream(streamStart, varAddonMapEnts, 0x80ui64);
  DB_PushStreamPos(8u);
  v2 = varXString;
  varXString = &varAddonMapEnts->name;
  Load_XString(NotAtStart);
  v3 = varAddonMapEnts;
  varXString = v2;
  if ( varAddonMapEnts->entityString )
  {
    v4 = varchar;
    v5 = AllocLoad_char();
    v3->entityString = v5;
    varchar = v5;
    Load_charArray(AtStart, varAddonMapEnts->numEntityChars);
    v3 = varAddonMapEnts;
    varchar = v4;
  }
  v6 = varMapTriggers;
  varMapTriggers = &v3->trigger;
  Load_MapTriggers(NotAtStart);
  v7 = varAddonMapEnts;
  varMapTriggers = v6;
  if ( varAddonMapEnts->cmodels )
  {
    v8 = varcmodel_t;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v7->cmodels = (cmodel_t *)g_streamPosGlob.pos;
    varcmodel_t = (cmodel_t *)g_streamPosGlob.pos;
    Load_cmodel_tArray(AtStart, varAddonMapEnts->numSubModels);
    v7 = varAddonMapEnts;
    varcmodel_t = v8;
  }
  if ( v7->models )
  {
    v9 = varGfxBrushModel;
    GfxBrushModel = AllocLoad_GfxBrushModel();
    v7->models = GfxBrushModel;
    varGfxBrushModel = GfxBrushModel;
    Load_GfxBrushModelArray(AtStart, varAddonMapEnts->numSubModels);
    varGfxBrushModel = v9;
  }
  DB_PopStreamPos();
  DB_PatchMem_PopAsset();
}

/*
==============
Load_AddonMapEntsArray
==============
*/
void Load_AddonMapEntsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  AddonMapEnts *i; 
  const char **v4; 
  AddonMapEnts *v5; 
  char *v6; 
  char *v7; 
  MapTriggers *v8; 
  AddonMapEnts *v9; 
  cmodel_t *v10; 
  GfxBrushModel *v11; 
  GfxBrushModel *GfxBrushModel; 

  v2 = count;
  Load_Stream(streamStart, varAddonMapEnts, count << 7);
  for ( i = varAddonMapEnts; v2; --v2 )
  {
    varAddonMapEnts = i;
    DB_PatchMem_PushAsset(56, i);
    Load_Stream(NotAtStart, varAddonMapEnts, 0x80ui64);
    DB_PushStreamPos(8u);
    v4 = varXString;
    varXString = &varAddonMapEnts->name;
    Load_XString(NotAtStart);
    v5 = varAddonMapEnts;
    varXString = v4;
    if ( varAddonMapEnts->entityString )
    {
      v6 = varchar;
      v7 = AllocLoad_char();
      v5->entityString = v7;
      varchar = v7;
      Load_charArray(AtStart, varAddonMapEnts->numEntityChars);
      v5 = varAddonMapEnts;
      varchar = v6;
    }
    v8 = varMapTriggers;
    varMapTriggers = &v5->trigger;
    Load_MapTriggers(NotAtStart);
    v9 = varAddonMapEnts;
    varMapTriggers = v8;
    if ( varAddonMapEnts->cmodels )
    {
      v10 = varcmodel_t;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v9->cmodels = (cmodel_t *)g_streamPosGlob.pos;
      varcmodel_t = (cmodel_t *)g_streamPosGlob.pos;
      Load_cmodel_tArray(AtStart, varAddonMapEnts->numSubModels);
      v9 = varAddonMapEnts;
      varcmodel_t = v10;
    }
    if ( v9->models )
    {
      v11 = varGfxBrushModel;
      GfxBrushModel = AllocLoad_GfxBrushModel();
      v9->models = GfxBrushModel;
      varGfxBrushModel = GfxBrushModel;
      Load_GfxBrushModelArray(AtStart, varAddonMapEnts->numSubModels);
      varGfxBrushModel = v11;
    }
    DB_PopStreamPos();
    DB_PatchMem_PopAsset();
    ++i;
  }
}

/*
==============
Load_AddonMapEntsPtr
==============
*/
void Load_AddonMapEntsPtr(const DBStreamStart streamStart)
{
  AddonMapEnts **v1; 
  __int64 v2; 
  AddonMapEnts *v3; 
  unsigned __int8 *inserted; 

  Load_Stream(streamStart, varAddonMapEntsPtr, 8ui64);
  DB_PushStreamPos(1u);
  v1 = varAddonMapEntsPtr;
  v2 = (__int64)*varAddonMapEntsPtr;
  if ( *varAddonMapEntsPtr )
  {
    if ( v2 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v2 != -2 && v2 != -3 )
    {
      DB_ConvertOffsetToAlias((unsigned __int64 *)varAddonMapEntsPtr);
      goto LABEL_6;
    }
    v3 = varAddonMapEnts;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    inserted = NULL;
    *v1 = (AddonMapEnts *)g_streamPosGlob.pos;
    varAddonMapEnts = (AddonMapEnts *)g_streamPosGlob.pos;
    if ( v2 == -3 )
      inserted = DB_InsertPointer();
    Load_AddonMapEnts(AtStart);
    Load_AddonMapEntsAsset(v1);
    varAddonMapEnts = v3;
    if ( inserted )
      *(_QWORD *)inserted = *v1;
    if ( v2 == -1 )
      DB_PopSharedData();
  }
LABEL_6:
  DB_PopStreamPos();
}

/*
==============
Load_AddonMapEntsPtrArray
==============
*/
void Load_AddonMapEntsPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  AddonMapEnts **i; 
  AddonMapEnts **v4; 
  __int64 v5; 
  AddonMapEnts *v6; 
  unsigned __int8 *inserted; 

  v2 = count;
  Load_Stream(streamStart, varAddonMapEntsPtr, 8 * count);
  for ( i = varAddonMapEntsPtr; v2; --v2 )
  {
    varAddonMapEntsPtr = i;
    Load_Stream(NotAtStart, i, 8ui64);
    DB_PushStreamPos(1u);
    v4 = varAddonMapEntsPtr;
    v5 = (__int64)*varAddonMapEntsPtr;
    if ( *varAddonMapEntsPtr )
    {
      if ( v5 == -1 )
      {
        DB_PushSharedData();
LABEL_8:
        v6 = varAddonMapEnts;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        inserted = NULL;
        *v4 = (AddonMapEnts *)g_streamPosGlob.pos;
        varAddonMapEnts = (AddonMapEnts *)g_streamPosGlob.pos;
        if ( v5 == -3 )
          inserted = DB_InsertPointer();
        Load_AddonMapEnts(AtStart);
        Load_AddonMapEntsAsset(v4);
        varAddonMapEnts = v6;
        if ( inserted )
          *(_QWORD *)inserted = *v4;
        if ( v5 == -1 )
          DB_PopSharedData();
        goto LABEL_14;
      }
      if ( v5 == -2 || v5 == -3 )
        goto LABEL_8;
      DB_ConvertOffsetToAlias((unsigned __int64 *)varAddonMapEntsPtr);
    }
LABEL_14:
    DB_PopStreamPos();
    ++i;
  }
}

/*
==============
Load_AddonMapEntsPtrStream
==============
*/
void Load_AddonMapEntsPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  AddonMapEnts **v4; 
  __int64 v5; 
  AddonMapEnts *v6; 
  unsigned __int8 *inserted; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 19017, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varAddonMapEntsPtr;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      DB_PushStreamPos(1u);
      v4 = varAddonMapEntsPtr;
      v5 = (__int64)*varAddonMapEntsPtr;
      if ( *varAddonMapEntsPtr )
      {
        if ( v5 == -1 )
        {
          DB_PushSharedData();
LABEL_12:
          v6 = varAddonMapEnts;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          inserted = NULL;
          *v4 = (AddonMapEnts *)g_streamPosGlob.pos;
          varAddonMapEnts = (AddonMapEnts *)g_streamPosGlob.pos;
          if ( v5 == -3 )
            inserted = DB_InsertPointer();
          Load_AddonMapEnts(AtStart);
          Load_AddonMapEntsAsset(v4);
          varAddonMapEnts = v6;
          if ( inserted )
            *(_QWORD *)inserted = *v4;
          if ( v5 == -1 )
            DB_PopSharedData();
          goto LABEL_18;
        }
        if ( v5 == -2 || v5 == -3 )
          goto LABEL_12;
        DB_ConvertOffsetToAlias((unsigned __int64 *)varAddonMapEntsPtr);
      }
LABEL_18:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varAddonMapEntsPtr = (AddonMapEnts **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_AddonMapEntsStream
==============
*/
void Load_AddonMapEntsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 
  AddonMapEnts *v5; 
  char *v6; 
  char *v7; 
  MapTriggers *v8; 
  AddonMapEnts *v9; 
  cmodel_t *v10; 
  GfxBrushModel *v11; 
  GfxBrushModel *GfxBrushModel; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 18893, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varAddonMapEnts;
    do
    {
      DB_PatchMem_PushAsset(56, pos);
      Load_Stream(AtStart, varAddonMapEnts, 0x80ui64);
      DB_PushStreamPos(8u);
      v4 = varXString;
      varXString = &varAddonMapEnts->name;
      Load_XString(NotAtStart);
      v5 = varAddonMapEnts;
      varXString = v4;
      if ( varAddonMapEnts->entityString )
      {
        v6 = varchar;
        v7 = AllocLoad_char();
        v5->entityString = v7;
        varchar = v7;
        Load_charArray(AtStart, varAddonMapEnts->numEntityChars);
        v5 = varAddonMapEnts;
        varchar = v6;
      }
      v8 = varMapTriggers;
      varMapTriggers = &v5->trigger;
      Load_MapTriggers(NotAtStart);
      v9 = varAddonMapEnts;
      varMapTriggers = v8;
      if ( varAddonMapEnts->cmodels )
      {
        v10 = varcmodel_t;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v9->cmodels = (cmodel_t *)g_streamPosGlob.pos;
        varcmodel_t = (cmodel_t *)g_streamPosGlob.pos;
        Load_cmodel_tArray(AtStart, varAddonMapEnts->numSubModels);
        v9 = varAddonMapEnts;
        varcmodel_t = v10;
      }
      if ( v9->models )
      {
        v11 = varGfxBrushModel;
        GfxBrushModel = AllocLoad_GfxBrushModel();
        v9->models = GfxBrushModel;
        varGfxBrushModel = GfxBrushModel;
        Load_GfxBrushModelArray(AtStart, varAddonMapEnts->numSubModels);
        varGfxBrushModel = v11;
      }
      DB_PopStreamPos();
      DB_PatchMem_PopAsset();
      pos = g_streamPosGlob.pos;
      varAddonMapEnts = (AddonMapEnts *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_AudioPASpeaker
==============
*/
void Load_AudioPASpeaker(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varAudioPASpeaker, 0x14ui64);
}

/*
==============
Load_AudioPASpeakerArray
==============
*/
void Load_AudioPASpeakerArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varAudioPASpeaker, 20 * count);
}

/*
==============
Load_AudioPASpeakerStream
==============
*/
void Load_AudioPASpeakerStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 13482, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varAudioPASpeaker;
    do
    {
      Load_Stream(AtStart, pos, 0x14ui64);
      pos = g_streamPosGlob.pos;
      varAudioPASpeaker = (AudioPASpeaker *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_AudioPropagationEdge
==============
*/
void Load_AudioPropagationEdge(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varAudioPropagationEdge, 4ui64);
}

/*
==============
Load_AudioPropagationEdgeArray
==============
*/
void Load_AudioPropagationEdgeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varAudioPropagationEdge, 4 * count);
}

/*
==============
Load_AudioPropagationEdgeStream
==============
*/
void Load_AudioPropagationEdgeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 13705, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varAudioPropagationEdge;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varAudioPropagationEdge = (AudioPropagationEdge *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_AudioPropagationNode
==============
*/
void Load_AudioPropagationNode(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varAudioPropagationNode, 0x14ui64);
}

/*
==============
Load_AudioPropagationNodeArray
==============
*/
void Load_AudioPropagationNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varAudioPropagationNode, 20 * count);
}

/*
==============
Load_AudioPropagationNodeStream
==============
*/
void Load_AudioPropagationNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 13605, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varAudioPropagationNode;
    do
    {
      Load_Stream(AtStart, pos, 0x14ui64);
      pos = g_streamPosGlob.pos;
      varAudioPropagationNode = (AudioPropagationNode *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_CTAudRvbPanInfo
==============
*/
void Load_CTAudRvbPanInfo(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varCTAudRvbPanInfo, 0x18ui64);
}

/*
==============
Load_CTAudRvbPanInfoArray
==============
*/
void Load_CTAudRvbPanInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varCTAudRvbPanInfo, 24 * count);
}

/*
==============
Load_CTAudRvbPanInfoStream
==============
*/
void Load_CTAudRvbPanInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  CTAudRvbPanInfo *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 9625, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = varCTAudRvbPanInfo;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      pos = (CTAudRvbPanInfo *)g_streamPosGlob.pos;
      varCTAudRvbPanInfo = (CTAudRvbPanInfo *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_CheckArrayMemberDynEntityList382
==============
*/
void Load_CheckArrayMemberDynEntityList382(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberDynEntityList388
==============
*/
void Load_CheckArrayMemberDynEntityList388(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberDynEntityList395
==============
*/
void Load_CheckArrayMemberDynEntityList395(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberDynEntityList402
==============
*/
void Load_CheckArrayMemberDynEntityList402(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberMapEnts464
==============
*/
void Load_CheckArrayMemberMapEnts464(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberMapEnts470
==============
*/
void Load_CheckArrayMemberMapEnts470(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberMapEnts478
==============
*/
void Load_CheckArrayMemberMapEnts478(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberMapEnts484
==============
*/
void Load_CheckArrayMemberMapEnts484(void)
{
  ;
}

/*
==============
Load_ClientEntAnchor
==============
*/
void Load_ClientEntAnchor(const DBStreamStart streamStart)
{
  scr_string_t *v1; 

  Load_Stream(streamStart, varClientEntAnchor, 8ui64);
  v1 = varscr_string_t;
  varscr_string_t = (scr_string_t *)varClientEntAnchor;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = v1;
}

/*
==============
Load_ClientEntAnchorArray
==============
*/
void Load_ClientEntAnchorArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientEntAnchor *i; 
  scr_string_t *v4; 

  v2 = count;
  Load_Stream(streamStart, varClientEntAnchor, 8 * count);
  for ( i = varClientEntAnchor; v2; --v2 )
  {
    varClientEntAnchor = i;
    Load_Stream(NotAtStart, i, 8ui64);
    v4 = varscr_string_t;
    varscr_string_t = (scr_string_t *)varClientEntAnchor;
    Load_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v4;
  }
}

/*
==============
Load_ClientEntAnchorStream
==============
*/
void Load_ClientEntAnchorStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  scr_string_t *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 12591, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varClientEntAnchor;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      v4 = varscr_string_t;
      varscr_string_t = (scr_string_t *)varClientEntAnchor;
      Load_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varClientEntAnchor = (ClientEntAnchor *)g_streamPosGlob.pos;
      varscr_string_t = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ClientEntityLinkToDefPtr
==============
*/
void Load_ClientEntityLinkToDefPtr(const DBStreamStart streamStart)
{
  ClientEntityLinkToDef **v1; 
  __int64 v2; 
  ClientEntityLinkToDef *v3; 
  ClientEntityLinkToDef *ClientEntityLinkToDef; 

  Load_Stream(streamStart, varClientEntityLinkToDefPtr, 8ui64);
  v1 = varClientEntityLinkToDefPtr;
  v2 = (__int64)*varClientEntityLinkToDefPtr;
  if ( *varClientEntityLinkToDefPtr )
  {
    if ( v2 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v2 != -2 )
    {
      *v1 = (ClientEntityLinkToDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)*varClientEntityLinkToDefPtr);
      return;
    }
    v3 = varClientEntityLinkToDef;
    ClientEntityLinkToDef = AllocLoad_ClientEntityLinkToDef();
    *v1 = ClientEntityLinkToDef;
    varClientEntityLinkToDef = ClientEntityLinkToDef;
    Load_ClientEntityLinkToDef(AtStart);
    varClientEntityLinkToDef = v3;
    if ( v2 == -1 )
      DB_PopSharedData();
  }
}

/*
==============
Load_ClientEntityLinkToDefPtrArray
==============
*/
void Load_ClientEntityLinkToDefPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientEntityLinkToDef **i; 
  ClientEntityLinkToDef **v4; 
  __int64 v5; 
  ClientEntityLinkToDef *v6; 
  ClientEntityLinkToDef *ClientEntityLinkToDef; 

  v2 = count;
  Load_Stream(streamStart, varClientEntityLinkToDefPtr, 8 * count);
  for ( i = varClientEntityLinkToDefPtr; v2; --v2 )
  {
    varClientEntityLinkToDefPtr = i;
    Load_Stream(NotAtStart, i, 8ui64);
    v4 = varClientEntityLinkToDefPtr;
    v5 = (__int64)*varClientEntityLinkToDefPtr;
    if ( *varClientEntityLinkToDefPtr )
    {
      if ( v5 == -1 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varClientEntityLinkToDef;
        ClientEntityLinkToDef = AllocLoad_ClientEntityLinkToDef();
        *v4 = ClientEntityLinkToDef;
        varClientEntityLinkToDef = ClientEntityLinkToDef;
        Load_ClientEntityLinkToDef(AtStart);
        varClientEntityLinkToDef = v6;
        if ( v5 == -1 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( v5 == -2 )
        goto LABEL_7;
      *v4 = (ClientEntityLinkToDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)*varClientEntityLinkToDefPtr);
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Load_ClientEntityLinkToDefPtrStream
==============
*/
void Load_ClientEntityLinkToDefPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ClientEntityLinkToDef **v4; 
  __int64 v5; 
  ClientEntityLinkToDef *v6; 
  ClientEntityLinkToDef *ClientEntityLinkToDef; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 9731, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varClientEntityLinkToDefPtr;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      v4 = varClientEntityLinkToDefPtr;
      v5 = (__int64)*varClientEntityLinkToDefPtr;
      if ( *varClientEntityLinkToDefPtr )
      {
        if ( v5 == -1 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varClientEntityLinkToDef;
          ClientEntityLinkToDef = AllocLoad_ClientEntityLinkToDef();
          *v4 = ClientEntityLinkToDef;
          varClientEntityLinkToDef = ClientEntityLinkToDef;
          Load_ClientEntityLinkToDef(AtStart);
          varClientEntityLinkToDef = v6;
          if ( v5 == -1 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( v5 == -2 )
          goto LABEL_11;
        *v4 = (ClientEntityLinkToDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)*varClientEntityLinkToDefPtr);
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varClientEntityLinkToDefPtr = (ClientEntityLinkToDef **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ClientExploderDef
==============
*/
void Load_ClientExploderDef(const DBStreamStart streamStart)
{
  FxCombinedDef *v1; 
  SndAliasLookup *v2; 
  ClientExploderDef *v3; 
  SndAliasList *v4; 
  SndAliasList *SndAliasList; 
  scr_string_t *v6; 

  Load_Stream(streamStart, varClientExploderDef, 0x40ui64);
  v1 = varFxCombinedDef;
  varFxCombinedDef = &varClientExploderDef->effect;
  Load_FxCombinedDef(NotAtStart);
  varFxCombinedDef = v1;
  v2 = varSndAliasLookup;
  varSndAliasLookup = &varClientExploderDef->effectSound;
  Load_SndAliasLookup(NotAtStart);
  v3 = varClientExploderDef;
  varSndAliasLookup = v2;
  if ( varClientExploderDef->aliasList )
  {
    v4 = varSndAliasList;
    SndAliasList = AllocLoad_SndAliasList();
    v3->aliasList = SndAliasList;
    varSndAliasList = SndAliasList;
    Load_SndAliasList(AtStart);
    v3 = varClientExploderDef;
    varSndAliasList = v4;
  }
  v6 = varscr_string_t;
  varscr_string_t = &v3->name;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = v6;
}

/*
==============
Load_ClientExploderDefArray
==============
*/
void Load_ClientExploderDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientExploderDef *i; 
  FxCombinedDef *v4; 
  SndAliasLookup *v5; 
  ClientExploderDef *v6; 
  SndAliasList *v7; 
  SndAliasList *SndAliasList; 
  scr_string_t *v9; 

  v2 = count;
  Load_Stream(streamStart, varClientExploderDef, count << 6);
  for ( i = varClientExploderDef; v2; --v2 )
  {
    varClientExploderDef = i;
    Load_Stream(NotAtStart, i, 0x40ui64);
    v4 = varFxCombinedDef;
    varFxCombinedDef = &varClientExploderDef->effect;
    Load_FxCombinedDef(NotAtStart);
    varFxCombinedDef = v4;
    v5 = varSndAliasLookup;
    varSndAliasLookup = &varClientExploderDef->effectSound;
    Load_SndAliasLookup(NotAtStart);
    varSndAliasLookup = v5;
    v6 = varClientExploderDef;
    if ( varClientExploderDef->aliasList )
    {
      v7 = varSndAliasList;
      SndAliasList = AllocLoad_SndAliasList();
      v6->aliasList = SndAliasList;
      varSndAliasList = SndAliasList;
      Load_SndAliasList(AtStart);
      v6 = varClientExploderDef;
      varSndAliasList = v7;
    }
    v9 = varscr_string_t;
    varscr_string_t = &v6->name;
    Load_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v9;
  }
}

/*
==============
Load_ClientExploderDefStream
==============
*/
void Load_ClientExploderDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  FxCombinedDef *v4; 
  SndAliasLookup *v5; 
  ClientExploderDef *v6; 
  SndAliasList *v7; 
  SndAliasList *SndAliasList; 
  scr_string_t *v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 14835, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varClientExploderDef;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      v4 = varFxCombinedDef;
      varFxCombinedDef = &varClientExploderDef->effect;
      Load_FxCombinedDef(NotAtStart);
      varFxCombinedDef = v4;
      v5 = varSndAliasLookup;
      varSndAliasLookup = &varClientExploderDef->effectSound;
      Load_SndAliasLookup(NotAtStart);
      varSndAliasLookup = v5;
      v6 = varClientExploderDef;
      if ( varClientExploderDef->aliasList )
      {
        v7 = varSndAliasList;
        SndAliasList = AllocLoad_SndAliasList();
        v6->aliasList = SndAliasList;
        varSndAliasList = SndAliasList;
        Load_SndAliasList(AtStart);
        v6 = varClientExploderDef;
        varSndAliasList = v7;
      }
      v9 = varscr_string_t;
      varscr_string_t = &v6->name;
      Load_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varClientExploderDef = (ClientExploderDef *)g_streamPosGlob.pos;
      varscr_string_t = v9;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ClientIntervalSoundDef
==============
*/
void Load_ClientIntervalSoundDef(const DBStreamStart streamStart)
{
  SndAliasLookup *v1; 
  ClientIntervalSoundDef *v2; 
  SndAliasList *v3; 
  SndAliasList *SndAliasList; 

  Load_Stream(streamStart, varClientIntervalSoundDef, 0x30ui64);
  v1 = varSndAliasLookup;
  varSndAliasLookup = &varClientIntervalSoundDef->effectSound;
  Load_SndAliasLookup(NotAtStart);
  v2 = varClientIntervalSoundDef;
  varSndAliasLookup = v1;
  if ( varClientIntervalSoundDef->aliasList )
  {
    v3 = varSndAliasList;
    SndAliasList = AllocLoad_SndAliasList();
    v2->aliasList = SndAliasList;
    varSndAliasList = SndAliasList;
    Load_SndAliasList(AtStart);
    varSndAliasList = v3;
  }
}

/*
==============
Load_ClientIntervalSoundDefArray
==============
*/
void Load_ClientIntervalSoundDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientIntervalSoundDef *i; 
  SndAliasLookup *v4; 
  ClientIntervalSoundDef *v5; 
  SndAliasList *v6; 
  SndAliasList *SndAliasList; 

  v2 = count;
  Load_Stream(streamStart, varClientIntervalSoundDef, 48 * count);
  for ( i = varClientIntervalSoundDef; v2; --v2 )
  {
    varClientIntervalSoundDef = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    v4 = varSndAliasLookup;
    varSndAliasLookup = &varClientIntervalSoundDef->effectSound;
    Load_SndAliasLookup(NotAtStart);
    v5 = varClientIntervalSoundDef;
    varSndAliasLookup = v4;
    if ( varClientIntervalSoundDef->aliasList )
    {
      v6 = varSndAliasList;
      SndAliasList = AllocLoad_SndAliasList();
      v5->aliasList = SndAliasList;
      varSndAliasList = SndAliasList;
      Load_SndAliasList(AtStart);
      varSndAliasList = v6;
    }
    ++i;
  }
}

/*
==============
Load_ClientIntervalSoundDefStream
==============
*/
void Load_ClientIntervalSoundDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  SndAliasLookup *v4; 
  ClientIntervalSoundDef *v5; 
  SndAliasList *v6; 
  SndAliasList *SndAliasList; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 14615, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varClientIntervalSoundDef;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      v4 = varSndAliasLookup;
      varSndAliasLookup = &varClientIntervalSoundDef->effectSound;
      Load_SndAliasLookup(NotAtStart);
      v5 = varClientIntervalSoundDef;
      varSndAliasLookup = v4;
      if ( varClientIntervalSoundDef->aliasList )
      {
        v6 = varSndAliasList;
        SndAliasList = AllocLoad_SndAliasList();
        v5->aliasList = SndAliasList;
        varSndAliasList = SndAliasList;
        Load_SndAliasList(AtStart);
        varSndAliasList = v6;
      }
      pos = g_streamPosGlob.pos;
      varClientIntervalSoundDef = (ClientIntervalSoundDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ClientLoopSoundDef
==============
*/
void Load_ClientLoopSoundDef(const DBStreamStart streamStart)
{
  SndAliasLookup *v1; 
  ClientLoopSoundDef *v2; 
  SndAliasList *v3; 
  SndAliasList *SndAliasList; 

  Load_Stream(streamStart, varClientLoopSoundDef, 0x28ui64);
  v1 = varSndAliasLookup;
  varSndAliasLookup = &varClientLoopSoundDef->effectSound;
  Load_SndAliasLookup(NotAtStart);
  v2 = varClientLoopSoundDef;
  varSndAliasLookup = v1;
  if ( varClientLoopSoundDef->aliasList )
  {
    v3 = varSndAliasList;
    SndAliasList = AllocLoad_SndAliasList();
    v2->aliasList = SndAliasList;
    varSndAliasList = SndAliasList;
    Load_SndAliasList(AtStart);
    varSndAliasList = v3;
  }
}

/*
==============
Load_ClientLoopSoundDefArray
==============
*/
void Load_ClientLoopSoundDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientLoopSoundDef *i; 
  SndAliasLookup *v4; 
  ClientLoopSoundDef *v5; 
  SndAliasList *v6; 
  SndAliasList *SndAliasList; 

  v2 = count;
  Load_Stream(streamStart, varClientLoopSoundDef, 40 * count);
  for ( i = varClientLoopSoundDef; v2; --v2 )
  {
    varClientLoopSoundDef = i;
    Load_Stream(NotAtStart, i, 0x28ui64);
    v4 = varSndAliasLookup;
    varSndAliasLookup = &varClientLoopSoundDef->effectSound;
    Load_SndAliasLookup(NotAtStart);
    v5 = varClientLoopSoundDef;
    varSndAliasLookup = v4;
    if ( varClientLoopSoundDef->aliasList )
    {
      v6 = varSndAliasList;
      SndAliasList = AllocLoad_SndAliasList();
      v5->aliasList = SndAliasList;
      varSndAliasList = SndAliasList;
      Load_SndAliasList(AtStart);
      varSndAliasList = v6;
    }
    ++i;
  }
}

/*
==============
Load_ClientLoopSoundDefStream
==============
*/
void Load_ClientLoopSoundDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  SndAliasLookup *v4; 
  ClientLoopSoundDef *v5; 
  SndAliasList *v6; 
  SndAliasList *SndAliasList; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 14221, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varClientLoopSoundDef;
    do
    {
      Load_Stream(AtStart, pos, 0x28ui64);
      v4 = varSndAliasLookup;
      varSndAliasLookup = &varClientLoopSoundDef->effectSound;
      Load_SndAliasLookup(NotAtStart);
      v5 = varClientLoopSoundDef;
      varSndAliasLookup = v4;
      if ( varClientLoopSoundDef->aliasList )
      {
        v6 = varSndAliasList;
        SndAliasList = AllocLoad_SndAliasList();
        v5->aliasList = SndAliasList;
        varSndAliasList = SndAliasList;
        Load_SndAliasList(AtStart);
        varSndAliasList = v6;
      }
      pos = g_streamPosGlob.pos;
      varClientLoopSoundDef = (ClientLoopSoundDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ClientMapTriggers
==============
*/
void Load_ClientMapTriggers(const DBStreamStart streamStart)
{
  ClientMapTriggers *v1; 
  ClientTriggerModel *models; 
  ClientTriggerModel *v3; 
  ClientMapTriggers *v4; 
  ClientTriggerHull *hulls; 
  ClientTriggerHull *v6; 
  ClientMapTriggers *v7; 
  TriggerSlab *slabs; 
  TriggerSlab *v9; 

  Load_Stream(streamStart, varClientMapTriggers, 0x30ui64);
  v1 = varClientMapTriggers;
  models = varClientMapTriggers->models;
  if ( models )
  {
    if ( models == (ClientTriggerModel *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( models != (ClientTriggerModel *)-2i64 )
    {
      v1->models = (ClientTriggerModel *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varClientMapTriggers->models);
      goto LABEL_8;
    }
    v3 = varClientTriggerModel;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->models = (ClientTriggerModel *)g_streamPosGlob.pos;
    varClientTriggerModel = (ClientTriggerModel *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varClientMapTriggers->count);
    varClientTriggerModel = v3;
    if ( models == (ClientTriggerModel *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v4 = varClientMapTriggers;
  hulls = varClientMapTriggers->hulls;
  if ( !hulls )
    goto LABEL_15;
  if ( hulls == (ClientTriggerHull *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( hulls != (ClientTriggerHull *)-2i64 )
  {
    v4->hulls = (ClientTriggerHull *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varClientMapTriggers->hulls);
    goto LABEL_15;
  }
  v6 = varClientTriggerHull;
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  v4->hulls = (ClientTriggerHull *)g_streamPosGlob.pos;
  varClientTriggerHull = (ClientTriggerHull *)g_streamPosGlob.pos;
  Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varClientMapTriggers->hullCount);
  varClientTriggerHull = v6;
  if ( hulls == (ClientTriggerHull *)-1i64 )
    DB_PopSharedData();
LABEL_15:
  v7 = varClientMapTriggers;
  slabs = varClientMapTriggers->slabs;
  if ( !slabs )
    return;
  if ( slabs == (TriggerSlab *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( slabs != (TriggerSlab *)-2i64 )
  {
    v7->slabs = (TriggerSlab *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varClientMapTriggers->slabs);
    return;
  }
  v9 = varTriggerSlab;
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  v7->slabs = (TriggerSlab *)g_streamPosGlob.pos;
  varTriggerSlab = (TriggerSlab *)g_streamPosGlob.pos;
  Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varClientMapTriggers->slabCount);
  varTriggerSlab = v9;
  if ( slabs == (TriggerSlab *)-1i64 )
    DB_PopSharedData();
}

/*
==============
Load_ClientMapTriggersArray
==============
*/
void Load_ClientMapTriggersArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientMapTriggers *i; 
  ClientMapTriggers *v4; 
  ClientTriggerModel *models; 
  ClientTriggerModel *v6; 
  ClientMapTriggers *v7; 
  ClientTriggerHull *hulls; 
  ClientTriggerHull *v9; 
  ClientMapTriggers *v10; 
  TriggerSlab *slabs; 
  TriggerSlab *v12; 

  v2 = count;
  Load_Stream(streamStart, varClientMapTriggers, 48 * count);
  for ( i = varClientMapTriggers; v2; --v2 )
  {
    varClientMapTriggers = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    v4 = varClientMapTriggers;
    models = varClientMapTriggers->models;
    if ( !models )
      goto LABEL_9;
    if ( models == (ClientTriggerModel *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( models != (ClientTriggerModel *)-2i64 )
    {
      v4->models = (ClientTriggerModel *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varClientMapTriggers->models);
      goto LABEL_9;
    }
    v6 = varClientTriggerModel;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->models = (ClientTriggerModel *)g_streamPosGlob.pos;
    varClientTriggerModel = (ClientTriggerModel *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varClientMapTriggers->count);
    varClientTriggerModel = v6;
    if ( models == (ClientTriggerModel *)-1i64 )
      DB_PopSharedData();
LABEL_9:
    v7 = varClientMapTriggers;
    hulls = varClientMapTriggers->hulls;
    if ( !hulls )
      goto LABEL_16;
    if ( hulls == (ClientTriggerHull *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( hulls != (ClientTriggerHull *)-2i64 )
    {
      v7->hulls = (ClientTriggerHull *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varClientMapTriggers->hulls);
      goto LABEL_16;
    }
    v9 = varClientTriggerHull;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v7->hulls = (ClientTriggerHull *)g_streamPosGlob.pos;
    varClientTriggerHull = (ClientTriggerHull *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varClientMapTriggers->hullCount);
    varClientTriggerHull = v9;
    if ( hulls == (ClientTriggerHull *)-1i64 )
      DB_PopSharedData();
LABEL_16:
    v10 = varClientMapTriggers;
    slabs = varClientMapTriggers->slabs;
    if ( slabs )
    {
      if ( slabs == (TriggerSlab *)-1i64 )
      {
        DB_PushSharedData();
LABEL_21:
        v12 = varTriggerSlab;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v10->slabs = (TriggerSlab *)g_streamPosGlob.pos;
        varTriggerSlab = (TriggerSlab *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varClientMapTriggers->slabCount);
        varTriggerSlab = v12;
        if ( slabs == (TriggerSlab *)-1i64 )
          DB_PopSharedData();
        goto LABEL_23;
      }
      if ( slabs == (TriggerSlab *)-2i64 )
        goto LABEL_21;
      v10->slabs = (TriggerSlab *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varClientMapTriggers->slabs);
    }
LABEL_23:
    ++i;
  }
}

/*
==============
Load_ClientMapTriggersStream
==============
*/
void Load_ClientMapTriggersStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ClientMapTriggers *v4; 
  ClientTriggerModel *models; 
  ClientTriggerModel *v6; 
  ClientMapTriggers *v7; 
  ClientTriggerHull *hulls; 
  ClientTriggerHull *v9; 
  ClientMapTriggers *v10; 
  TriggerSlab *slabs; 
  TriggerSlab *v12; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 9479, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varClientMapTriggers;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      v4 = varClientMapTriggers;
      models = varClientMapTriggers->models;
      if ( !models )
        goto LABEL_13;
      if ( models == (ClientTriggerModel *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( models != (ClientTriggerModel *)-2i64 )
      {
        v4->models = (ClientTriggerModel *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varClientMapTriggers->models);
        goto LABEL_13;
      }
      v6 = varClientTriggerModel;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->models = (ClientTriggerModel *)g_streamPosGlob.pos;
      varClientTriggerModel = (ClientTriggerModel *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varClientMapTriggers->count);
      varClientTriggerModel = v6;
      if ( models == (ClientTriggerModel *)-1i64 )
        DB_PopSharedData();
LABEL_13:
      v7 = varClientMapTriggers;
      hulls = varClientMapTriggers->hulls;
      if ( !hulls )
        goto LABEL_20;
      if ( hulls == (ClientTriggerHull *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( hulls != (ClientTriggerHull *)-2i64 )
      {
        v7->hulls = (ClientTriggerHull *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varClientMapTriggers->hulls);
        goto LABEL_20;
      }
      v9 = varClientTriggerHull;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v7->hulls = (ClientTriggerHull *)g_streamPosGlob.pos;
      varClientTriggerHull = (ClientTriggerHull *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varClientMapTriggers->hullCount);
      varClientTriggerHull = v9;
      if ( hulls == (ClientTriggerHull *)-1i64 )
        DB_PopSharedData();
LABEL_20:
      v10 = varClientMapTriggers;
      slabs = varClientMapTriggers->slabs;
      if ( slabs )
      {
        if ( slabs == (TriggerSlab *)-1i64 )
        {
          DB_PushSharedData();
LABEL_25:
          v12 = varTriggerSlab;
          DB_PatchMem_FixStreamAlignment(3ui64);
          DB_CheckCanIncStreamPos(0i64);
          v10->slabs = (TriggerSlab *)g_streamPosGlob.pos;
          varTriggerSlab = (TriggerSlab *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varClientMapTriggers->slabCount);
          varTriggerSlab = v12;
          if ( slabs == (TriggerSlab *)-1i64 )
            DB_PopSharedData();
          goto LABEL_27;
        }
        if ( slabs == (TriggerSlab *)-2i64 )
          goto LABEL_25;
        v10->slabs = (TriggerSlab *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varClientMapTriggers->slabs);
      }
LABEL_27:
      pos = g_streamPosGlob.pos;
      varClientMapTriggers = (ClientMapTriggers *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ClientOneshotEffectDef
==============
*/
void Load_ClientOneshotEffectDef(const DBStreamStart streamStart)
{
  FxCombinedDef *v1; 
  SndAliasLookup *v2; 

  Load_Stream(streamStart, varClientOneshotEffectDef, 0x38ui64);
  v1 = varFxCombinedDef;
  varFxCombinedDef = &varClientOneshotEffectDef->effect;
  Load_FxCombinedDef(NotAtStart);
  varFxCombinedDef = v1;
  v2 = varSndAliasLookup;
  varSndAliasLookup = &varClientOneshotEffectDef->effectSound;
  Load_SndAliasLookup(NotAtStart);
  varSndAliasLookup = v2;
}

/*
==============
Load_ClientOneshotEffectDefArray
==============
*/
void Load_ClientOneshotEffectDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientOneshotEffectDef *i; 
  FxCombinedDef *v4; 
  SndAliasLookup *v5; 

  v2 = count;
  Load_Stream(streamStart, varClientOneshotEffectDef, 56 * count);
  for ( i = varClientOneshotEffectDef; v2; --v2 )
  {
    varClientOneshotEffectDef = i;
    Load_Stream(NotAtStart, i, 0x38ui64);
    v4 = varFxCombinedDef;
    varFxCombinedDef = &varClientOneshotEffectDef->effect;
    Load_FxCombinedDef(NotAtStart);
    varFxCombinedDef = v4;
    v5 = varSndAliasLookup;
    varSndAliasLookup = &varClientOneshotEffectDef->effectSound;
    Load_SndAliasLookup(NotAtStart);
    ++i;
    varSndAliasLookup = v5;
  }
}

/*
==============
Load_ClientOneshotEffectDefStream
==============
*/
void Load_ClientOneshotEffectDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  FxCombinedDef *v4; 
  SndAliasLookup *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 15029, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varClientOneshotEffectDef;
    do
    {
      Load_Stream(AtStart, pos, 0x38ui64);
      v4 = varFxCombinedDef;
      varFxCombinedDef = &varClientOneshotEffectDef->effect;
      Load_FxCombinedDef(NotAtStart);
      varFxCombinedDef = v4;
      v5 = varSndAliasLookup;
      varSndAliasLookup = &varClientOneshotEffectDef->effectSound;
      Load_SndAliasLookup(NotAtStart);
      pos = g_streamPosGlob.pos;
      varClientOneshotEffectDef = (ClientOneshotEffectDef *)g_streamPosGlob.pos;
      varSndAliasLookup = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ClientReactiveEntDef
==============
*/
void Load_ClientReactiveEntDef(const DBStreamStart streamStart)
{
  FxCombinedDef *v1; 
  SndAliasLookup *v2; 
  ClientReactiveEntDef *v3; 
  SndAliasList *v4; 
  SndAliasList *SndAliasList; 

  Load_Stream(streamStart, varClientReactiveEntDef, 0x38ui64);
  v1 = varFxCombinedDef;
  varFxCombinedDef = &varClientReactiveEntDef->effect;
  Load_FxCombinedDef(NotAtStart);
  varFxCombinedDef = v1;
  v2 = varSndAliasLookup;
  varSndAliasLookup = &varClientReactiveEntDef->effectSound;
  Load_SndAliasLookup(NotAtStart);
  v3 = varClientReactiveEntDef;
  varSndAliasLookup = v2;
  if ( varClientReactiveEntDef->aliasList )
  {
    v4 = varSndAliasList;
    SndAliasList = AllocLoad_SndAliasList();
    v3->aliasList = SndAliasList;
    varSndAliasList = SndAliasList;
    Load_SndAliasList(AtStart);
    varSndAliasList = v4;
  }
}

/*
==============
Load_ClientReactiveEntDefArray
==============
*/
void Load_ClientReactiveEntDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientReactiveEntDef *i; 
  FxCombinedDef *v4; 
  SndAliasLookup *v5; 
  ClientReactiveEntDef *v6; 
  SndAliasList *v7; 
  SndAliasList *SndAliasList; 

  v2 = count;
  Load_Stream(streamStart, varClientReactiveEntDef, 56 * count);
  for ( i = varClientReactiveEntDef; v2; --v2 )
  {
    varClientReactiveEntDef = i;
    Load_Stream(NotAtStart, i, 0x38ui64);
    v4 = varFxCombinedDef;
    varFxCombinedDef = &varClientReactiveEntDef->effect;
    Load_FxCombinedDef(NotAtStart);
    varFxCombinedDef = v4;
    v5 = varSndAliasLookup;
    varSndAliasLookup = &varClientReactiveEntDef->effectSound;
    Load_SndAliasLookup(NotAtStart);
    v6 = varClientReactiveEntDef;
    varSndAliasLookup = v5;
    if ( varClientReactiveEntDef->aliasList )
    {
      v7 = varSndAliasList;
      SndAliasList = AllocLoad_SndAliasList();
      v6->aliasList = SndAliasList;
      varSndAliasList = SndAliasList;
      Load_SndAliasList(AtStart);
      varSndAliasList = v7;
    }
    ++i;
  }
}

/*
==============
Load_ClientReactiveEntDefStream
==============
*/
void Load_ClientReactiveEntDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  FxCombinedDef *v4; 
  SndAliasLookup *v5; 
  ClientReactiveEntDef *v6; 
  SndAliasList *v7; 
  SndAliasList *SndAliasList; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 14418, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varClientReactiveEntDef;
    do
    {
      Load_Stream(AtStart, pos, 0x38ui64);
      v4 = varFxCombinedDef;
      varFxCombinedDef = &varClientReactiveEntDef->effect;
      Load_FxCombinedDef(NotAtStart);
      varFxCombinedDef = v4;
      v5 = varSndAliasLookup;
      varSndAliasLookup = &varClientReactiveEntDef->effectSound;
      Load_SndAliasLookup(NotAtStart);
      v6 = varClientReactiveEntDef;
      varSndAliasLookup = v5;
      if ( varClientReactiveEntDef->aliasList )
      {
        v7 = varSndAliasList;
        SndAliasList = AllocLoad_SndAliasList();
        v6->aliasList = SndAliasList;
        varSndAliasList = SndAliasList;
        Load_SndAliasList(AtStart);
        varSndAliasList = v7;
      }
      pos = g_streamPosGlob.pos;
      varClientReactiveEntDef = (ClientReactiveEntDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ClientRootDef
==============
*/
void Load_ClientRootDef(const DBStreamStart streamStart)
{
  scr_string_t *v1; 

  Load_Stream(streamStart, varClientRootDef, 0x20ui64);
  v1 = varscr_string_t;
  varscr_string_t = &varClientRootDef->path;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = v1;
}

/*
==============
Load_ClientRootDefArray
==============
*/
void Load_ClientRootDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientRootDef *i; 
  scr_string_t *v4; 

  v2 = count;
  Load_Stream(streamStart, varClientRootDef, 32 * count);
  for ( i = varClientRootDef; v2; --v2 )
  {
    varClientRootDef = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    v4 = varscr_string_t;
    varscr_string_t = &varClientRootDef->path;
    Load_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v4;
  }
}

/*
==============
Load_ClientRootDefStream
==============
*/
void Load_ClientRootDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  scr_string_t *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 15177, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varClientRootDef;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      v4 = varscr_string_t;
      varscr_string_t = &varClientRootDef->path;
      Load_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varClientRootDef = (ClientRootDef *)g_streamPosGlob.pos;
      varscr_string_t = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ClientSideEffects
==============
*/
void Load_ClientSideEffects(const DBStreamStart streamStart)
{
  ClientSideEffects *v1; 
  ClientOneshotEffectDef *v2; 
  __int64 oneshotEffectCount; 
  ClientOneshotEffectDef *i; 
  FxCombinedDef *v5; 
  SndAliasLookup *v6; 
  SpatialPartition_Tree *v7; 
  SpatialPartition_Tree *SpatialPartition_Tree; 
  unsigned int *v9; 
  unsigned int *uint; 
  ClientExploderDef *v11; 
  __int64 exploderCount; 
  ClientExploderDef *j; 
  ClientIntervalSoundDef *v14; 
  __int64 intervalSoundCount; 
  ClientIntervalSoundDef *k; 
  SndAliasLookup *v17; 
  ClientIntervalSoundDef *v18; 
  SndAliasList *v19; 
  SndAliasList *SndAliasList; 
  ClientLoopSoundDef *v21; 
  __int64 loopSoundCount; 
  ClientLoopSoundDef *m; 
  SndAliasLookup *v24; 
  ClientLoopSoundDef *v25; 
  SndAliasList *v26; 
  SndAliasList *v27; 
  SpatialPartition_Tree *v28; 
  SpatialPartition_Tree *v29; 
  ClientReactiveEntDef *v30; 
  __int64 reactiveEntCount; 
  ClientReactiveEntDef *n; 
  SpatialPartition_Tree *v33; 
  SpatialPartition_Tree *v34; 
  ClientRootDef *v35; 
  __int64 rootCount; 
  ClientRootDef *ii; 
  scr_string_t *v38; 
  unsigned __int16 *v39; 
  unsigned __int16 *ushort; 

  Load_Stream(streamStart, varClientSideEffects, 0x98ui64);
  v1 = varClientSideEffects;
  if ( varClientSideEffects->oneshotEffects )
  {
    v2 = varClientOneshotEffectDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->oneshotEffects = (ClientOneshotEffectDef *)g_streamPosGlob.pos;
    varClientOneshotEffectDef = (ClientOneshotEffectDef *)g_streamPosGlob.pos;
    oneshotEffectCount = varClientSideEffects->oneshotEffectCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 56 * oneshotEffectCount);
    for ( i = varClientOneshotEffectDef; oneshotEffectCount; --oneshotEffectCount )
    {
      varClientOneshotEffectDef = i;
      Load_Stream(NotAtStart, i, 0x38ui64);
      v5 = varFxCombinedDef;
      varFxCombinedDef = &varClientOneshotEffectDef->effect;
      Load_FxCombinedDef(NotAtStart);
      varFxCombinedDef = v5;
      v6 = varSndAliasLookup;
      varSndAliasLookup = &varClientOneshotEffectDef->effectSound;
      Load_SndAliasLookup(NotAtStart);
      ++i;
      varSndAliasLookup = v6;
    }
    v1 = varClientSideEffects;
    varClientOneshotEffectDef = v2;
  }
  if ( v1->oneshotEffectsTree )
  {
    v7 = varSpatialPartition_Tree;
    SpatialPartition_Tree = AllocLoad_SpatialPartition_Tree();
    v1->oneshotEffectsTree = SpatialPartition_Tree;
    varSpatialPartition_Tree = SpatialPartition_Tree;
    Load_SpatialPartition_Tree(AtStart);
    v1 = varClientSideEffects;
    varSpatialPartition_Tree = v7;
  }
  if ( v1->oneshotSoundIndices )
  {
    v9 = varuint;
    uint = AllocLoad_uint();
    v1->oneshotSoundIndices = uint;
    varuint = uint;
    Load_uintArray(AtStart, varClientSideEffects->oneshotSoundCount);
    v1 = varClientSideEffects;
    varuint = v9;
  }
  if ( v1->exploders )
  {
    v11 = varClientExploderDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->exploders = (ClientExploderDef *)g_streamPosGlob.pos;
    varClientExploderDef = (ClientExploderDef *)g_streamPosGlob.pos;
    exploderCount = varClientSideEffects->exploderCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, exploderCount << 6);
    for ( j = varClientExploderDef; exploderCount; --exploderCount )
    {
      varClientExploderDef = j;
      Load_ClientExploderDef(NotAtStart);
      ++j;
    }
    v1 = varClientSideEffects;
    varClientExploderDef = v11;
  }
  if ( v1->intervalSounds )
  {
    v14 = varClientIntervalSoundDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->intervalSounds = (ClientIntervalSoundDef *)g_streamPosGlob.pos;
    varClientIntervalSoundDef = (ClientIntervalSoundDef *)g_streamPosGlob.pos;
    intervalSoundCount = varClientSideEffects->intervalSoundCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 48 * intervalSoundCount);
    for ( k = varClientIntervalSoundDef; intervalSoundCount; --intervalSoundCount )
    {
      varClientIntervalSoundDef = k;
      Load_Stream(NotAtStart, k, 0x30ui64);
      v17 = varSndAliasLookup;
      varSndAliasLookup = &varClientIntervalSoundDef->effectSound;
      Load_SndAliasLookup(NotAtStart);
      v18 = varClientIntervalSoundDef;
      varSndAliasLookup = v17;
      if ( varClientIntervalSoundDef->aliasList )
      {
        v19 = varSndAliasList;
        SndAliasList = AllocLoad_SndAliasList();
        v18->aliasList = SndAliasList;
        varSndAliasList = SndAliasList;
        Load_SndAliasList(AtStart);
        varSndAliasList = v19;
      }
      ++k;
    }
    v1 = varClientSideEffects;
    varClientIntervalSoundDef = v14;
  }
  if ( v1->loopSounds )
  {
    v21 = varClientLoopSoundDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->loopSounds = (ClientLoopSoundDef *)g_streamPosGlob.pos;
    varClientLoopSoundDef = (ClientLoopSoundDef *)g_streamPosGlob.pos;
    loopSoundCount = varClientSideEffects->loopSoundCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 40 * loopSoundCount);
    for ( m = varClientLoopSoundDef; loopSoundCount; --loopSoundCount )
    {
      varClientLoopSoundDef = m;
      Load_Stream(NotAtStart, m, 0x28ui64);
      v24 = varSndAliasLookup;
      varSndAliasLookup = &varClientLoopSoundDef->effectSound;
      Load_SndAliasLookup(NotAtStart);
      v25 = varClientLoopSoundDef;
      varSndAliasLookup = v24;
      if ( varClientLoopSoundDef->aliasList )
      {
        v26 = varSndAliasList;
        v27 = AllocLoad_SndAliasList();
        v25->aliasList = v27;
        varSndAliasList = v27;
        Load_SndAliasList(AtStart);
        varSndAliasList = v26;
      }
      ++m;
    }
    v1 = varClientSideEffects;
    varClientLoopSoundDef = v21;
  }
  if ( v1->soundsSpatialTree )
  {
    v28 = varSpatialPartition_Tree;
    v29 = AllocLoad_SpatialPartition_Tree();
    v1->soundsSpatialTree = v29;
    varSpatialPartition_Tree = v29;
    Load_SpatialPartition_Tree(AtStart);
    v1 = varClientSideEffects;
    varSpatialPartition_Tree = v28;
  }
  if ( v1->reactiveEnts )
  {
    v30 = varClientReactiveEntDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->reactiveEnts = (ClientReactiveEntDef *)g_streamPosGlob.pos;
    varClientReactiveEntDef = (ClientReactiveEntDef *)g_streamPosGlob.pos;
    reactiveEntCount = varClientSideEffects->reactiveEntCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 56 * reactiveEntCount);
    for ( n = varClientReactiveEntDef; reactiveEntCount; --reactiveEntCount )
    {
      varClientReactiveEntDef = n;
      Load_ClientReactiveEntDef(NotAtStart);
      ++n;
    }
    v1 = varClientSideEffects;
    varClientReactiveEntDef = v30;
  }
  if ( v1->reactiveSpatialTree )
  {
    v33 = varSpatialPartition_Tree;
    v34 = AllocLoad_SpatialPartition_Tree();
    v1->reactiveSpatialTree = v34;
    varSpatialPartition_Tree = v34;
    Load_SpatialPartition_Tree(AtStart);
    v1 = varClientSideEffects;
    varSpatialPartition_Tree = v33;
  }
  if ( v1->roots )
  {
    v35 = varClientRootDef;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->roots = (ClientRootDef *)g_streamPosGlob.pos;
    varClientRootDef = (ClientRootDef *)g_streamPosGlob.pos;
    rootCount = varClientSideEffects->rootCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32 * rootCount);
    for ( ii = varClientRootDef; rootCount; --rootCount )
    {
      varClientRootDef = ii;
      Load_Stream(NotAtStart, ii, 0x20ui64);
      v38 = varscr_string_t;
      varscr_string_t = &varClientRootDef->path;
      Load_scr_string_t(NotAtStart);
      ++ii;
      varscr_string_t = v38;
    }
    v1 = varClientSideEffects;
    varClientRootDef = v35;
  }
  if ( v1->parents )
  {
    v39 = varushort;
    ushort = AllocLoad_ushort();
    v1->parents = ushort;
    varushort = ushort;
    Load_ushortArray(AtStart, varClientSideEffects->parentCount);
    varushort = v39;
  }
}

/*
==============
Load_ClientSideEffectsArray
==============
*/
void Load_ClientSideEffectsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientSideEffects *i; 

  v2 = count;
  Load_Stream(streamStart, varClientSideEffects, 152 * count);
  for ( i = varClientSideEffects; v2; --v2 )
  {
    varClientSideEffects = i;
    Load_ClientSideEffects(NotAtStart);
    ++i;
  }
}

/*
==============
Load_ClientSideEffectsStream
==============
*/
void Load_ClientSideEffectsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 15703, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Load_ClientSideEffects(AtStart);
    varClientSideEffects = (ClientSideEffects *)g_streamPosGlob.pos;
  }
}

/*
==============
Load_ClientTriggerBlend
==============
*/
void Load_ClientTriggerBlend(const DBStreamStart streamStart)
{
  ClientTriggerBlend *v1; 
  ClientTriggerBlendNode *v2; 

  Load_Stream(streamStart, varClientTriggerBlend, 0x10ui64);
  v1 = varClientTriggerBlend;
  if ( varClientTriggerBlend->blendNodes )
  {
    v2 = varClientTriggerBlendNode;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->blendNodes = (ClientTriggerBlendNode *)g_streamPosGlob.pos;
    varClientTriggerBlendNode = (ClientTriggerBlendNode *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varClientTriggerBlend->numClientTriggerBlendNodes);
    varClientTriggerBlendNode = v2;
  }
}

/*
==============
Load_ClientTriggerBlendArray
==============
*/
void Load_ClientTriggerBlendArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientTriggerBlend *i; 
  ClientTriggerBlend *v4; 
  ClientTriggerBlendNode *v5; 

  v2 = count;
  Load_Stream(streamStart, varClientTriggerBlend, 16 * count);
  for ( i = varClientTriggerBlend; v2; --v2 )
  {
    varClientTriggerBlend = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    v4 = varClientTriggerBlend;
    if ( varClientTriggerBlend->blendNodes )
    {
      v5 = varClientTriggerBlendNode;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->blendNodes = (ClientTriggerBlendNode *)g_streamPosGlob.pos;
      varClientTriggerBlendNode = (ClientTriggerBlendNode *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varClientTriggerBlend->numClientTriggerBlendNodes);
      varClientTriggerBlendNode = v5;
    }
    ++i;
  }
}

/*
==============
Load_ClientTriggerBlendNode
==============
*/
void Load_ClientTriggerBlendNode(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varClientTriggerBlendNode, 0x1Cui64);
}

/*
==============
Load_ClientTriggerBlendNodeArray
==============
*/
void Load_ClientTriggerBlendNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varClientTriggerBlendNode, 28 * count);
}

/*
==============
Load_ClientTriggerBlendNodeStream
==============
*/
void Load_ClientTriggerBlendNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 10395, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varClientTriggerBlendNode;
    do
    {
      Load_Stream(AtStart, pos, 0x1Cui64);
      pos = g_streamPosGlob.pos;
      varClientTriggerBlendNode = (ClientTriggerBlendNode *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ClientTriggerBlendStream
==============
*/
void Load_ClientTriggerBlendStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ClientTriggerBlend *v4; 
  ClientTriggerBlendNode *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 10498, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varClientTriggerBlend;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      v4 = varClientTriggerBlend;
      if ( varClientTriggerBlend->blendNodes )
      {
        v5 = varClientTriggerBlendNode;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->blendNodes = (ClientTriggerBlendNode *)g_streamPosGlob.pos;
        varClientTriggerBlendNode = (ClientTriggerBlendNode *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varClientTriggerBlend->numClientTriggerBlendNodes);
        varClientTriggerBlendNode = v5;
      }
      pos = g_streamPosGlob.pos;
      varClientTriggerBlend = (ClientTriggerBlend *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ClientTriggerHull
==============
*/
void Load_ClientTriggerHull(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varClientTriggerHull, 0x20ui64);
}

/*
==============
Load_ClientTriggerHullArray
==============
*/
void Load_ClientTriggerHullArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varClientTriggerHull, 32 * count);
}

/*
==============
Load_ClientTriggerHullStream
==============
*/
void Load_ClientTriggerHullStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 8624, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varClientTriggerHull;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      pos = g_streamPosGlob.pos;
      varClientTriggerHull = (ClientTriggerHull *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ClientTriggerModel
==============
*/
void Load_ClientTriggerModel(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varClientTriggerModel, 0xCui64);
}

/*
==============
Load_ClientTriggerModelArray
==============
*/
void Load_ClientTriggerModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varClientTriggerModel, 12 * count);
}

/*
==============
Load_ClientTriggerModelStream
==============
*/
void Load_ClientTriggerModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 8747, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varClientTriggerModel;
    do
    {
      Load_Stream(AtStart, pos, 0xCui64);
      pos = g_streamPosGlob.pos;
      varClientTriggerModel = (ClientTriggerModel *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ClientTriggers
==============
*/
void Load_ClientTriggers(const DBStreamStart streamStart)
{
  ClientMapTriggers *v1; 
  ClientTriggers *v2; 
  char *v3; 
  char *v4; 
  __int16 *v5; 
  __int16 *v6; 
  unsigned __int16 *v7; 
  unsigned __int16 *uint16_t; 
  vec3_t *v9; 
  vec3_t *vec3_t; 
  float *v11; 
  float *v12; 
  float *v13; 
  __int16 *v14; 
  __int16 *v15; 
  __int16 *v16; 
  __int16 *v17; 
  __int16 *v18; 
  __int16 *v19; 
  __int16 *v20; 
  __int16 *v21; 
  SndBankTransient **v22; 
  SndBankTransient **SndBankTransientPtr; 
  CTAudRvbPanInfo *v24; 
  __int16 *v25; 
  __int16 *v26; 
  ClientEntityLinkToDef **v27; 
  __int64 count; 
  ClientEntityLinkToDef **i; 
  SpatialPartition_Tree *v30; 
  SpatialPartition_Tree *SpatialPartition_Tree; 

  Load_Stream(streamStart, varClientTriggers, 0xB0ui64);
  v1 = varClientMapTriggers;
  varClientMapTriggers = &varClientTriggers->trigger;
  Load_ClientMapTriggers(NotAtStart);
  v2 = varClientTriggers;
  varClientMapTriggers = v1;
  if ( varClientTriggers->triggerString )
  {
    v3 = varchar;
    v4 = AllocLoad_char();
    v2->triggerString = v4;
    varchar = v4;
    Load_charArray(AtStart, varClientTriggers->triggerStringLength);
    v2 = varClientTriggers;
    varchar = v3;
  }
  if ( v2->visionSetTriggers )
  {
    v5 = varshort;
    v6 = AllocLoad_short();
    v2->visionSetTriggers = v6;
    varshort = v6;
    Load_shortArray(AtStart, varClientTriggers->trigger.count);
    v2 = varClientTriggers;
    varshort = v5;
  }
  if ( v2->triggerType )
  {
    v7 = varuint16_t;
    uint16_t = AllocLoad_uint16_t();
    v2->triggerType = uint16_t;
    varuint16_t = uint16_t;
    Load_uint16_tArray(AtStart, varClientTriggers->trigger.count);
    v2 = varClientTriggers;
    varuint16_t = v7;
  }
  if ( v2->origins )
  {
    v9 = varvec3_t;
    vec3_t = AllocLoad_vec3_t();
    v2->origins = vec3_t;
    varvec3_t = vec3_t;
    Load_vec3_tArray(AtStart, varClientTriggers->trigger.count);
    v2 = varClientTriggers;
    varvec3_t = v9;
  }
  v11 = varfloat;
  if ( v2->scriptDelay )
  {
    v12 = AllocLoad_float();
    v2->scriptDelay = v12;
    varfloat = v12;
    Load_floatArray(AtStart, varClientTriggers->trigger.count);
    v2 = varClientTriggers;
    varfloat = v11;
  }
  if ( v2->priority )
  {
    v13 = AllocLoad_float();
    v2->priority = v13;
    varfloat = v13;
    Load_floatArray(AtStart, varClientTriggers->trigger.count);
    v2 = varClientTriggers;
    varfloat = v11;
  }
  if ( v2->audioTriggers )
  {
    v14 = varshort;
    v15 = AllocLoad_short();
    v2->audioTriggers = v15;
    varshort = v15;
    Load_shortArray(AtStart, varClientTriggers->trigger.count);
    v2 = varClientTriggers;
    varshort = v14;
  }
  if ( v2->blendLookup )
  {
    v16 = varshort;
    v17 = AllocLoad_short();
    v2->blendLookup = v17;
    varshort = v17;
    Load_shortArray(AtStart, varClientTriggers->trigger.count);
    v2 = varClientTriggers;
    varshort = v16;
  }
  if ( v2->npcTriggers )
  {
    v18 = varshort;
    v19 = AllocLoad_short();
    v2->npcTriggers = v19;
    varshort = v19;
    Load_shortArray(AtStart, varClientTriggers->trigger.count);
    v2 = varClientTriggers;
    varshort = v18;
  }
  if ( v2->audioStateIds )
  {
    v20 = varshort;
    v21 = AllocLoad_short();
    v2->audioStateIds = v21;
    varshort = v21;
    Load_shortArray(AtStart, varClientTriggers->trigger.count);
    v2 = varClientTriggers;
    varshort = v20;
  }
  if ( v2->detailSoundBank )
  {
    v22 = varSndBankTransientPtr;
    SndBankTransientPtr = AllocLoad_SndBankTransientPtr();
    v2->detailSoundBank = SndBankTransientPtr;
    varSndBankTransientPtr = SndBankTransientPtr;
    Load_SndBankTransientPtrArray(AtStart, varClientTriggers->trigger.count);
    v2 = varClientTriggers;
    varSndBankTransientPtr = v22;
  }
  if ( v2->audioRvbPanInfo )
  {
    v24 = varCTAudRvbPanInfo;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->audioRvbPanInfo = (CTAudRvbPanInfo *)g_streamPosGlob.pos;
    varCTAudRvbPanInfo = (CTAudRvbPanInfo *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 24i64 * varClientTriggers->trigger.count);
    v2 = varClientTriggers;
    varCTAudRvbPanInfo = v24;
  }
  if ( v2->parent )
  {
    v25 = varshort;
    v26 = AllocLoad_short();
    v2->parent = v26;
    varshort = v26;
    Load_shortArray(AtStart, varClientTriggers->trigger.count);
    v2 = varClientTriggers;
    varshort = v25;
  }
  if ( v2->linkTo )
  {
    v27 = varClientEntityLinkToDefPtr;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->linkTo = (ClientEntityLinkToDef **)g_streamPosGlob.pos;
    varClientEntityLinkToDefPtr = (ClientEntityLinkToDef **)g_streamPosGlob.pos;
    count = varClientTriggers->trigger.count;
    Load_Stream(AtStart, g_streamPosGlob.pos, 8 * count);
    for ( i = varClientEntityLinkToDefPtr; count; --count )
    {
      varClientEntityLinkToDefPtr = i;
      Load_ClientEntityLinkToDefPtr(NotAtStart);
      ++i;
    }
    v2 = varClientTriggers;
    varClientEntityLinkToDefPtr = v27;
  }
  if ( v2->spatialTree )
  {
    v30 = varSpatialPartition_Tree;
    SpatialPartition_Tree = AllocLoad_SpatialPartition_Tree();
    v2->spatialTree = SpatialPartition_Tree;
    varSpatialPartition_Tree = SpatialPartition_Tree;
    Load_SpatialPartition_Tree(AtStart);
    varSpatialPartition_Tree = v30;
  }
}

/*
==============
Load_ClientTriggersArray
==============
*/
void Load_ClientTriggersArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientTriggers *i; 

  v2 = count;
  Load_Stream(streamStart, varClientTriggers, 176 * count);
  for ( i = varClientTriggers; v2; --v2 )
  {
    varClientTriggers = i;
    Load_ClientTriggers(NotAtStart);
    ++i;
  }
}

/*
==============
Load_ClientTriggersStream
==============
*/
void Load_ClientTriggersStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 10249, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Load_ClientTriggers(AtStart);
    varClientTriggers = (ClientTriggers *)g_streamPosGlob.pos;
  }
}

/*
==============
Load_CollMapLookupEntry
==============
*/
void Load_CollMapLookupEntry(const DBStreamStart streamStart)
{
  const char **v1; 

  Load_Stream(streamStart, varCollMapLookupEntry, 0x10ui64);
  v1 = varXString;
  varXString = &varCollMapLookupEntry->targetName;
  Load_XString(NotAtStart);
  varXString = v1;
}

/*
==============
Load_CollMapLookupEntryArray
==============
*/
void Load_CollMapLookupEntryArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  CollMapLookupEntry *i; 
  const char **v4; 

  v2 = count;
  Load_Stream(streamStart, varCollMapLookupEntry, 16 * count);
  for ( i = varCollMapLookupEntry; v2; --v2 )
  {
    varCollMapLookupEntry = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    v4 = varXString;
    varXString = &varCollMapLookupEntry->targetName;
    Load_XString(NotAtStart);
    ++i;
    varXString = v4;
  }
}

/*
==============
Load_CollMapLookupEntryStream
==============
*/
void Load_CollMapLookupEntryStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 17173, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varCollMapLookupEntry;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      v4 = varXString;
      varXString = &varCollMapLookupEntry->targetName;
      Load_XString(NotAtStart);
      pos = g_streamPosGlob.pos;
      varCollMapLookupEntry = (CollMapLookupEntry *)g_streamPosGlob.pos;
      varXString = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_CollisionHeatmapEntry
==============
*/
void Load_CollisionHeatmapEntry(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varCollisionHeatmapEntry, 0x20ui64);
}

/*
==============
Load_CollisionHeatmapEntryArray
==============
*/
void Load_CollisionHeatmapEntryArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varCollisionHeatmapEntry, 32 * count);
}

/*
==============
Load_CollisionHeatmapEntryStream
==============
*/
void Load_CollisionHeatmapEntryStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 12814, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varCollisionHeatmapEntry;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      pos = g_streamPosGlob.pos;
      varCollisionHeatmapEntry = (CollisionHeatmapEntry *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_CollisionTileArray
==============
*/
void Load_CollisionTileArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  CollisionTile *i; 
  const char **v4; 
  CollisionTile *v5; 
  StaticModelCollisionCompressedModelList *v6; 
  char *v7; 
  char *v8; 
  char *v9; 

  v2 = count;
  Load_Stream(streamStart, varCollisionTile, 72 * count);
  for ( i = varCollisionTile; v2; --v2 )
  {
    varCollisionTile = i;
    DB_PatchMem_PushAsset(103, i);
    Load_Stream(NotAtStart, varCollisionTile, 0x48ui64);
    DB_PushStreamPos(8u);
    v4 = varXString;
    varXString = &varCollisionTile->name;
    Load_XString(NotAtStart);
    varXString = v4;
    v5 = varCollisionTile;
    if ( varCollisionTile->staticModelCollision )
    {
      v6 = varStaticModelCollisionCompressedModelList;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v5->staticModelCollision = (StaticModelCollisionCompressedModelList *)g_streamPosGlob.pos;
      varStaticModelCollisionCompressedModelList = (StaticModelCollisionCompressedModelList *)g_streamPosGlob.pos;
      Load_StaticModelCollisionCompressedModelList(AtStart);
      v5 = varCollisionTile;
      varStaticModelCollisionCompressedModelList = v6;
    }
    if ( v5->havokTileShapeData )
    {
      v7 = varalignHavokShapeData_t;
      DB_PatchMem_FixStreamAlignment(0xFui64);
      DB_CheckCanIncStreamPos(0i64);
      v5->havokTileShapeData = (char *)g_streamPosGlob.pos;
      varalignHavokShapeData_t = (char *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, varCollisionTile->havokTileShapeDataSize);
      v5 = varCollisionTile;
      varalignHavokShapeData_t = v7;
    }
    if ( v5->havokTileShapePointer )
    {
      v8 = varchar;
      v9 = AllocLoad_char();
      v5->havokTileShapePointer = v9;
      varchar = v9;
      Load_char(AtStart);
      varchar = v8;
    }
    DB_PopStreamPos();
    DB_PatchMem_PopAsset();
    ++i;
  }
}

/*
==============
Load_CollisionTilePtr
==============
*/
void Load_CollisionTilePtr(const DBStreamStart streamStart)
{
  CollisionTile **v1; 
  __int64 v2; 
  CollisionTile *v3; 
  unsigned __int8 *inserted; 

  Load_Stream(streamStart, varCollisionTilePtr, 8ui64);
  DB_PushStreamPos(1u);
  v1 = varCollisionTilePtr;
  v2 = (__int64)*varCollisionTilePtr;
  if ( *varCollisionTilePtr )
  {
    if ( v2 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v2 != -2 && v2 != -3 )
    {
      DB_ConvertOffsetToAlias((unsigned __int64 *)varCollisionTilePtr);
      goto LABEL_6;
    }
    v3 = varCollisionTile;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    inserted = NULL;
    *v1 = (CollisionTile *)g_streamPosGlob.pos;
    varCollisionTile = (CollisionTile *)g_streamPosGlob.pos;
    if ( v2 == -3 )
      inserted = DB_InsertPointer();
    Load_CollisionTile(AtStart);
    Load_CollisionTile(v1);
    varCollisionTile = v3;
    if ( inserted )
      *(_QWORD *)inserted = *v1;
    if ( v2 == -1 )
      DB_PopSharedData();
  }
LABEL_6:
  DB_PopStreamPos();
}

/*
==============
Load_CollisionTilePtrArray
==============
*/
void Load_CollisionTilePtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  CollisionTile **i; 
  CollisionTile **v4; 
  __int64 v5; 
  CollisionTile *v6; 
  unsigned __int8 *inserted; 

  v2 = count;
  Load_Stream(streamStart, varCollisionTilePtr, 8 * count);
  for ( i = varCollisionTilePtr; v2; --v2 )
  {
    varCollisionTilePtr = i;
    Load_Stream(NotAtStart, i, 8ui64);
    DB_PushStreamPos(1u);
    v4 = varCollisionTilePtr;
    v5 = (__int64)*varCollisionTilePtr;
    if ( *varCollisionTilePtr )
    {
      if ( v5 == -1 )
      {
        DB_PushSharedData();
LABEL_8:
        v6 = varCollisionTile;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        inserted = NULL;
        *v4 = (CollisionTile *)g_streamPosGlob.pos;
        varCollisionTile = (CollisionTile *)g_streamPosGlob.pos;
        if ( v5 == -3 )
          inserted = DB_InsertPointer();
        Load_CollisionTile(AtStart);
        Load_CollisionTile(v4);
        varCollisionTile = v6;
        if ( inserted )
          *(_QWORD *)inserted = *v4;
        if ( v5 == -1 )
          DB_PopSharedData();
        goto LABEL_14;
      }
      if ( v5 == -2 || v5 == -3 )
        goto LABEL_8;
      DB_ConvertOffsetToAlias((unsigned __int64 *)varCollisionTilePtr);
    }
LABEL_14:
    DB_PopStreamPos();
    ++i;
  }
}

/*
==============
Load_CollisionTilePtrStream
==============
*/
void Load_CollisionTilePtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  CollisionTile **v4; 
  __int64 v5; 
  CollisionTile *v6; 
  unsigned __int8 *inserted; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 19657, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varCollisionTilePtr;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      DB_PushStreamPos(1u);
      v4 = varCollisionTilePtr;
      v5 = (__int64)*varCollisionTilePtr;
      if ( *varCollisionTilePtr )
      {
        if ( v5 == -1 )
        {
          DB_PushSharedData();
LABEL_12:
          v6 = varCollisionTile;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          inserted = NULL;
          *v4 = (CollisionTile *)g_streamPosGlob.pos;
          varCollisionTile = (CollisionTile *)g_streamPosGlob.pos;
          if ( v5 == -3 )
            inserted = DB_InsertPointer();
          Load_CollisionTile(AtStart);
          Load_CollisionTile(v4);
          varCollisionTile = v6;
          if ( inserted )
            *(_QWORD *)inserted = *v4;
          if ( v5 == -1 )
            DB_PopSharedData();
          goto LABEL_18;
        }
        if ( v5 == -2 || v5 == -3 )
          goto LABEL_12;
        DB_ConvertOffsetToAlias((unsigned __int64 *)varCollisionTilePtr);
      }
LABEL_18:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varCollisionTilePtr = (CollisionTile **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_CollisionTileStream
==============
*/
void Load_CollisionTileStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 
  CollisionTile *v5; 
  StaticModelCollisionCompressedModelList *v6; 
  char *v7; 
  char *v8; 
  char *v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 19533, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varCollisionTile;
    do
    {
      DB_PatchMem_PushAsset(103, pos);
      Load_Stream(AtStart, varCollisionTile, 0x48ui64);
      DB_PushStreamPos(8u);
      v4 = varXString;
      varXString = &varCollisionTile->name;
      Load_XString(NotAtStart);
      varXString = v4;
      v5 = varCollisionTile;
      if ( varCollisionTile->staticModelCollision )
      {
        v6 = varStaticModelCollisionCompressedModelList;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v5->staticModelCollision = (StaticModelCollisionCompressedModelList *)g_streamPosGlob.pos;
        varStaticModelCollisionCompressedModelList = (StaticModelCollisionCompressedModelList *)g_streamPosGlob.pos;
        Load_StaticModelCollisionCompressedModelList(AtStart);
        v5 = varCollisionTile;
        varStaticModelCollisionCompressedModelList = v6;
      }
      if ( v5->havokTileShapeData )
      {
        v7 = varalignHavokShapeData_t;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        v5->havokTileShapeData = (char *)g_streamPosGlob.pos;
        varalignHavokShapeData_t = (char *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, varCollisionTile->havokTileShapeDataSize);
        v5 = varCollisionTile;
        varalignHavokShapeData_t = v7;
      }
      if ( v5->havokTileShapePointer )
      {
        v8 = varchar;
        v9 = AllocLoad_char();
        v5->havokTileShapePointer = v9;
        varchar = v9;
        Load_char(AtStart);
        varchar = v8;
      }
      DB_PopStreamPos();
      DB_PatchMem_PopAsset();
      pos = g_streamPosGlob.pos;
      varCollisionTile = (CollisionTile *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_CreateFxAssetData
==============
*/
void Load_CreateFxAssetData(const DBStreamStart streamStart)
{
  CreateFxAssetData *v1; 
  CreateFxPaletteDef *v2; 
  __int64 fxPaletteCount; 
  CreateFxPaletteDef *i; 
  scr_string_t *v5; 

  Load_Stream(streamStart, varCreateFxAssetData, 0x10ui64);
  v1 = varCreateFxAssetData;
  if ( varCreateFxAssetData->fxPalette )
  {
    v2 = varCreateFxPaletteDef;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->fxPalette = (CreateFxPaletteDef *)g_streamPosGlob.pos;
    varCreateFxPaletteDef = (CreateFxPaletteDef *)g_streamPosGlob.pos;
    fxPaletteCount = varCreateFxAssetData->fxPaletteCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 12 * fxPaletteCount);
    for ( i = varCreateFxPaletteDef; fxPaletteCount; --fxPaletteCount )
    {
      varCreateFxPaletteDef = i;
      Load_Stream(NotAtStart, i, 0xCui64);
      v5 = varscr_string_t;
      varscr_string_t = &varCreateFxPaletteDef->aliasName;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = &varCreateFxPaletteDef->effectPath;
      Load_scr_string_t(NotAtStart);
      ++i;
      varscr_string_t = v5;
    }
    varCreateFxPaletteDef = v2;
  }
}

/*
==============
Load_CreateFxAssetDataArray
==============
*/
void Load_CreateFxAssetDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  CreateFxAssetData *i; 
  CreateFxAssetData *v4; 
  CreateFxPaletteDef *v5; 
  __int64 fxPaletteCount; 
  CreateFxPaletteDef *j; 
  scr_string_t *v8; 

  v2 = count;
  Load_Stream(streamStart, varCreateFxAssetData, 16 * count);
  for ( i = varCreateFxAssetData; v2; --v2 )
  {
    varCreateFxAssetData = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    v4 = varCreateFxAssetData;
    if ( varCreateFxAssetData->fxPalette )
    {
      v5 = varCreateFxPaletteDef;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->fxPalette = (CreateFxPaletteDef *)g_streamPosGlob.pos;
      varCreateFxPaletteDef = (CreateFxPaletteDef *)g_streamPosGlob.pos;
      fxPaletteCount = varCreateFxAssetData->fxPaletteCount;
      Load_Stream(AtStart, g_streamPosGlob.pos, 12 * fxPaletteCount);
      for ( j = varCreateFxPaletteDef; fxPaletteCount; --fxPaletteCount )
      {
        varCreateFxPaletteDef = j;
        Load_Stream(NotAtStart, j, 0xCui64);
        v8 = varscr_string_t;
        varscr_string_t = &varCreateFxPaletteDef->aliasName;
        Load_scr_string_t(NotAtStart);
        varscr_string_t = &varCreateFxPaletteDef->effectPath;
        Load_scr_string_t(NotAtStart);
        ++j;
        varscr_string_t = v8;
      }
      varCreateFxPaletteDef = v5;
    }
    ++i;
  }
}

/*
==============
Load_CreateFxAssetDataStream
==============
*/
void Load_CreateFxAssetDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  CreateFxAssetData *v4; 
  CreateFxPaletteDef *v5; 
  __int64 fxPaletteCount; 
  CreateFxPaletteDef *i; 
  scr_string_t *v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 15933, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varCreateFxAssetData;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      v4 = varCreateFxAssetData;
      if ( varCreateFxAssetData->fxPalette )
      {
        v5 = varCreateFxPaletteDef;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->fxPalette = (CreateFxPaletteDef *)g_streamPosGlob.pos;
        varCreateFxPaletteDef = (CreateFxPaletteDef *)g_streamPosGlob.pos;
        fxPaletteCount = varCreateFxAssetData->fxPaletteCount;
        Load_Stream(AtStart, g_streamPosGlob.pos, 12 * fxPaletteCount);
        for ( i = varCreateFxPaletteDef; fxPaletteCount; --fxPaletteCount )
        {
          varCreateFxPaletteDef = i;
          Load_Stream(NotAtStart, i, 0xCui64);
          v8 = varscr_string_t;
          varscr_string_t = &varCreateFxPaletteDef->aliasName;
          Load_scr_string_t(NotAtStart);
          varscr_string_t = &varCreateFxPaletteDef->effectPath;
          Load_scr_string_t(NotAtStart);
          ++i;
          varscr_string_t = v8;
        }
        varCreateFxPaletteDef = v5;
      }
      pos = g_streamPosGlob.pos;
      varCreateFxAssetData = (CreateFxAssetData *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_CreateFxPaletteDef
==============
*/
void Load_CreateFxPaletteDef(const DBStreamStart streamStart)
{
  scr_string_t *v1; 

  Load_Stream(streamStart, varCreateFxPaletteDef, 0xCui64);
  v1 = varscr_string_t;
  varscr_string_t = &varCreateFxPaletteDef->aliasName;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = &varCreateFxPaletteDef->effectPath;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = v1;
}

/*
==============
Load_CreateFxPaletteDefArray
==============
*/
void Load_CreateFxPaletteDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  CreateFxPaletteDef *i; 
  scr_string_t *v4; 

  v2 = count;
  Load_Stream(streamStart, varCreateFxPaletteDef, 12 * count);
  for ( i = varCreateFxPaletteDef; v2; --v2 )
  {
    varCreateFxPaletteDef = i;
    Load_Stream(NotAtStart, i, 0xCui64);
    v4 = varscr_string_t;
    varscr_string_t = &varCreateFxPaletteDef->aliasName;
    Load_scr_string_t(NotAtStart);
    varscr_string_t = &varCreateFxPaletteDef->effectPath;
    Load_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v4;
  }
}

/*
==============
Load_CreateFxPaletteDefStream
==============
*/
void Load_CreateFxPaletteDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  scr_string_t *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 15828, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varCreateFxPaletteDef;
    do
    {
      Load_Stream(AtStart, pos, 0xCui64);
      v4 = varscr_string_t;
      varscr_string_t = &varCreateFxPaletteDef->aliasName;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = &varCreateFxPaletteDef->effectPath;
      Load_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varCreateFxPaletteDef = (CreateFxPaletteDef *)g_streamPosGlob.pos;
      varscr_string_t = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_DynEntityListArray
==============
*/
void Load_DynEntityListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  DynEntityList *i; 
  const char **v4; 
  DynEntityList *v5; 
  DynEntityDef *v6; 
  DynEntityDef *DynEntityDef; 
  DynEntityDef *v8; 
  SpatialPartition_TransientPopulation **v9; 

  v2 = count;
  Load_Stream(streamStart, varDynEntityList, count << 6);
  for ( i = varDynEntityList; v2; --v2 )
  {
    varDynEntityList = i;
    DB_PatchMem_PushAsset(109, i);
    Load_Stream(NotAtStart, varDynEntityList, 0x40ui64);
    DB_PushStreamPos(8u);
    v4 = varXString;
    varXString = &varDynEntityList->name;
    Load_XString(NotAtStart);
    v5 = varDynEntityList;
    varXString = v4;
    v6 = varDynEntityDef;
    if ( varDynEntityList->dynEntDefList[0] )
    {
      DynEntityDef = AllocLoad_DynEntityDef();
      v5->dynEntDefList[0] = DynEntityDef;
      varDynEntityDef = DynEntityDef;
      Load_DynEntityDefArray(AtStart, varDynEntityList->dynEntCount[0]);
      v5 = varDynEntityList;
      varDynEntityDef = v6;
    }
    if ( v5->dynEntDefList[1] )
    {
      v8 = AllocLoad_DynEntityDef();
      v5->dynEntDefList[1] = v8;
      varDynEntityDef = v8;
      Load_DynEntityDefArray(AtStart, varDynEntityList->dynEntCount[1]);
      v5 = varDynEntityList;
      varDynEntityDef = v6;
    }
    v9 = varSpatialPartition_TransientPopulationPtr;
    varSpatialPartition_TransientPopulationPtr = v5->dynEntSpatialPopulation;
    Load_SpatialPartition_TransientPopulationPtrArray(NotAtStart, 2ui64);
    varSpatialPartition_TransientPopulationPtr = v9;
    DB_PopStreamPos();
    DB_PatchMem_PopAsset();
    ++i;
  }
}

/*
==============
Load_DynEntityListPtr
==============
*/
void Load_DynEntityListPtr(const DBStreamStart streamStart)
{
  DynEntityList **v1; 
  __int64 v2; 
  DynEntityList *v3; 
  unsigned __int8 *inserted; 

  Load_Stream(streamStart, varDynEntityListPtr, 8ui64);
  DB_PushStreamPos(1u);
  v1 = varDynEntityListPtr;
  v2 = (__int64)*varDynEntityListPtr;
  if ( *varDynEntityListPtr )
  {
    if ( v2 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v2 != -2 && v2 != -3 )
    {
      DB_ConvertOffsetToAlias((unsigned __int64 *)varDynEntityListPtr);
      goto LABEL_6;
    }
    v3 = varDynEntityList;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    inserted = NULL;
    *v1 = (DynEntityList *)g_streamPosGlob.pos;
    varDynEntityList = (DynEntityList *)g_streamPosGlob.pos;
    if ( v2 == -3 )
      inserted = DB_InsertPointer();
    Load_DynEntityList(AtStart);
    Load_DynEntityList(v1);
    varDynEntityList = v3;
    if ( inserted )
      *(_QWORD *)inserted = *v1;
    if ( v2 == -1 )
      DB_PopSharedData();
  }
LABEL_6:
  DB_PopStreamPos();
}

/*
==============
Load_DynEntityListPtrArray
==============
*/
void Load_DynEntityListPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  DynEntityList **i; 
  DynEntityList **v4; 
  __int64 v5; 
  DynEntityList *v6; 
  unsigned __int8 *inserted; 

  v2 = count;
  Load_Stream(streamStart, varDynEntityListPtr, 8 * count);
  for ( i = varDynEntityListPtr; v2; --v2 )
  {
    varDynEntityListPtr = i;
    Load_Stream(NotAtStart, i, 8ui64);
    DB_PushStreamPos(1u);
    v4 = varDynEntityListPtr;
    v5 = (__int64)*varDynEntityListPtr;
    if ( *varDynEntityListPtr )
    {
      if ( v5 == -1 )
      {
        DB_PushSharedData();
LABEL_8:
        v6 = varDynEntityList;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        inserted = NULL;
        *v4 = (DynEntityList *)g_streamPosGlob.pos;
        varDynEntityList = (DynEntityList *)g_streamPosGlob.pos;
        if ( v5 == -3 )
          inserted = DB_InsertPointer();
        Load_DynEntityList(AtStart);
        Load_DynEntityList(v4);
        varDynEntityList = v6;
        if ( inserted )
          *(_QWORD *)inserted = *v4;
        if ( v5 == -1 )
          DB_PopSharedData();
        goto LABEL_14;
      }
      if ( v5 == -2 || v5 == -3 )
        goto LABEL_8;
      DB_ConvertOffsetToAlias((unsigned __int64 *)varDynEntityListPtr);
    }
LABEL_14:
    DB_PopStreamPos();
    ++i;
  }
}

/*
==============
Load_DynEntityListPtrStream
==============
*/
void Load_DynEntityListPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  DynEntityList **v4; 
  __int64 v5; 
  DynEntityList *v6; 
  unsigned __int8 *inserted; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 16360, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varDynEntityListPtr;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      DB_PushStreamPos(1u);
      v4 = varDynEntityListPtr;
      v5 = (__int64)*varDynEntityListPtr;
      if ( *varDynEntityListPtr )
      {
        if ( v5 == -1 )
        {
          DB_PushSharedData();
LABEL_12:
          v6 = varDynEntityList;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          inserted = NULL;
          *v4 = (DynEntityList *)g_streamPosGlob.pos;
          varDynEntityList = (DynEntityList *)g_streamPosGlob.pos;
          if ( v5 == -3 )
            inserted = DB_InsertPointer();
          Load_DynEntityList(AtStart);
          Load_DynEntityList(v4);
          varDynEntityList = v6;
          if ( inserted )
            *(_QWORD *)inserted = *v4;
          if ( v5 == -1 )
            DB_PopSharedData();
          goto LABEL_18;
        }
        if ( v5 == -2 || v5 == -3 )
          goto LABEL_12;
        DB_ConvertOffsetToAlias((unsigned __int64 *)varDynEntityListPtr);
      }
LABEL_18:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varDynEntityListPtr = (DynEntityList **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_DynEntityListStream
==============
*/
void Load_DynEntityListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 
  DynEntityList *v5; 
  DynEntityDef *v6; 
  DynEntityDef *DynEntityDef; 
  DynEntityDef *v8; 
  SpatialPartition_TransientPopulation **v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 16236, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varDynEntityList;
    do
    {
      DB_PatchMem_PushAsset(109, pos);
      Load_Stream(AtStart, varDynEntityList, 0x40ui64);
      DB_PushStreamPos(8u);
      v4 = varXString;
      varXString = &varDynEntityList->name;
      Load_XString(NotAtStart);
      v5 = varDynEntityList;
      varXString = v4;
      v6 = varDynEntityDef;
      if ( varDynEntityList->dynEntDefList[0] )
      {
        DynEntityDef = AllocLoad_DynEntityDef();
        v5->dynEntDefList[0] = DynEntityDef;
        varDynEntityDef = DynEntityDef;
        Load_DynEntityDefArray(AtStart, varDynEntityList->dynEntCount[0]);
        v5 = varDynEntityList;
        varDynEntityDef = v6;
      }
      if ( v5->dynEntDefList[1] )
      {
        v8 = AllocLoad_DynEntityDef();
        v5->dynEntDefList[1] = v8;
        varDynEntityDef = v8;
        Load_DynEntityDefArray(AtStart, varDynEntityList->dynEntCount[1]);
        v5 = varDynEntityList;
        varDynEntityDef = v6;
      }
      v9 = varSpatialPartition_TransientPopulationPtr;
      varSpatialPartition_TransientPopulationPtr = v5->dynEntSpatialPopulation;
      Load_SpatialPartition_TransientPopulationPtrArray(NotAtStart, 2ui64);
      varSpatialPartition_TransientPopulationPtr = v9;
      DB_PopStreamPos();
      DB_PatchMem_PopAsset();
      pos = g_streamPosGlob.pos;
      varDynEntityList = (DynEntityList *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_MapEdgeListArray
==============
*/
void Load_MapEdgeListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  MapEdgeList *i; 
  const char **v4; 
  MapEdgeList *v5; 
  float4 (*v6)[2]; 
  float4 (*lineSegmentFloat4_t)[2]; 
  FlaggedEdgeMetadata *v8; 
  FlaggedEdgeMetadata *FlaggedEdgeMetadata; 
  PMROctreeMetadata *v10; 
  PMROctreeMetadata *PMROctreeMetadata; 
  PMROctreeNodeSet *v12; 
  PMROctreeNodeSet *PMROctreeNodeSet; 
  unsigned int *v14; 
  unsigned int *EdgeIndex; 
  EdgeAdjacencyMetadata *v16; 
  EdgeAdjacencyMetadata *EdgeAdjacencyMetadata; 
  EdgeAdjacency *v18; 
  EdgeAdjacency *EdgeAdjacency; 

  v2 = count;
  Load_Stream(streamStart, varMapEdgeList, 160 * count);
  for ( i = varMapEdgeList; v2; --v2 )
  {
    varMapEdgeList = i;
    DB_PatchMem_PushAsset(112, i);
    Load_Stream(NotAtStart, varMapEdgeList, 0xA0ui64);
    DB_PushStreamPos(8u);
    v4 = varXString;
    varXString = &varMapEdgeList->name;
    Load_XString(NotAtStart);
    varXString = v4;
    v5 = varMapEdgeList;
    if ( varMapEdgeList->edges )
    {
      v6 = varlineSegmentFloat4_t;
      lineSegmentFloat4_t = AllocLoad_lineSegmentFloat4_t();
      v5->edges = lineSegmentFloat4_t;
      varlineSegmentFloat4_t = lineSegmentFloat4_t;
      Load_lineSegmentFloat4_tArray(AtStart, varMapEdgeList->numEdges);
      v5 = varMapEdgeList;
      varlineSegmentFloat4_t = v6;
    }
    if ( v5->edgeMetadata )
    {
      v8 = varFlaggedEdgeMetadata;
      FlaggedEdgeMetadata = AllocLoad_FlaggedEdgeMetadata();
      v5->edgeMetadata = FlaggedEdgeMetadata;
      varFlaggedEdgeMetadata = FlaggedEdgeMetadata;
      Load_FlaggedEdgeMetadataArray(AtStart, varMapEdgeList->numEdges);
      v5 = varMapEdgeList;
      varFlaggedEdgeMetadata = v8;
    }
    if ( v5->edgeOctrees )
    {
      v10 = varPMROctreeMetadata;
      PMROctreeMetadata = AllocLoad_PMROctreeMetadata();
      v5->edgeOctrees = PMROctreeMetadata;
      varPMROctreeMetadata = PMROctreeMetadata;
      Load_PMROctreeMetadataArray(AtStart, varMapEdgeList->numEdgeOctrees);
      v5 = varMapEdgeList;
      varPMROctreeMetadata = v10;
    }
    if ( v5->edgeOctreeNodeSets )
    {
      v12 = varPMROctreeNodeSet;
      PMROctreeNodeSet = AllocLoad_PMROctreeNodeSet();
      v5->edgeOctreeNodeSets = PMROctreeNodeSet;
      varPMROctreeNodeSet = PMROctreeNodeSet;
      Load_PMROctreeNodeSetArray(AtStart, varMapEdgeList->numEdgeOctreeNodeSet);
      v5 = varMapEdgeList;
      varPMROctreeNodeSet = v12;
    }
    if ( v5->edgeIndices )
    {
      v14 = varEdgeIndex;
      EdgeIndex = AllocLoad_EdgeIndex();
      v5->edgeIndices = EdgeIndex;
      varEdgeIndex = EdgeIndex;
      Load_EdgeIndexArray(AtStart, varMapEdgeList->numEdgeIndices);
      v5 = varMapEdgeList;
      varEdgeIndex = v14;
    }
    if ( v5->edgeAdjacencyMetadata )
    {
      v16 = varEdgeAdjacencyMetadata;
      EdgeAdjacencyMetadata = AllocLoad_EdgeAdjacencyMetadata();
      v5->edgeAdjacencyMetadata = EdgeAdjacencyMetadata;
      varEdgeAdjacencyMetadata = EdgeAdjacencyMetadata;
      Load_EdgeAdjacencyMetadataArray(AtStart, varMapEdgeList->numEdgeAdjacencyMetadata);
      v5 = varMapEdgeList;
      varEdgeAdjacencyMetadata = v16;
    }
    if ( v5->edgeAdjacency )
    {
      v18 = varEdgeAdjacency;
      EdgeAdjacency = AllocLoad_EdgeAdjacency();
      v5->edgeAdjacency = EdgeAdjacency;
      varEdgeAdjacency = EdgeAdjacency;
      Load_EdgeAdjacencyArray(AtStart, varMapEdgeList->numEdgeAdjacency);
      varEdgeAdjacency = v18;
    }
    DB_PopStreamPos();
    DB_PatchMem_PopAsset();
    ++i;
  }
}

/*
==============
Load_MapEdgeListPtr
==============
*/
void Load_MapEdgeListPtr(const DBStreamStart streamStart)
{
  MapEdgeList **v1; 
  __int64 v2; 
  MapEdgeList *v3; 
  unsigned __int8 *inserted; 

  Load_Stream(streamStart, varMapEdgeListPtr, 8ui64);
  DB_PushStreamPos(1u);
  v1 = varMapEdgeListPtr;
  v2 = (__int64)*varMapEdgeListPtr;
  if ( *varMapEdgeListPtr )
  {
    if ( v2 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v2 != -2 && v2 != -3 )
    {
      DB_ConvertOffsetToAlias((unsigned __int64 *)varMapEdgeListPtr);
      goto LABEL_6;
    }
    v3 = varMapEdgeList;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    inserted = NULL;
    *v1 = (MapEdgeList *)g_streamPosGlob.pos;
    varMapEdgeList = (MapEdgeList *)g_streamPosGlob.pos;
    if ( v2 == -3 )
      inserted = DB_InsertPointer();
    Load_MapEdgeList(AtStart);
    Load_MapEdgeList(v1);
    varMapEdgeList = v3;
    if ( inserted )
      *(_QWORD *)inserted = *v1;
    if ( v2 == -1 )
      DB_PopSharedData();
  }
LABEL_6:
  DB_PopStreamPos();
}

/*
==============
Load_MapEdgeListPtrArray
==============
*/
void Load_MapEdgeListPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  MapEdgeList **i; 
  MapEdgeList **v4; 
  __int64 v5; 
  MapEdgeList *v6; 
  unsigned __int8 *inserted; 

  v2 = count;
  Load_Stream(streamStart, varMapEdgeListPtr, 8 * count);
  for ( i = varMapEdgeListPtr; v2; --v2 )
  {
    varMapEdgeListPtr = i;
    Load_Stream(NotAtStart, i, 8ui64);
    DB_PushStreamPos(1u);
    v4 = varMapEdgeListPtr;
    v5 = (__int64)*varMapEdgeListPtr;
    if ( *varMapEdgeListPtr )
    {
      if ( v5 == -1 )
      {
        DB_PushSharedData();
LABEL_8:
        v6 = varMapEdgeList;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        inserted = NULL;
        *v4 = (MapEdgeList *)g_streamPosGlob.pos;
        varMapEdgeList = (MapEdgeList *)g_streamPosGlob.pos;
        if ( v5 == -3 )
          inserted = DB_InsertPointer();
        Load_MapEdgeList(AtStart);
        Load_MapEdgeList(v4);
        varMapEdgeList = v6;
        if ( inserted )
          *(_QWORD *)inserted = *v4;
        if ( v5 == -1 )
          DB_PopSharedData();
        goto LABEL_14;
      }
      if ( v5 == -2 || v5 == -3 )
        goto LABEL_8;
      DB_ConvertOffsetToAlias((unsigned __int64 *)varMapEdgeListPtr);
    }
LABEL_14:
    DB_PopStreamPos();
    ++i;
  }
}

/*
==============
Load_MapEdgeListPtrStream
==============
*/
void Load_MapEdgeListPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  MapEdgeList **v4; 
  __int64 v5; 
  MapEdgeList *v6; 
  unsigned __int8 *inserted; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 17073, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varMapEdgeListPtr;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      DB_PushStreamPos(1u);
      v4 = varMapEdgeListPtr;
      v5 = (__int64)*varMapEdgeListPtr;
      if ( *varMapEdgeListPtr )
      {
        if ( v5 == -1 )
        {
          DB_PushSharedData();
LABEL_12:
          v6 = varMapEdgeList;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          inserted = NULL;
          *v4 = (MapEdgeList *)g_streamPosGlob.pos;
          varMapEdgeList = (MapEdgeList *)g_streamPosGlob.pos;
          if ( v5 == -3 )
            inserted = DB_InsertPointer();
          Load_MapEdgeList(AtStart);
          Load_MapEdgeList(v4);
          varMapEdgeList = v6;
          if ( inserted )
            *(_QWORD *)inserted = *v4;
          if ( v5 == -1 )
            DB_PopSharedData();
          goto LABEL_18;
        }
        if ( v5 == -2 || v5 == -3 )
          goto LABEL_12;
        DB_ConvertOffsetToAlias((unsigned __int64 *)varMapEdgeListPtr);
      }
LABEL_18:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varMapEdgeListPtr = (MapEdgeList **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_MapEdgeListStream
==============
*/
void Load_MapEdgeListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 
  MapEdgeList *v5; 
  float4 (*v6)[2]; 
  float4 (*lineSegmentFloat4_t)[2]; 
  FlaggedEdgeMetadata *v8; 
  FlaggedEdgeMetadata *FlaggedEdgeMetadata; 
  PMROctreeMetadata *v10; 
  PMROctreeMetadata *PMROctreeMetadata; 
  PMROctreeNodeSet *v12; 
  PMROctreeNodeSet *PMROctreeNodeSet; 
  unsigned int *v14; 
  unsigned int *EdgeIndex; 
  EdgeAdjacencyMetadata *v16; 
  EdgeAdjacencyMetadata *EdgeAdjacencyMetadata; 
  EdgeAdjacency *v18; 
  EdgeAdjacency *EdgeAdjacency; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 16949, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varMapEdgeList;
    do
    {
      DB_PatchMem_PushAsset(112, pos);
      Load_Stream(AtStart, varMapEdgeList, 0xA0ui64);
      DB_PushStreamPos(8u);
      v4 = varXString;
      varXString = &varMapEdgeList->name;
      Load_XString(NotAtStart);
      varXString = v4;
      v5 = varMapEdgeList;
      if ( varMapEdgeList->edges )
      {
        v6 = varlineSegmentFloat4_t;
        lineSegmentFloat4_t = AllocLoad_lineSegmentFloat4_t();
        v5->edges = lineSegmentFloat4_t;
        varlineSegmentFloat4_t = lineSegmentFloat4_t;
        Load_lineSegmentFloat4_tArray(AtStart, varMapEdgeList->numEdges);
        v5 = varMapEdgeList;
        varlineSegmentFloat4_t = v6;
      }
      if ( v5->edgeMetadata )
      {
        v8 = varFlaggedEdgeMetadata;
        FlaggedEdgeMetadata = AllocLoad_FlaggedEdgeMetadata();
        v5->edgeMetadata = FlaggedEdgeMetadata;
        varFlaggedEdgeMetadata = FlaggedEdgeMetadata;
        Load_FlaggedEdgeMetadataArray(AtStart, varMapEdgeList->numEdges);
        v5 = varMapEdgeList;
        varFlaggedEdgeMetadata = v8;
      }
      if ( v5->edgeOctrees )
      {
        v10 = varPMROctreeMetadata;
        PMROctreeMetadata = AllocLoad_PMROctreeMetadata();
        v5->edgeOctrees = PMROctreeMetadata;
        varPMROctreeMetadata = PMROctreeMetadata;
        Load_PMROctreeMetadataArray(AtStart, varMapEdgeList->numEdgeOctrees);
        v5 = varMapEdgeList;
        varPMROctreeMetadata = v10;
      }
      if ( v5->edgeOctreeNodeSets )
      {
        v12 = varPMROctreeNodeSet;
        PMROctreeNodeSet = AllocLoad_PMROctreeNodeSet();
        v5->edgeOctreeNodeSets = PMROctreeNodeSet;
        varPMROctreeNodeSet = PMROctreeNodeSet;
        Load_PMROctreeNodeSetArray(AtStart, varMapEdgeList->numEdgeOctreeNodeSet);
        v5 = varMapEdgeList;
        varPMROctreeNodeSet = v12;
      }
      if ( v5->edgeIndices )
      {
        v14 = varEdgeIndex;
        EdgeIndex = AllocLoad_EdgeIndex();
        v5->edgeIndices = EdgeIndex;
        varEdgeIndex = EdgeIndex;
        Load_EdgeIndexArray(AtStart, varMapEdgeList->numEdgeIndices);
        v5 = varMapEdgeList;
        varEdgeIndex = v14;
      }
      if ( v5->edgeAdjacencyMetadata )
      {
        v16 = varEdgeAdjacencyMetadata;
        EdgeAdjacencyMetadata = AllocLoad_EdgeAdjacencyMetadata();
        v5->edgeAdjacencyMetadata = EdgeAdjacencyMetadata;
        varEdgeAdjacencyMetadata = EdgeAdjacencyMetadata;
        Load_EdgeAdjacencyMetadataArray(AtStart, varMapEdgeList->numEdgeAdjacencyMetadata);
        v5 = varMapEdgeList;
        varEdgeAdjacencyMetadata = v16;
      }
      if ( v5->edgeAdjacency )
      {
        v18 = varEdgeAdjacency;
        EdgeAdjacency = AllocLoad_EdgeAdjacency();
        v5->edgeAdjacency = EdgeAdjacency;
        varEdgeAdjacency = EdgeAdjacency;
        Load_EdgeAdjacencyArray(AtStart, varMapEdgeList->numEdgeAdjacency);
        varEdgeAdjacency = v18;
      }
      DB_PopStreamPos();
      DB_PatchMem_PopAsset();
      pos = g_streamPosGlob.pos;
      varMapEdgeList = (MapEdgeList *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_MapEnts
==============
*/
void Load_MapEnts(const DBStreamStart streamStart)
{
  const char **v2; 
  MapEnts *v3; 
  char *v4; 
  char *v5; 
  MapTriggers *v6; 
  ClientTriggers *v7; 
  ClientTriggerBlend *v8; 
  SpawnPointRecordList *v9; 
  SplineRecordList *v10; 
  MapEnts *v11; 
  char *v12; 
  cmodel_t *v13; 
  MapEdgeList **v14; 
  __int64 numEdgeLists; 
  MapEdgeList **i; 
  SpatialPartition_Tree *v17; 
  SpatialPartition_Tree *SpatialPartition_Tree; 
  CM_ClientModel *v19; 
  CM_ClientModel *CM_ClientModel; 
  DynEntityListId *v21; 
  DynEntityListId *DynEntityListId; 
  SpatialPartition_Population **v23; 
  SpatialPartition_Population_TransientMap **v24; 
  MapEnts *v25; 
  ClientEntAnchor *v26; 
  __int64 clientEntAnchorCount; 
  ClientEntAnchor *j; 
  scr_string_t *v29; 
  ScriptableMapEnts *v30; 
  SpawnGroup *v31; 
  ClientSideEffects *v32; 
  CreateFxAssetData *v33; 
  MapEnts *v34; 
  scr_string_t *v35; 
  scr_string_t *scr_string_t; 
  ServerSideEffects *v37; 
  MapEnts *v38; 
  MayhemInstance *mayhemScenes; 
  MayhemInstance *v40; 
  MayhemInstance *MayhemInstance; 
  SpawnerList *v42; 
  MapEnts *v43; 
  AudioPASpeaker *v44; 
  AudioPropagationNode *v45; 
  AudioPropagationEdge *v46; 
  CollMapLookupEntry *v47; 
  __int64 numCollmaps; 
  CollMapLookupEntry *k; 
  const char **v50; 

  DB_PatchMem_PushAsset(25, varMapEnts);
  Load_Stream(streamStart, varMapEnts, 0x428ui64);
  DB_PushStreamPos(8u);
  v2 = varXString;
  varXString = &varMapEnts->name;
  Load_XString(NotAtStart);
  v3 = varMapEnts;
  varXString = v2;
  if ( varMapEnts->entityString )
  {
    v4 = varchar;
    v5 = AllocLoad_char();
    v3->entityString = v5;
    varchar = v5;
    Load_charArray(AtStart, varMapEnts->numEntityChars);
    v3 = varMapEnts;
    varchar = v4;
  }
  v6 = varMapTriggers;
  varMapTriggers = &v3->trigger;
  Load_MapTriggers(NotAtStart);
  varMapTriggers = v6;
  v7 = varClientTriggers;
  varClientTriggers = &varMapEnts->clientTrigger;
  Load_ClientTriggers(NotAtStart);
  varClientTriggers = v7;
  v8 = varClientTriggerBlend;
  varClientTriggerBlend = &varMapEnts->clientTriggerBlend;
  Load_ClientTriggerBlend(NotAtStart);
  varClientTriggerBlend = v8;
  v9 = varSpawnPointRecordList;
  varSpawnPointRecordList = &varMapEnts->spawnList;
  Load_SpawnPointRecordList(NotAtStart);
  varSpawnPointRecordList = v9;
  v10 = varSplineRecordList;
  varSplineRecordList = &varMapEnts->splineList;
  Load_SplineRecordList(NotAtStart);
  v11 = varMapEnts;
  varSplineRecordList = v10;
  if ( varMapEnts->havokEntsShapeData )
  {
    v12 = varalignHavokShapeData_t;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    v11->havokEntsShapeData = (char *)g_streamPosGlob.pos;
    varalignHavokShapeData_t = (char *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, varMapEnts->havokEntsShapeDataSize);
    v11 = varMapEnts;
    varalignHavokShapeData_t = v12;
  }
  if ( v11->cmodels )
  {
    v13 = varcmodel_t;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v11->cmodels = (cmodel_t *)g_streamPosGlob.pos;
    varcmodel_t = (cmodel_t *)g_streamPosGlob.pos;
    Load_cmodel_tArray(AtStart, varMapEnts->numSubModels);
    v11 = varMapEnts;
    varcmodel_t = v13;
  }
  if ( v11->edgeLists )
  {
    v14 = varMapEdgeListPtr;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v11->edgeLists = (MapEdgeList **)g_streamPosGlob.pos;
    varMapEdgeListPtr = (MapEdgeList **)g_streamPosGlob.pos;
    numEdgeLists = varMapEnts->numEdgeLists;
    Load_Stream(AtStart, g_streamPosGlob.pos, 8 * numEdgeLists);
    for ( i = varMapEdgeListPtr; numEdgeLists; --numEdgeLists )
    {
      varMapEdgeListPtr = i;
      Load_MapEdgeListPtr(NotAtStart);
      ++i;
    }
    v11 = varMapEnts;
    varMapEdgeListPtr = v14;
  }
  if ( v11->edgeListSpatialTree )
  {
    v17 = varSpatialPartition_Tree;
    SpatialPartition_Tree = AllocLoad_SpatialPartition_Tree();
    v11->edgeListSpatialTree = SpatialPartition_Tree;
    varSpatialPartition_Tree = SpatialPartition_Tree;
    Load_SpatialPartition_Tree(AtStart);
    v11 = varMapEnts;
    varSpatialPartition_Tree = v17;
  }
  if ( v11->clientModels )
  {
    v19 = varCM_ClientModel;
    CM_ClientModel = AllocLoad_CM_ClientModel();
    v11->clientModels = CM_ClientModel;
    varCM_ClientModel = CM_ClientModel;
    Load_CM_ClientModelArray(AtStart, varMapEnts->numClientModels);
    v11 = varMapEnts;
    varCM_ClientModel = v19;
  }
  if ( v11->dynEntListIds )
  {
    v21 = varDynEntityListId;
    DynEntityListId = AllocLoad_DynEntityListId();
    v11->dynEntListIds = DynEntityListId;
    varDynEntityListId = DynEntityListId;
    Load_DynEntityListIdArray(AtStart, (unsigned __int16)varMapEnts->dynEntityListsCount);
    v11 = varMapEnts;
    varDynEntityListId = v21;
  }
  v23 = varSpatialPartition_PopulationPtr;
  varSpatialPartition_PopulationPtr = v11->dynEntSpatialPopulation;
  Load_SpatialPartition_PopulationPtrArray(NotAtStart, 2ui64);
  varSpatialPartition_PopulationPtr = v23;
  v24 = varSpatialPartition_Population_TransientMapPtr;
  varSpatialPartition_Population_TransientMapPtr = varMapEnts->dynEntSpatialTransientMap;
  Load_SpatialPartition_Population_TransientMapPtrArray(NotAtStart, 2ui64);
  v25 = varMapEnts;
  varSpatialPartition_Population_TransientMapPtr = v24;
  if ( varMapEnts->clientEntAnchors )
  {
    v26 = varClientEntAnchor;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v25->clientEntAnchors = (ClientEntAnchor *)g_streamPosGlob.pos;
    varClientEntAnchor = (ClientEntAnchor *)g_streamPosGlob.pos;
    clientEntAnchorCount = varMapEnts->clientEntAnchorCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 8 * clientEntAnchorCount);
    for ( j = varClientEntAnchor; clientEntAnchorCount; --clientEntAnchorCount )
    {
      varClientEntAnchor = j;
      Load_Stream(NotAtStart, j, 8ui64);
      v29 = varscr_string_t;
      varscr_string_t = (scr_string_t *)varClientEntAnchor;
      Load_scr_string_t(NotAtStart);
      ++j;
      varscr_string_t = v29;
    }
    v25 = varMapEnts;
    varClientEntAnchor = v26;
  }
  v30 = varScriptableMapEnts;
  varScriptableMapEnts = &v25->scriptableMapEnts;
  Load_ScriptableMapEnts(NotAtStart);
  varScriptableMapEnts = v30;
  v31 = varSpawnGroup;
  varSpawnGroup = &varMapEnts->spawnGroupLoot;
  Load_SpawnGroup(NotAtStart);
  varSpawnGroup = v31;
  v32 = varClientSideEffects;
  varClientSideEffects = &varMapEnts->clientSideEffects;
  Load_ClientSideEffects(NotAtStart);
  varClientSideEffects = v32;
  v33 = varCreateFxAssetData;
  varCreateFxAssetData = &varMapEnts->createFxAssetData;
  Load_CreateFxAssetData(NotAtStart);
  v34 = varMapEnts;
  varCreateFxAssetData = v33;
  if ( varMapEnts->exploderNames )
  {
    v35 = varscr_string_t;
    scr_string_t = AllocLoad_scr_string_t();
    v34->exploderNames = scr_string_t;
    varscr_string_t = scr_string_t;
    Load_scr_string_tArray(AtStart, varMapEnts->exploderNameTotal);
    v34 = varMapEnts;
    varscr_string_t = v35;
  }
  v37 = varServerSideEffects;
  varServerSideEffects = &v34->serverSideEffects;
  Load_ServerSideEffects(NotAtStart);
  v38 = varMapEnts;
  varServerSideEffects = v37;
  mayhemScenes = varMapEnts->mayhemScenes;
  if ( mayhemScenes )
  {
    if ( mayhemScenes == (MayhemInstance *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( mayhemScenes != (MayhemInstance *)-2i64 )
    {
      v38->mayhemScenes = (MayhemInstance *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varMapEnts->mayhemScenes);
      goto LABEL_30;
    }
    v40 = varMayhemInstance;
    MayhemInstance = AllocLoad_MayhemInstance();
    v38->mayhemScenes = MayhemInstance;
    varMayhemInstance = MayhemInstance;
    Load_MayhemInstanceArray(AtStart, varMapEnts->numMayhemScenes);
    varMayhemInstance = v40;
    if ( mayhemScenes == (MayhemInstance *)-1i64 )
      DB_PopSharedData();
  }
LABEL_30:
  v42 = varSpawnerList;
  varSpawnerList = &varMapEnts->spawners;
  Load_SpawnerList(NotAtStart);
  v43 = varMapEnts;
  varSpawnerList = v42;
  if ( varMapEnts->audioPASpeakers )
  {
    v44 = varAudioPASpeaker;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v43->audioPASpeakers = (AudioPASpeaker *)g_streamPosGlob.pos;
    varAudioPASpeaker = (AudioPASpeaker *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varMapEnts->audioPASpeakerCount);
    v43 = varMapEnts;
    varAudioPASpeaker = v44;
  }
  if ( v43->audioPropNodes )
  {
    v45 = varAudioPropagationNode;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v43->audioPropNodes = (AudioPropagationNode *)g_streamPosGlob.pos;
    varAudioPropagationNode = (AudioPropagationNode *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varMapEnts->numAudioPropNodes);
    v43 = varMapEnts;
    varAudioPropagationNode = v45;
  }
  if ( v43->audioPropEdges )
  {
    v46 = varAudioPropagationEdge;
    DB_PatchMem_FixStreamAlignment(1ui64);
    DB_CheckCanIncStreamPos(0i64);
    v43->audioPropEdges = (AudioPropagationEdge *)g_streamPosGlob.pos;
    varAudioPropagationEdge = (AudioPropagationEdge *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 4i64 * varMapEnts->numAudioPropEdges);
    v43 = varMapEnts;
    varAudioPropagationEdge = v46;
  }
  if ( v43->collmapLookups )
  {
    v47 = varCollMapLookupEntry;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v43->collmapLookups = (CollMapLookupEntry *)g_streamPosGlob.pos;
    varCollMapLookupEntry = (CollMapLookupEntry *)g_streamPosGlob.pos;
    numCollmaps = varMapEnts->numCollmaps;
    Load_Stream(AtStart, g_streamPosGlob.pos, 16 * numCollmaps);
    for ( k = varCollMapLookupEntry; numCollmaps; --numCollmaps )
    {
      varCollMapLookupEntry = k;
      Load_Stream(NotAtStart, k, 0x10ui64);
      v50 = varXString;
      varXString = &varCollMapLookupEntry->targetName;
      Load_XString(NotAtStart);
      ++k;
      varXString = v50;
    }
    varCollMapLookupEntry = v47;
  }
  DB_PopStreamPos();
  DB_PatchMem_PopAsset();
}

/*
==============
Load_MapEntsArray
==============
*/
void Load_MapEntsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  MapEnts *i; 

  v2 = count;
  Load_Stream(streamStart, varMapEnts, 1064 * count);
  for ( i = varMapEnts; v2; --v2 )
  {
    varMapEnts = i;
    Load_MapEnts(NotAtStart);
    ++i;
  }
}

/*
==============
Load_MapEntsPtr
==============
*/
void Load_MapEntsPtr(const DBStreamStart streamStart)
{
  MapEnts **v1; 
  __int64 v2; 
  MapEnts *v3; 
  unsigned __int8 *inserted; 

  Load_Stream(streamStart, varMapEntsPtr, 8ui64);
  DB_PushStreamPos(1u);
  v1 = varMapEntsPtr;
  v2 = (__int64)*varMapEntsPtr;
  if ( *varMapEntsPtr )
  {
    if ( v2 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v2 != -2 && v2 != -3 )
    {
      DB_ConvertOffsetToAlias((unsigned __int64 *)varMapEntsPtr);
      goto LABEL_6;
    }
    v3 = varMapEnts;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    inserted = NULL;
    *v1 = (MapEnts *)g_streamPosGlob.pos;
    varMapEnts = (MapEnts *)g_streamPosGlob.pos;
    if ( v2 == -3 )
      inserted = DB_InsertPointer();
    Load_MapEnts(AtStart);
    Load_MapEntsAsset(v1);
    varMapEnts = v3;
    if ( inserted )
      *(_QWORD *)inserted = *v1;
    if ( v2 == -1 )
      DB_PopSharedData();
  }
LABEL_6:
  DB_PopStreamPos();
}

/*
==============
Load_MapEntsPtrArray
==============
*/
void Load_MapEntsPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  MapEnts **i; 
  MapEnts **v4; 
  __int64 v5; 
  MapEnts *v6; 
  unsigned __int8 *inserted; 

  v2 = count;
  Load_Stream(streamStart, varMapEntsPtr, 8 * count);
  for ( i = varMapEntsPtr; v2; --v2 )
  {
    varMapEntsPtr = i;
    Load_Stream(NotAtStart, i, 8ui64);
    DB_PushStreamPos(1u);
    v4 = varMapEntsPtr;
    v5 = (__int64)*varMapEntsPtr;
    if ( *varMapEntsPtr )
    {
      if ( v5 == -1 )
      {
        DB_PushSharedData();
LABEL_8:
        v6 = varMapEnts;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        inserted = NULL;
        *v4 = (MapEnts *)g_streamPosGlob.pos;
        varMapEnts = (MapEnts *)g_streamPosGlob.pos;
        if ( v5 == -3 )
          inserted = DB_InsertPointer();
        Load_MapEnts(AtStart);
        Load_MapEntsAsset(v4);
        varMapEnts = v6;
        if ( inserted )
          *(_QWORD *)inserted = *v4;
        if ( v5 == -1 )
          DB_PopSharedData();
        goto LABEL_14;
      }
      if ( v5 == -2 || v5 == -3 )
        goto LABEL_8;
      DB_ConvertOffsetToAlias((unsigned __int64 *)varMapEntsPtr);
    }
LABEL_14:
    DB_PopStreamPos();
    ++i;
  }
}

/*
==============
Load_MapEntsPtrStream
==============
*/
void Load_MapEntsPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  MapEnts **v4; 
  __int64 v5; 
  MapEnts *v6; 
  unsigned __int8 *inserted; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 18659, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varMapEntsPtr;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      DB_PushStreamPos(1u);
      v4 = varMapEntsPtr;
      v5 = (__int64)*varMapEntsPtr;
      if ( *varMapEntsPtr )
      {
        if ( v5 == -1 )
        {
          DB_PushSharedData();
LABEL_12:
          v6 = varMapEnts;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          inserted = NULL;
          *v4 = (MapEnts *)g_streamPosGlob.pos;
          varMapEnts = (MapEnts *)g_streamPosGlob.pos;
          if ( v5 == -3 )
            inserted = DB_InsertPointer();
          Load_MapEnts(AtStart);
          Load_MapEntsAsset(v4);
          varMapEnts = v6;
          if ( inserted )
            *(_QWORD *)inserted = *v4;
          if ( v5 == -1 )
            DB_PopSharedData();
          goto LABEL_18;
        }
        if ( v5 == -2 || v5 == -3 )
          goto LABEL_12;
        DB_ConvertOffsetToAlias((unsigned __int64 *)varMapEntsPtr);
      }
LABEL_18:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varMapEntsPtr = (MapEnts **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_MapEntsStream
==============
*/
void Load_MapEntsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 18535, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Load_MapEnts(AtStart);
    varMapEnts = (MapEnts *)g_streamPosGlob.pos;
  }
}

/*
==============
Load_MapTriggers
==============
*/
void Load_MapTriggers(const DBStreamStart streamStart)
{
  MapTriggers *v1; 
  TriggerModel *models; 
  TriggerModel *v3; 
  __int64 count; 
  TriggerModel *i; 
  PhysicsAsset **v6; 
  MapTriggers *v7; 
  TriggerHull *hulls; 
  TriggerHull *v9; 
  MapTriggers *v10; 
  TriggerSlab *slabs; 
  TriggerSlab *v12; 
  MapTriggers *v13; 
  TriggerWinding *windings; 
  TriggerWinding *v15; 
  MapTriggers *v16; 
  TriggerWindingPoint *windingPoints; 
  TriggerWindingPoint *v18; 

  Load_Stream(streamStart, varMapTriggers, 0x50ui64);
  v1 = varMapTriggers;
  models = varMapTriggers->models;
  if ( models )
  {
    if ( models == (TriggerModel *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( models != (TriggerModel *)-2i64 )
    {
      v1->models = (TriggerModel *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varMapTriggers->models);
      goto LABEL_10;
    }
    v3 = varTriggerModel;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->models = (TriggerModel *)g_streamPosGlob.pos;
    varTriggerModel = (TriggerModel *)g_streamPosGlob.pos;
    count = varMapTriggers->count;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32 * count);
    for ( i = varTriggerModel; count; --count )
    {
      varTriggerModel = i;
      Load_Stream(NotAtStart, i, 0x20ui64);
      v6 = varPhysicsAssetPtr;
      varPhysicsAssetPtr = &varTriggerModel->physicsAsset;
      Load_PhysicsAssetPtr(NotAtStart);
      ++i;
      varPhysicsAssetPtr = v6;
    }
    varTriggerModel = v3;
    if ( models == (TriggerModel *)-1i64 )
      DB_PopSharedData();
  }
LABEL_10:
  v7 = varMapTriggers;
  hulls = varMapTriggers->hulls;
  if ( !hulls )
    goto LABEL_17;
  if ( hulls == (TriggerHull *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( hulls != (TriggerHull *)-2i64 )
  {
    v7->hulls = (TriggerHull *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varMapTriggers->hulls);
    goto LABEL_17;
  }
  v9 = varTriggerHull;
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  v7->hulls = (TriggerHull *)g_streamPosGlob.pos;
  varTriggerHull = (TriggerHull *)g_streamPosGlob.pos;
  Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varMapTriggers->hullCount);
  varTriggerHull = v9;
  if ( hulls == (TriggerHull *)-1i64 )
    DB_PopSharedData();
LABEL_17:
  v10 = varMapTriggers;
  slabs = varMapTriggers->slabs;
  if ( !slabs )
    goto LABEL_24;
  if ( slabs == (TriggerSlab *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( slabs != (TriggerSlab *)-2i64 )
  {
    v10->slabs = (TriggerSlab *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varMapTriggers->slabs);
    goto LABEL_24;
  }
  v12 = varTriggerSlab;
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  v10->slabs = (TriggerSlab *)g_streamPosGlob.pos;
  varTriggerSlab = (TriggerSlab *)g_streamPosGlob.pos;
  Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varMapTriggers->slabCount);
  varTriggerSlab = v12;
  if ( slabs == (TriggerSlab *)-1i64 )
    DB_PopSharedData();
LABEL_24:
  v13 = varMapTriggers;
  windings = varMapTriggers->windings;
  if ( !windings )
    goto LABEL_31;
  if ( windings == (TriggerWinding *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( windings != (TriggerWinding *)-2i64 )
  {
    v13->windings = (TriggerWinding *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varMapTriggers->windings);
    goto LABEL_31;
  }
  v15 = varTriggerWinding;
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  v13->windings = (TriggerWinding *)g_streamPosGlob.pos;
  varTriggerWinding = (TriggerWinding *)g_streamPosGlob.pos;
  Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varMapTriggers->windingCount);
  varTriggerWinding = v15;
  if ( windings == (TriggerWinding *)-1i64 )
    DB_PopSharedData();
LABEL_31:
  v16 = varMapTriggers;
  windingPoints = varMapTriggers->windingPoints;
  if ( !windingPoints )
    return;
  if ( windingPoints == (TriggerWindingPoint *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( windingPoints != (TriggerWindingPoint *)-2i64 )
  {
    v16->windingPoints = (TriggerWindingPoint *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varMapTriggers->windingPoints);
    return;
  }
  v18 = varTriggerWindingPoint;
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  v16->windingPoints = (TriggerWindingPoint *)g_streamPosGlob.pos;
  varTriggerWindingPoint = (TriggerWindingPoint *)g_streamPosGlob.pos;
  Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varMapTriggers->windingPointCount);
  varTriggerWindingPoint = v18;
  if ( windingPoints == (TriggerWindingPoint *)-1i64 )
    DB_PopSharedData();
}

/*
==============
Load_MapTriggersArray
==============
*/
void Load_MapTriggersArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  MapTriggers *i; 
  MapTriggers *v4; 
  TriggerModel *models; 
  TriggerModel *v6; 
  __int64 v7; 
  TriggerModel *j; 
  PhysicsAsset **v9; 
  MapTriggers *v10; 
  TriggerHull *hulls; 
  TriggerHull *v12; 
  MapTriggers *v13; 
  TriggerSlab *slabs; 
  TriggerSlab *v15; 
  MapTriggers *v16; 
  TriggerWinding *windings; 
  TriggerWinding *v18; 
  MapTriggers *v19; 
  TriggerWindingPoint *windingPoints; 
  TriggerWindingPoint *v21; 

  v2 = count;
  Load_Stream(streamStart, varMapTriggers, 80 * count);
  for ( i = varMapTriggers; v2; --v2 )
  {
    varMapTriggers = i;
    Load_Stream(NotAtStart, i, 0x50ui64);
    v4 = varMapTriggers;
    models = varMapTriggers->models;
    if ( !models )
      goto LABEL_11;
    if ( models == (TriggerModel *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( models != (TriggerModel *)-2i64 )
    {
      v4->models = (TriggerModel *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varMapTriggers->models);
      goto LABEL_11;
    }
    v6 = varTriggerModel;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->models = (TriggerModel *)g_streamPosGlob.pos;
    varTriggerModel = (TriggerModel *)g_streamPosGlob.pos;
    v7 = varMapTriggers->count;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32 * v7);
    for ( j = varTriggerModel; v7; --v7 )
    {
      varTriggerModel = j;
      Load_Stream(NotAtStart, j, 0x20ui64);
      v9 = varPhysicsAssetPtr;
      varPhysicsAssetPtr = &varTriggerModel->physicsAsset;
      Load_PhysicsAssetPtr(NotAtStart);
      ++j;
      varPhysicsAssetPtr = v9;
    }
    varTriggerModel = v6;
    if ( models == (TriggerModel *)-1i64 )
      DB_PopSharedData();
LABEL_11:
    v10 = varMapTriggers;
    hulls = varMapTriggers->hulls;
    if ( !hulls )
      goto LABEL_18;
    if ( hulls == (TriggerHull *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( hulls != (TriggerHull *)-2i64 )
    {
      v10->hulls = (TriggerHull *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varMapTriggers->hulls);
      goto LABEL_18;
    }
    v12 = varTriggerHull;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v10->hulls = (TriggerHull *)g_streamPosGlob.pos;
    varTriggerHull = (TriggerHull *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varMapTriggers->hullCount);
    varTriggerHull = v12;
    if ( hulls == (TriggerHull *)-1i64 )
      DB_PopSharedData();
LABEL_18:
    v13 = varMapTriggers;
    slabs = varMapTriggers->slabs;
    if ( !slabs )
      goto LABEL_25;
    if ( slabs == (TriggerSlab *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( slabs != (TriggerSlab *)-2i64 )
    {
      v13->slabs = (TriggerSlab *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varMapTriggers->slabs);
      goto LABEL_25;
    }
    v15 = varTriggerSlab;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v13->slabs = (TriggerSlab *)g_streamPosGlob.pos;
    varTriggerSlab = (TriggerSlab *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varMapTriggers->slabCount);
    varTriggerSlab = v15;
    if ( slabs == (TriggerSlab *)-1i64 )
      DB_PopSharedData();
LABEL_25:
    v16 = varMapTriggers;
    windings = varMapTriggers->windings;
    if ( !windings )
      goto LABEL_32;
    if ( windings == (TriggerWinding *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( windings != (TriggerWinding *)-2i64 )
    {
      v16->windings = (TriggerWinding *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varMapTriggers->windings);
      goto LABEL_32;
    }
    v18 = varTriggerWinding;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v16->windings = (TriggerWinding *)g_streamPosGlob.pos;
    varTriggerWinding = (TriggerWinding *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varMapTriggers->windingCount);
    varTriggerWinding = v18;
    if ( windings == (TriggerWinding *)-1i64 )
      DB_PopSharedData();
LABEL_32:
    v19 = varMapTriggers;
    windingPoints = varMapTriggers->windingPoints;
    if ( windingPoints )
    {
      if ( windingPoints == (TriggerWindingPoint *)-1i64 )
      {
        DB_PushSharedData();
LABEL_37:
        v21 = varTriggerWindingPoint;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v19->windingPoints = (TriggerWindingPoint *)g_streamPosGlob.pos;
        varTriggerWindingPoint = (TriggerWindingPoint *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varMapTriggers->windingPointCount);
        varTriggerWindingPoint = v21;
        if ( windingPoints == (TriggerWindingPoint *)-1i64 )
          DB_PopSharedData();
        goto LABEL_39;
      }
      if ( windingPoints == (TriggerWindingPoint *)-2i64 )
        goto LABEL_37;
      v19->windingPoints = (TriggerWindingPoint *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varMapTriggers->windingPoints);
    }
LABEL_39:
    ++i;
  }
}

/*
==============
Load_MapTriggersStream
==============
*/
void Load_MapTriggersStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  MapTriggers *v4; 
  TriggerModel *models; 
  TriggerModel *v6; 
  __int64 v7; 
  TriggerModel *i; 
  PhysicsAsset **v9; 
  MapTriggers *v10; 
  TriggerHull *hulls; 
  TriggerHull *v12; 
  MapTriggers *v13; 
  TriggerSlab *slabs; 
  TriggerSlab *v15; 
  MapTriggers *v16; 
  TriggerWinding *windings; 
  TriggerWinding *v18; 
  MapTriggers *v19; 
  TriggerWindingPoint *windingPoints; 
  TriggerWindingPoint *v21; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 9191, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varMapTriggers;
    do
    {
      Load_Stream(AtStart, pos, 0x50ui64);
      v4 = varMapTriggers;
      models = varMapTriggers->models;
      if ( !models )
        goto LABEL_15;
      if ( models == (TriggerModel *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( models != (TriggerModel *)-2i64 )
      {
        v4->models = (TriggerModel *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varMapTriggers->models);
        goto LABEL_15;
      }
      v6 = varTriggerModel;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->models = (TriggerModel *)g_streamPosGlob.pos;
      varTriggerModel = (TriggerModel *)g_streamPosGlob.pos;
      v7 = varMapTriggers->count;
      Load_Stream(AtStart, g_streamPosGlob.pos, 32 * v7);
      for ( i = varTriggerModel; v7; --v7 )
      {
        varTriggerModel = i;
        Load_Stream(NotAtStart, i, 0x20ui64);
        v9 = varPhysicsAssetPtr;
        varPhysicsAssetPtr = &varTriggerModel->physicsAsset;
        Load_PhysicsAssetPtr(NotAtStart);
        ++i;
        varPhysicsAssetPtr = v9;
      }
      varTriggerModel = v6;
      if ( models == (TriggerModel *)-1i64 )
        DB_PopSharedData();
LABEL_15:
      v10 = varMapTriggers;
      hulls = varMapTriggers->hulls;
      if ( !hulls )
        goto LABEL_22;
      if ( hulls == (TriggerHull *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( hulls != (TriggerHull *)-2i64 )
      {
        v10->hulls = (TriggerHull *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varMapTriggers->hulls);
        goto LABEL_22;
      }
      v12 = varTriggerHull;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v10->hulls = (TriggerHull *)g_streamPosGlob.pos;
      varTriggerHull = (TriggerHull *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varMapTriggers->hullCount);
      varTriggerHull = v12;
      if ( hulls == (TriggerHull *)-1i64 )
        DB_PopSharedData();
LABEL_22:
      v13 = varMapTriggers;
      slabs = varMapTriggers->slabs;
      if ( !slabs )
        goto LABEL_29;
      if ( slabs == (TriggerSlab *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( slabs != (TriggerSlab *)-2i64 )
      {
        v13->slabs = (TriggerSlab *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varMapTriggers->slabs);
        goto LABEL_29;
      }
      v15 = varTriggerSlab;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v13->slabs = (TriggerSlab *)g_streamPosGlob.pos;
      varTriggerSlab = (TriggerSlab *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varMapTriggers->slabCount);
      varTriggerSlab = v15;
      if ( slabs == (TriggerSlab *)-1i64 )
        DB_PopSharedData();
LABEL_29:
      v16 = varMapTriggers;
      windings = varMapTriggers->windings;
      if ( !windings )
        goto LABEL_36;
      if ( windings == (TriggerWinding *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( windings != (TriggerWinding *)-2i64 )
      {
        v16->windings = (TriggerWinding *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varMapTriggers->windings);
        goto LABEL_36;
      }
      v18 = varTriggerWinding;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v16->windings = (TriggerWinding *)g_streamPosGlob.pos;
      varTriggerWinding = (TriggerWinding *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varMapTriggers->windingCount);
      varTriggerWinding = v18;
      if ( windings == (TriggerWinding *)-1i64 )
        DB_PopSharedData();
LABEL_36:
      v19 = varMapTriggers;
      windingPoints = varMapTriggers->windingPoints;
      if ( windingPoints )
      {
        if ( windingPoints == (TriggerWindingPoint *)-1i64 )
        {
          DB_PushSharedData();
LABEL_41:
          v21 = varTriggerWindingPoint;
          DB_PatchMem_FixStreamAlignment(3ui64);
          DB_CheckCanIncStreamPos(0i64);
          v19->windingPoints = (TriggerWindingPoint *)g_streamPosGlob.pos;
          varTriggerWindingPoint = (TriggerWindingPoint *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varMapTriggers->windingPointCount);
          varTriggerWindingPoint = v21;
          if ( windingPoints == (TriggerWindingPoint *)-1i64 )
            DB_PopSharedData();
          goto LABEL_43;
        }
        if ( windingPoints == (TriggerWindingPoint *)-2i64 )
          goto LABEL_41;
        v19->windingPoints = (TriggerWindingPoint *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varMapTriggers->windingPoints);
      }
LABEL_43:
      pos = g_streamPosGlob.pos;
      varMapTriggers = (MapTriggers *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_PhysicsCapacities
==============
*/
void Load_PhysicsCapacities(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varPhysicsCapacities, 0x20ui64);
}

/*
==============
Load_PhysicsCapacitiesArray
==============
*/
void Load_PhysicsCapacitiesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varPhysicsCapacities, 32 * count);
}

/*
==============
Load_PhysicsCapacitiesStream
==============
*/
void Load_PhysicsCapacitiesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 19255, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varPhysicsCapacities;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      pos = g_streamPosGlob.pos;
      varPhysicsCapacities = (PhysicsCapacities *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ProcessStructLayout_AddonMapEnts
==============
*/
void Load_ProcessStructLayout_AddonMapEnts(void)
{
  if ( Load_RegisterStructSize("AddonMapEnts", 0x71EC393Eu, 0x80ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("AddonMapEnts", 0x71EC393Eu, "XString", 0x6231894Bu, (const char *)&stru_143C9A1A4, 0x58737A51u, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("AddonMapEnts", 0x71EC393Eu, "int", 0x7103F94Bu, "numEntityChars", 0x669FD120u, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("AddonMapEnts", 0x71EC393Eu, "char", 0x81D46614, "entityString", 0x84FA21CA, 8ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_char();
    Load_RegisterStructMemberSize("AddonMapEnts", 0x71EC393Eu, "MapTriggers", 0x8AADB1CD, "trigger", 0x3E2FE3D4u, 0x18ui64, 0x50ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_MapTriggers();
    Load_RegisterStructMemberSize("AddonMapEnts", 0x71EC393Eu, "uint", 0x53A932A0u, "numSubModels", 0x87138FEC, 0x68ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("AddonMapEnts", 0x71EC393Eu, "cmodel_t", 0x32F67017u, "cmodels", 0x4C6457DDu, 0x70ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_cmodel_t();
    Load_RegisterStructMemberSize("AddonMapEnts", 0x71EC393Eu, "GfxBrushModel", 0xF581D9E2, "models", 0x9420579E, 0x78ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_GfxBrushModel();
  }
}

/*
==============
Load_ProcessStructLayout_AddonMapEntsPtr
==============
*/
void Load_ProcessStructLayout_AddonMapEntsPtr(void)
{
  if ( Load_RegisterStructSize("AddonMapEntsPtr", 0xAA655C4C, 8ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("AddonMapEntsPtr", 0xAA655C4C, "AddonMapEnts", 0x71EC393Eu, (const char *)&queryFormat.fmt + 3, 0, 0i64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("AddonMapEnts", 0x71EC393Eu, 0x80ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("AddonMapEnts", 0x71EC393Eu, "XString", 0x6231894Bu, (const char *)&stru_143C9A1A4, 0x58737A51u, 0i64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_XString();
      Load_RegisterStructMemberSize("AddonMapEnts", 0x71EC393Eu, "int", 0x7103F94Bu, "numEntityChars", 0x669FD120u, 0x10ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_int();
      Load_RegisterStructMemberSize("AddonMapEnts", 0x71EC393Eu, "char", 0x81D46614, "entityString", 0x84FA21CA, 8ui64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_char();
      Load_RegisterStructMemberSize("AddonMapEnts", 0x71EC393Eu, "MapTriggers", 0x8AADB1CD, "trigger", 0x3E2FE3D4u, 0x18ui64, 0x50ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_MapTriggers();
      Load_RegisterStructMemberSize("AddonMapEnts", 0x71EC393Eu, "uint", 0x53A932A0u, "numSubModels", 0x87138FEC, 0x68ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("AddonMapEnts", 0x71EC393Eu, "cmodel_t", 0x32F67017u, "cmodels", 0x4C6457DDu, 0x70ui64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_cmodel_t();
      Load_RegisterStructMemberSize("AddonMapEnts", 0x71EC393Eu, "GfxBrushModel", 0xF581D9E2, "models", 0x9420579E, 0x78ui64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_GfxBrushModel();
    }
  }
}

/*
==============
Load_ProcessStructLayout_AudioPASpeaker
==============
*/
void Load_ProcessStructLayout_AudioPASpeaker(void)
{
  if ( Load_RegisterStructSize("AudioPASpeaker", 0xEA1F90EE, 0x14ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("AudioPASpeaker", 0xEA1F90EE, "vec3_t", 0x375A0610u, "origin", 0xF35F8276, 0i64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("AudioPASpeaker", 0xEA1F90EE, "uint32_t", 0xFC58820E, "nameHash", 0x3F7EA1F1u, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint32_t();
    Load_RegisterStructMemberSize("AudioPASpeaker", 0xEA1F90EE, "uint32_t", 0xFC58820E, "entChannelHash", 0x9262AEDC, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint32_t();
  }
}

/*
==============
Load_ProcessStructLayout_AudioPropagationEdge
==============
*/
void Load_ProcessStructLayout_AudioPropagationEdge(void)
{
  if ( Load_RegisterStructSize("AudioPropagationEdge", 0xE3C16B7F, 4ui64, 2ui64) )
  {
    Load_RegisterStructMemberSize("AudioPropagationEdge", 0xE3C16B7F, "int16_t", 0xD2EC8273, "neighbor", 0xBC983FBE, 0i64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int16_t();
    Load_RegisterStructMemberSize("AudioPropagationEdge", 0xE3C16B7F, "int16_t", 0xD2EC8273, "portalIndex", 0x233BE46Eu, 2ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int16_t();
  }
}

/*
==============
Load_ProcessStructLayout_AudioPropagationNode
==============
*/
void Load_ProcessStructLayout_AudioPropagationNode(void)
{
  if ( Load_RegisterStructSize("AudioPropagationNode", 0xDC986BEC, 0x14ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("AudioPropagationNode", 0xDC986BEC, "vec3_t", 0x375A0610u, "position", 0x60BDC451u, 0i64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("AudioPropagationNode", 0xDC986BEC, "uint16_t", 0x6328C0E4u, "numEdges", 0x10806F26u, 0xCui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
    Load_RegisterStructMemberSize("AudioPropagationNode", 0xDC986BEC, "uint32_t", 0xFC58820E, "edgeStartIndex", 0x275616F7u, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint32_t();
  }
}

/*
==============
Load_ProcessStructLayout_CTAudRvbPanInfo
==============
*/
void Load_ProcessStructLayout_CTAudRvbPanInfo(void)
{
  if ( Load_RegisterStructSize("CTAudRvbPanInfo", 0xF0AE7792, 0x18ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("CTAudRvbPanInfo", 0xF0AE7792, "bool", 0x1F095080u, "hasCustomPosition", 0x11EE9B20u, 0i64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("CTAudRvbPanInfo", 0xF0AE7792, "vec3_t", 0x375A0610u, "position", 0x60BDC451u, 4ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("CTAudRvbPanInfo", 0xF0AE7792, "float", 0x9B987AFE, "maxWallDistance", 0xBD5ECCA7, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("CTAudRvbPanInfo", 0xF0AE7792, "float", 0x9B987AFE, "minReverbVolume", 0x5391311Eu, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
  }
}

/*
==============
Load_ProcessStructLayout_ClientEntAnchor
==============
*/
void Load_ProcessStructLayout_ClientEntAnchor(void)
{
  if ( Load_RegisterStructSize("ClientEntAnchor", 0x58ED1D4Fu, 8ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("ClientEntAnchor", 0x58ED1D4Fu, "scr_string_t", 0x3FD8616Du, (const char *)&stru_143C9A1A4, 0x58737A51u, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
  }
}

/*
==============
Load_ProcessStructLayout_ClientEntityLinkToDefPtr
==============
*/
void Load_ProcessStructLayout_ClientEntityLinkToDefPtr(void)
{
  if ( Load_RegisterStructSize("ClientEntityLinkToDefPtr", 0x970EE456, 8ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ClientEntityLinkToDefPtr", 0x970EE456, "ClientEntityLinkToDef", 0x14A5DFE8u, (const char *)&queryFormat.fmt + 3, 0, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ClientEntityLinkToDef();
  }
}

/*
==============
Load_ProcessStructLayout_ClientExploderDef
==============
*/
void Load_ProcessStructLayout_ClientExploderDef(void)
{
  if ( Load_RegisterStructSize("ClientExploderDef", 0xB96C02CF, 0x40ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ClientExploderDef", 0xB96C02CF, "vec3_t", 0x375A0610u, "origin", 0xF35F8276, 0i64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ClientExploderDef", 0xB96C02CF, "vec3_t", 0x375A0610u, "angles", 0x3DE9D40u, 0xCui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ClientExploderDef", 0xB96C02CF, "int", 0x7103F94Bu, "delayMsec", 0x7C037E7Du, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ClientExploderDef", 0xB96C02CF, "FxCombinedDef", 0xFDB4AEAC, "effect", 0xF1367BCB, 0x20ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_FxCombinedDef();
    Load_RegisterStructMemberSize("ClientExploderDef", 0xB96C02CF, "SndAliasLookup", 0xB9780AC1, "effectSound", 0xC7694A98, 0x28ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_SndAliasLookup();
    Load_RegisterStructMemberSize("ClientExploderDef", 0xB96C02CF, "SndAliasList", 0xA4975C73, "aliasList", 0xBD5B335C, 0x30ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_SndAliasList();
    Load_RegisterStructMemberSize("ClientExploderDef", 0xB96C02CF, "scr_string_t", 0x3FD8616Du, (const char *)&stru_143C9A1A4, 0x58737A51u, 0x38ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
  }
}

/*
==============
Load_ProcessStructLayout_ClientIntervalSoundDef
==============
*/
void Load_ProcessStructLayout_ClientIntervalSoundDef(void)
{
  if ( Load_RegisterStructSize("ClientIntervalSoundDef", 0x938159EC, 0x30ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ClientIntervalSoundDef", 0x938159EC, "vec3_t", 0x375A0610u, "origin", 0xF35F8276, 0i64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ClientIntervalSoundDef", 0x938159EC, "vec3_t", 0x375A0610u, "angles", 0x3DE9D40u, 0xCui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ClientIntervalSoundDef", 0x938159EC, "SndAliasLookup", 0xB9780AC1, "effectSound", 0xC7694A98, 0x18ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_SndAliasLookup();
    Load_RegisterStructMemberSize("ClientIntervalSoundDef", 0x938159EC, "SndAliasList", 0xA4975C73, "aliasList", 0xBD5B335C, 0x20ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_SndAliasList();
    Load_RegisterStructMemberSize("ClientIntervalSoundDef", 0x938159EC, "int", 0x7103F94Bu, "delayMinMsec", 0x5911A2BBu, 0x28ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ClientIntervalSoundDef", 0x938159EC, "int", 0x7103F94Bu, "delayMaxMsec", 0xDB4E6A35, 0x2Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
  }
}

/*
==============
Load_ProcessStructLayout_ClientLoopSoundDef
==============
*/
void Load_ProcessStructLayout_ClientLoopSoundDef(void)
{
  if ( Load_RegisterStructSize("ClientLoopSoundDef", 0x92385D89, 0x28ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ClientLoopSoundDef", 0x92385D89, "vec3_t", 0x375A0610u, "origin", 0xF35F8276, 0i64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ClientLoopSoundDef", 0x92385D89, "vec3_t", 0x375A0610u, "angles", 0x3DE9D40u, 0xCui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ClientLoopSoundDef", 0x92385D89, "SndAliasLookup", 0xB9780AC1, "effectSound", 0xC7694A98, 0x18ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_SndAliasLookup();
    Load_RegisterStructMemberSize("ClientLoopSoundDef", 0x92385D89, "SndAliasList", 0xA4975C73, "aliasList", 0xBD5B335C, 0x20ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_SndAliasList();
  }
}

/*
==============
Load_ProcessStructLayout_ClientMapTriggers
==============
*/
void Load_ProcessStructLayout_ClientMapTriggers(void)
{
  if ( Load_RegisterStructSize("ClientMapTriggers", 0x37AA0C22u, 0x30ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ClientMapTriggers", 0x37AA0C22u, "uint", 0x53A932A0u, "count", 0xACB3A915, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ClientMapTriggers", 0x37AA0C22u, "ClientTriggerModel", 0xC11A8E82, "models", 0x9420579E, 8ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("ClientTriggerModel", 0xC11A8E82, 0xCui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("ClientTriggerModel", 0xC11A8E82, "ushort", 0xB7BE387D, "hullCount", 0x60A24DFAu, 0i64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("ClientTriggerModel", 0xC11A8E82, "uint", 0x53A932A0u, "firstHull", 0xC7832187, 4ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("ClientTriggerModel", 0xC11A8E82, "uint", 0x53A932A0u, "flags", 0x85A76201, 8ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
    }
    Load_RegisterStructMemberSize("ClientMapTriggers", 0x37AA0C22u, "uint", 0x53A932A0u, "hullCount", 0x60A24DFAu, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ClientMapTriggers", 0x37AA0C22u, "ClientTriggerHull", 0x1C6A76BEu, "hulls", 0xFF3F6B24, 0x18ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("ClientTriggerHull", 0x1C6A76BEu, 0x20ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("ClientTriggerHull", 0x1C6A76BEu, "Bounds", 0x1605EBBBu, "triggerSpaceBounds", 0x1824DE61u, 0i64, 0x18ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_Bounds();
      Load_RegisterStructMemberSize("ClientTriggerHull", 0x1C6A76BEu, "ushort", 0xB7BE387D, "slabCount", 0x63D63B1Du, 0x18ui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("ClientTriggerHull", 0x1C6A76BEu, "uint", 0x53A932A0u, "firstSlab", 0xA2252D12, 0x1Cui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
    }
    Load_RegisterStructMemberSize("ClientMapTriggers", 0x37AA0C22u, "uint", 0x53A932A0u, "slabCount", 0x63D63B1Du, 0x20ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ClientMapTriggers", 0x37AA0C22u, "TriggerSlab", 0xE088E744, "slabs", 0x55D8917Bu, 0x28ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_TriggerSlab();
  }
}

/*
==============
Load_ProcessStructLayout_ClientOneshotEffectDef
==============
*/
void Load_ProcessStructLayout_ClientOneshotEffectDef(void)
{
  if ( Load_RegisterStructSize("ClientOneshotEffectDef", 0xF7206E91, 0x38ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ClientOneshotEffectDef", 0xF7206E91, "vec3_t", 0x375A0610u, "origin", 0xF35F8276, 0i64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ClientOneshotEffectDef", 0xF7206E91, "vec3_t", 0x375A0610u, "angles", 0x3DE9D40u, 0xCui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ClientOneshotEffectDef", 0xF7206E91, "float", 0x9B987AFE, "radius", 0xAF4D19C2, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ClientOneshotEffectDef", 0xF7206E91, "int", 0x7103F94Bu, "delayMsec", 0x7C037E7Du, 0x1Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ClientOneshotEffectDef", 0xF7206E91, "FxCombinedDef", 0xFDB4AEAC, "effect", 0xF1367BCB, 0x20ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_FxCombinedDef();
    Load_RegisterStructMemberSize("ClientOneshotEffectDef", 0xF7206E91, "SndAliasLookup", 0xB9780AC1, "effectSound", 0xC7694A98, 0x28ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_SndAliasLookup();
  }
}

/*
==============
Load_ProcessStructLayout_ClientReactiveEntDef
==============
*/
void Load_ProcessStructLayout_ClientReactiveEntDef(void)
{
  if ( Load_RegisterStructSize("ClientReactiveEntDef", 0x20495984u, 0x38ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ClientReactiveEntDef", 0x20495984u, "vec3_t", 0x375A0610u, "origin", 0xF35F8276, 0i64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ClientReactiveEntDef", 0x20495984u, "vec3_t", 0x375A0610u, "angles", 0x3DE9D40u, 0xCui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ClientReactiveEntDef", 0x20495984u, "FxCombinedDef", 0xFDB4AEAC, "effect", 0xF1367BCB, 0x18ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_FxCombinedDef();
    Load_RegisterStructMemberSize("ClientReactiveEntDef", 0x20495984u, "SndAliasLookup", 0xB9780AC1, "effectSound", 0xC7694A98, 0x20ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_SndAliasLookup();
    Load_RegisterStructMemberSize("ClientReactiveEntDef", 0x20495984u, "SndAliasList", 0xA4975C73, "aliasList", 0xBD5B335C, 0x28ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_SndAliasList();
    Load_RegisterStructMemberSize("ClientReactiveEntDef", 0x20495984u, "float", 0x9B987AFE, "radius", 0xAF4D19C2, 0x30ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
  }
}

/*
==============
Load_ProcessStructLayout_ClientRootDef
==============
*/
void Load_ProcessStructLayout_ClientRootDef(void)
{
  if ( Load_RegisterStructSize("ClientRootDef", 0x895659B6, 0x20ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("ClientRootDef", 0x895659B6, "scr_string_t", 0x3FD8616Du, "path", 0x1EA1EF9Du, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("ClientRootDef", 0x895659B6, "vec3_t", 0x375A0610u, "origin", 0xF35F8276, 4ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ClientRootDef", 0x895659B6, "vec3_t", 0x375A0610u, "angles", 0x3DE9D40u, 0x10ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ClientRootDef", 0x895659B6, "float", 0x9B987AFE, "radius", 0xAF4D19C2, 0x1Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
  }
}

/*
==============
Load_ProcessStructLayout_ClientSideEffects
==============
*/
void Load_ProcessStructLayout_ClientSideEffects(void)
{
  if ( Load_RegisterStructSize("ClientSideEffects", 0x107F884Eu, 0x98ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ClientSideEffects", 0x107F884Eu, "uint", 0x53A932A0u, "oneshotEffectCount", 0x94CB64u, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ClientSideEffects", 0x107F884Eu, "ClientOneshotEffectDef", 0xF7206E91, "oneshotEffects", 0x3240ECDEu, 8ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("ClientOneshotEffectDef", 0xF7206E91, 0x38ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ClientOneshotEffectDef", 0xF7206E91, "vec3_t", 0x375A0610u, "origin", 0xF35F8276, 0i64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("ClientOneshotEffectDef", 0xF7206E91, "vec3_t", 0x375A0610u, "angles", 0x3DE9D40u, 0xCui64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("ClientOneshotEffectDef", 0xF7206E91, "float", 0x9B987AFE, "radius", 0xAF4D19C2, 0x18ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float();
      Load_RegisterStructMemberSize("ClientOneshotEffectDef", 0xF7206E91, "int", 0x7103F94Bu, "delayMsec", 0x7C037E7Du, 0x1Cui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_int();
      Load_RegisterStructMemberSize("ClientOneshotEffectDef", 0xF7206E91, "FxCombinedDef", 0xFDB4AEAC, "effect", 0xF1367BCB, 0x20ui64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_FxCombinedDef();
      Load_RegisterStructMemberSize("ClientOneshotEffectDef", 0xF7206E91, "SndAliasLookup", 0xB9780AC1, "effectSound", 0xC7694A98, 0x28ui64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_SndAliasLookup();
    }
    Load_RegisterStructMemberSize("ClientSideEffects", 0x107F884Eu, "SpatialPartition_Tree", 0x9861EC4D, "oneshotEffectsTree", 0x7279C232u, 0x10ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_SpatialPartition_Tree();
    Load_RegisterStructMemberSize("ClientSideEffects", 0x107F884Eu, "uint", 0x53A932A0u, "oneshotSoundCount", 0x7C06148Eu, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ClientSideEffects", 0x107F884Eu, "uint", 0x53A932A0u, "oneshotSoundIndices", 0xA142068u, 0x20ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ClientSideEffects", 0x107F884Eu, "uint", 0x53A932A0u, "exploderCount", 0x339801DCu, 0x28ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ClientSideEffects", 0x107F884Eu, "ClientExploderDef", 0xB96C02CF, "exploders", 0x21C4E1F6u, 0x30ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("ClientExploderDef", 0xB96C02CF, 0x40ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ClientExploderDef", 0xB96C02CF, "vec3_t", 0x375A0610u, "origin", 0xF35F8276, 0i64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("ClientExploderDef", 0xB96C02CF, "vec3_t", 0x375A0610u, "angles", 0x3DE9D40u, 0xCui64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("ClientExploderDef", 0xB96C02CF, "int", 0x7103F94Bu, "delayMsec", 0x7C037E7Du, 0x18ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_int();
      Load_RegisterStructMemberSize("ClientExploderDef", 0xB96C02CF, "FxCombinedDef", 0xFDB4AEAC, "effect", 0xF1367BCB, 0x20ui64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_FxCombinedDef();
      Load_RegisterStructMemberSize("ClientExploderDef", 0xB96C02CF, "SndAliasLookup", 0xB9780AC1, "effectSound", 0xC7694A98, 0x28ui64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_SndAliasLookup();
      Load_RegisterStructMemberSize("ClientExploderDef", 0xB96C02CF, "SndAliasList", 0xA4975C73, "aliasList", 0xBD5B335C, 0x30ui64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_SndAliasList();
      Load_RegisterStructMemberSize("ClientExploderDef", 0xB96C02CF, "scr_string_t", 0x3FD8616Du, (const char *)&stru_143C9A1A4, 0x58737A51u, 0x38ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_scr_string_t();
    }
    Load_RegisterStructMemberSize("ClientSideEffects", 0x107F884Eu, "uint", 0x53A932A0u, "intervalSoundCount", 0xD6F6A175, 0x38ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ClientSideEffects", 0x107F884Eu, "ClientIntervalSoundDef", 0x938159EC, "intervalSounds", 0x267AF3F3u, 0x40ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("ClientIntervalSoundDef", 0x938159EC, 0x30ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ClientIntervalSoundDef", 0x938159EC, "vec3_t", 0x375A0610u, "origin", 0xF35F8276, 0i64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("ClientIntervalSoundDef", 0x938159EC, "vec3_t", 0x375A0610u, "angles", 0x3DE9D40u, 0xCui64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("ClientIntervalSoundDef", 0x938159EC, "SndAliasLookup", 0xB9780AC1, "effectSound", 0xC7694A98, 0x18ui64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_SndAliasLookup();
      Load_RegisterStructMemberSize("ClientIntervalSoundDef", 0x938159EC, "SndAliasList", 0xA4975C73, "aliasList", 0xBD5B335C, 0x20ui64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_SndAliasList();
      Load_RegisterStructMemberSize("ClientIntervalSoundDef", 0x938159EC, "int", 0x7103F94Bu, "delayMinMsec", 0x5911A2BBu, 0x28ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_int();
      Load_RegisterStructMemberSize("ClientIntervalSoundDef", 0x938159EC, "int", 0x7103F94Bu, "delayMaxMsec", 0xDB4E6A35, 0x2Cui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_int();
    }
    Load_RegisterStructMemberSize("ClientSideEffects", 0x107F884Eu, "uint", 0x53A932A0u, "loopSoundCount", 0xF95FC514, 0x48ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ClientSideEffects", 0x107F884Eu, "ClientLoopSoundDef", 0x92385D89, "loopSounds", 0x8F2213AE, 0x50ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("ClientLoopSoundDef", 0x92385D89, 0x28ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ClientLoopSoundDef", 0x92385D89, "vec3_t", 0x375A0610u, "origin", 0xF35F8276, 0i64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("ClientLoopSoundDef", 0x92385D89, "vec3_t", 0x375A0610u, "angles", 0x3DE9D40u, 0xCui64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("ClientLoopSoundDef", 0x92385D89, "SndAliasLookup", 0xB9780AC1, "effectSound", 0xC7694A98, 0x18ui64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_SndAliasLookup();
      Load_RegisterStructMemberSize("ClientLoopSoundDef", 0x92385D89, "SndAliasList", 0xA4975C73, "aliasList", 0xBD5B335C, 0x20ui64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_SndAliasList();
    }
    Load_RegisterStructMemberSize("ClientSideEffects", 0x107F884Eu, "SpatialPartition_Tree", 0x9861EC4D, "soundsSpatialTree", 0x50EF52E4u, 0x58ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_SpatialPartition_Tree();
    Load_RegisterStructMemberSize("ClientSideEffects", 0x107F884Eu, "uint", 0x53A932A0u, "reactiveEntCount", 0x185695BDu, 0x60ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ClientSideEffects", 0x107F884Eu, "ClientReactiveEntDef", 0x20495984u, "reactiveEnts", 0x62F46ADBu, 0x68ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("ClientReactiveEntDef", 0x20495984u, 0x38ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ClientReactiveEntDef", 0x20495984u, "vec3_t", 0x375A0610u, "origin", 0xF35F8276, 0i64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("ClientReactiveEntDef", 0x20495984u, "vec3_t", 0x375A0610u, "angles", 0x3DE9D40u, 0xCui64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("ClientReactiveEntDef", 0x20495984u, "FxCombinedDef", 0xFDB4AEAC, "effect", 0xF1367BCB, 0x18ui64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_FxCombinedDef();
      Load_RegisterStructMemberSize("ClientReactiveEntDef", 0x20495984u, "SndAliasLookup", 0xB9780AC1, "effectSound", 0xC7694A98, 0x20ui64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_SndAliasLookup();
      Load_RegisterStructMemberSize("ClientReactiveEntDef", 0x20495984u, "SndAliasList", 0xA4975C73, "aliasList", 0xBD5B335C, 0x28ui64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_SndAliasList();
      Load_RegisterStructMemberSize("ClientReactiveEntDef", 0x20495984u, "float", 0x9B987AFE, "radius", 0xAF4D19C2, 0x30ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float();
    }
    Load_RegisterStructMemberSize("ClientSideEffects", 0x107F884Eu, "SpatialPartition_Tree", 0x9861EC4D, "reactiveSpatialTree", 0x6AB7E043u, 0x70ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_SpatialPartition_Tree();
    Load_RegisterStructMemberSize("ClientSideEffects", 0x107F884Eu, "uint", 0x53A932A0u, "rootCount", 0x3D105DCDu, 0x78ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ClientSideEffects", 0x107F884Eu, "ClientRootDef", 0x895659B6, "roots", 0xDB83FB0B, 0x80ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("ClientRootDef", 0x895659B6, 0x20ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("ClientRootDef", 0x895659B6, "scr_string_t", 0x3FD8616Du, "path", 0x1EA1EF9Du, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_scr_string_t();
      Load_RegisterStructMemberSize("ClientRootDef", 0x895659B6, "vec3_t", 0x375A0610u, "origin", 0xF35F8276, 4ui64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("ClientRootDef", 0x895659B6, "vec3_t", 0x375A0610u, "angles", 0x3DE9D40u, 0x10ui64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("ClientRootDef", 0x895659B6, "float", 0x9B987AFE, "radius", 0xAF4D19C2, 0x1Cui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float();
    }
    Load_RegisterStructMemberSize("ClientSideEffects", 0x107F884Eu, "uint", 0x53A932A0u, "parentCount", 0x8C63BD35, 0x88ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ClientSideEffects", 0x107F884Eu, "ushort", 0xB7BE387D, "parents", 0x5B8C39B3u, 0x90ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ushort();
  }
}

/*
==============
Load_ProcessStructLayout_ClientTriggerBlend
==============
*/
void Load_ProcessStructLayout_ClientTriggerBlend(void)
{
  if ( Load_RegisterStructSize("ClientTriggerBlend", 0x959B4924, 0x10ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ClientTriggerBlend", 0x959B4924, "ushort", 0xB7BE387D, "numClientTriggerBlendNodes", 0xE0C4FDBu, 0i64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("ClientTriggerBlend", 0x959B4924, "ClientTriggerBlendNode", 0x52E248D8u, "blendNodes", 0x3E35AF98u, 8ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("ClientTriggerBlendNode", 0x52E248D8u, 0x1Cui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("ClientTriggerBlendNode", 0x52E248D8u, "vec3_t", 0x375A0610u, "pointA", 0xEDCE50F7, 0i64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("ClientTriggerBlendNode", 0x52E248D8u, "vec3_t", 0x375A0610u, "pointB", 0xEDCE50F4, 0xCui64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("ClientTriggerBlendNode", 0x52E248D8u, "ushort", 0xB7BE387D, "triggerA", 0xB963A6FD, 0x18ui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("ClientTriggerBlendNode", 0x52E248D8u, "ushort", 0xB7BE387D, "triggerB", 0xB963A6FE, 0x1Aui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
    }
  }
}

/*
==============
Load_ProcessStructLayout_ClientTriggerBlendNode
==============
*/
void Load_ProcessStructLayout_ClientTriggerBlendNode(void)
{
  if ( Load_RegisterStructSize("ClientTriggerBlendNode", 0x52E248D8u, 0x1Cui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("ClientTriggerBlendNode", 0x52E248D8u, "vec3_t", 0x375A0610u, "pointA", 0xEDCE50F7, 0i64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ClientTriggerBlendNode", 0x52E248D8u, "vec3_t", 0x375A0610u, "pointB", 0xEDCE50F4, 0xCui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ClientTriggerBlendNode", 0x52E248D8u, "ushort", 0xB7BE387D, "triggerA", 0xB963A6FD, 0x18ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("ClientTriggerBlendNode", 0x52E248D8u, "ushort", 0xB7BE387D, "triggerB", 0xB963A6FE, 0x1Aui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
  }
}

/*
==============
Load_ProcessStructLayout_ClientTriggerHull
==============
*/
void Load_ProcessStructLayout_ClientTriggerHull(void)
{
  if ( Load_RegisterStructSize("ClientTriggerHull", 0x1C6A76BEu, 0x20ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("ClientTriggerHull", 0x1C6A76BEu, "Bounds", 0x1605EBBBu, "triggerSpaceBounds", 0x1824DE61u, 0i64, 0x18ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_Bounds();
    Load_RegisterStructMemberSize("ClientTriggerHull", 0x1C6A76BEu, "ushort", 0xB7BE387D, "slabCount", 0x63D63B1Du, 0x18ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("ClientTriggerHull", 0x1C6A76BEu, "uint", 0x53A932A0u, "firstSlab", 0xA2252D12, 0x1Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_ClientTriggerModel
==============
*/
void Load_ProcessStructLayout_ClientTriggerModel(void)
{
  if ( Load_RegisterStructSize("ClientTriggerModel", 0xC11A8E82, 0xCui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("ClientTriggerModel", 0xC11A8E82, "ushort", 0xB7BE387D, "hullCount", 0x60A24DFAu, 0i64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("ClientTriggerModel", 0xC11A8E82, "uint", 0x53A932A0u, "firstHull", 0xC7832187, 4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ClientTriggerModel", 0xC11A8E82, "uint", 0x53A932A0u, "flags", 0x85A76201, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_ClientTriggers
==============
*/
void Load_ProcessStructLayout_ClientTriggers(void)
{
  if ( Load_RegisterStructSize("ClientTriggers", 0x86DE4A02, 0xB0ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ClientTriggers", 0x86DE4A02, "ClientMapTriggers", 0x37AA0C22u, "trigger", 0x3E2FE3D4u, 0i64, 0x30ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ClientMapTriggers();
    Load_RegisterStructMemberSize("ClientTriggers", 0x86DE4A02, "uint", 0x53A932A0u, "triggerStringLength", 0xCDBF162F, 0x30ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ClientTriggers", 0x86DE4A02, "char", 0x81D46614, "triggerString", 0xC1E592EF, 0x38ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_char();
    Load_RegisterStructMemberSize("ClientTriggers", 0x86DE4A02, "short", 0x8B9348A6, "visionSetTriggers", 0x84C19C77, 0x40ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_short();
    Load_RegisterStructMemberSize("ClientTriggers", 0x86DE4A02, "uint16_t", 0x6328C0E4u, "triggerType", 0x486C207Cu, 0x48ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_uint16_t();
    Load_RegisterStructMemberSize("ClientTriggers", 0x86DE4A02, "vec3_t", 0x375A0610u, "origins", 0x955A5FB1, 0x50ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ClientTriggers", 0x86DE4A02, "float", 0x9B987AFE, "scriptDelay", 0x2CE9EBE6u, 0x58ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ClientTriggers", 0x86DE4A02, "float", 0x9B987AFE, "priority", 0xC76EC948, 0x60ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ClientTriggers", 0x86DE4A02, "short", 0x8B9348A6, "audioTriggers", 0x981DC369, 0x68ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_short();
    Load_RegisterStructMemberSize("ClientTriggers", 0x86DE4A02, "short", 0x8B9348A6, "blendLookup", 0x95BC4D77, 0x70ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_short();
    Load_RegisterStructMemberSize("ClientTriggers", 0x86DE4A02, "short", 0x8B9348A6, "npcTriggers", 0x3AFFAAAu, 0x78ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_short();
    Load_RegisterStructMemberSize("ClientTriggers", 0x86DE4A02, "short", 0x8B9348A6, "audioStateIds", 0x2F2A88B1u, 0x80ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_short();
    Load_RegisterStructMemberSize("ClientTriggers", 0x86DE4A02, "SndBankTransientPtr", 0xB80D5CD7, "detailSoundBank", 0xA5045A02, 0x88ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_SndBankTransientPtr();
    Load_RegisterStructMemberSize("ClientTriggers", 0x86DE4A02, "CTAudRvbPanInfo", 0xF0AE7792, "audioRvbPanInfo", 0x11F1D499u, 0x90ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("CTAudRvbPanInfo", 0xF0AE7792, 0x18ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("CTAudRvbPanInfo", 0xF0AE7792, "bool", 0x1F095080u, "hasCustomPosition", 0x11EE9B20u, 0i64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_bool();
      Load_RegisterStructMemberSize("CTAudRvbPanInfo", 0xF0AE7792, "vec3_t", 0x375A0610u, "position", 0x60BDC451u, 4ui64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("CTAudRvbPanInfo", 0xF0AE7792, "float", 0x9B987AFE, "maxWallDistance", 0xBD5ECCA7, 0x10ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float();
      Load_RegisterStructMemberSize("CTAudRvbPanInfo", 0xF0AE7792, "float", 0x9B987AFE, "minReverbVolume", 0x5391311Eu, 0x14ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float();
    }
    Load_RegisterStructMemberSize("ClientTriggers", 0x86DE4A02, "short", 0x8B9348A6, "parent", 0x9E3DF740, 0x98ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_short();
    Load_RegisterStructMemberSize("ClientTriggers", 0x86DE4A02, "ClientEntityLinkToDefPtr", 0x970EE456, "linkTo", 0x15FFEE83u, 0xA0ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("ClientEntityLinkToDefPtr", 0x970EE456, 8ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ClientEntityLinkToDefPtr", 0x970EE456, "ClientEntityLinkToDef", 0x14A5DFE8u, (const char *)&queryFormat.fmt + 3, 0, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ClientEntityLinkToDef();
    }
    Load_RegisterStructMemberSize("ClientTriggers", 0x86DE4A02, "SpatialPartition_Tree", 0x9861EC4D, "spatialTree", 0xDA98FA18, 0xA8ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_SpatialPartition_Tree();
  }
}

/*
==============
Load_ProcessStructLayout_CollMapLookupEntry
==============
*/
void Load_ProcessStructLayout_CollMapLookupEntry(void)
{
  if ( Load_RegisterStructSize("CollMapLookupEntry", 0x93EADBAE, 0x10ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("CollMapLookupEntry", 0x93EADBAE, "XString", 0x6231894Bu, "targetName", 0x574018F6u, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("CollMapLookupEntry", 0x93EADBAE, "int", 0x7103F94Bu, "brushIndex", 0x93FDD734, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
  }
}

/*
==============
Load_ProcessStructLayout_CollisionHeatmapEntry
==============
*/
void Load_ProcessStructLayout_CollisionHeatmapEntry(void)
{
  if ( Load_RegisterStructSize("CollisionHeatmapEntry", 0x80077E78, 0x20ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("CollisionHeatmapEntry", 0x80077E78, "int", 0x7103F94Bu, "vertexCount", 0xECA9CA7F, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("CollisionHeatmapEntry", 0x80077E78, "float", 0x9B987AFE, "vertexDensity", 0xB38543EE, 4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("CollisionHeatmapEntry", 0x80077E78, "vec3_t", 0x375A0610u, "minExtent", 0x1D294B3Cu, 8ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("CollisionHeatmapEntry", 0x80077E78, "vec3_t", 0x375A0610u, "maxExtent", 0x26512636u, 0x14ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
  }
}

/*
==============
Load_ProcessStructLayout_CollisionTile
==============
*/
void Load_ProcessStructLayout_CollisionTile(void)
{
  if ( Load_RegisterStructSize("CollisionTile", 0xD758F9A4, 0x48ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("CollisionTile", 0xD758F9A4, "XString", 0x6231894Bu, (const char *)&stru_143C9A1A4, 0x58737A51u, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("CollisionTile", 0xD758F9A4, "uint", 0x53A932A0u, "index", 0x972C76D4, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("CollisionTile", 0xD758F9A4, "byte", 0x363F8F7Eu, "gridId", 0xA9A182BF, 0xCui64, 2ui64, 2ui64, 0, 0);
    Load_ProcessStructLayout_byte();
    Load_RegisterStructMemberSize("CollisionTile", 0xD758F9A4, "vec3_t", 0x375A0610u, "origin", 0xF35F8276, 0x10ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("CollisionTile", 0xD758F9A4, "StaticModelCollisionCompressedModelList", 0xBC514C2F, "staticModelCollision", 0x63D06F37u, 0x20ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("StaticModelCollisionCompressedModelList", 0xBC514C2F, 0x20ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("StaticModelCollisionCompressedModelList", 0xBC514C2F, "uint", 0x53A932A0u, "numModels", 0x8499E51E, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("StaticModelCollisionCompressedModelList", 0xBC514C2F, "StaticModelCollisionCompressedModel", 0xE3210E2B, "models", 0x9420579E, 8ui64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_StaticModelCollisionCompressedModel();
      Load_RegisterStructMemberSize("StaticModelCollisionCompressedModelList", 0xBC514C2F, "uint", 0x53A932A0u, "structureMemoryCost", 0xA1091055, 0x10ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("StaticModelCollisionCompressedModelList", 0xBC514C2F, "uint", 0x53A932A0u, "numInstances", 0x925955C8, 0x14ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("StaticModelCollisionCompressedModelList", 0xBC514C2F, "uint", 0x53A932A0u, "assetCost", 0xC91E0027, 0x18ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
    }
    Load_RegisterStructMemberSize("CollisionTile", 0xD758F9A4, "uint", 0x53A932A0u, "havokTileShapeDataSize", 0xDB38F2DD, 0x28ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("CollisionTile", 0xD758F9A4, "alignHavokShapeData_t", 0xFB84D230, "havokTileShapeData", 0xB2E16E2u, 0x30ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_alignHavokShapeData_t();
    Load_RegisterStructMemberSize("CollisionTile", 0xD758F9A4, "char", 0x81D46614, "havokTileShapePointer", 0xFDA2DDD5, 0x38ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_char();
    Load_RegisterStructMemberSize("CollisionTile", 0xD758F9A4, "uint", 0x53A932A0u, "worldCollisionShapeIdx", 0x11A18DBCu, 0x40ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_CollisionTilePtr
==============
*/
void Load_ProcessStructLayout_CollisionTilePtr(void)
{
  if ( Load_RegisterStructSize("CollisionTilePtr", 0x3BBD22B2u, 8ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("CollisionTilePtr", 0x3BBD22B2u, "CollisionTile", 0xD758F9A4, (const char *)&queryFormat.fmt + 3, 0, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_CollisionTile();
  }
}

/*
==============
Load_ProcessStructLayout_CreateFxAssetData
==============
*/
void Load_ProcessStructLayout_CreateFxAssetData(void)
{
  if ( Load_RegisterStructSize("CreateFxAssetData", 0x9DB071BA, 0x10ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("CreateFxAssetData", 0x9DB071BA, "ushort", 0xB7BE387D, "fxPaletteCount", 0x83033DC0, 0i64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("CreateFxAssetData", 0x9DB071BA, "CreateFxPaletteDef", 0xD85FBC84, "fxPalette", 0xC3A84BE3, 8ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("CreateFxPaletteDef", 0xD85FBC84, 0xCui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("CreateFxPaletteDef", 0xD85FBC84, "scr_string_t", 0x3FD8616Du, "aliasName", 0x80761C1D, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_scr_string_t();
      Load_RegisterStructMemberSize("CreateFxPaletteDef", 0xD85FBC84, "scr_string_t", 0x3FD8616Du, "effectPath", 0x14E9168Eu, 4ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_scr_string_t();
      Load_RegisterStructMemberSize("CreateFxPaletteDef", 0xD85FBC84, "ushort", 0xB7BE387D, "refCount", 0xA13639D4, 8ui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
    }
  }
}

/*
==============
Load_ProcessStructLayout_CreateFxPaletteDef
==============
*/
void Load_ProcessStructLayout_CreateFxPaletteDef(void)
{
  if ( Load_RegisterStructSize("CreateFxPaletteDef", 0xD85FBC84, 0xCui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("CreateFxPaletteDef", 0xD85FBC84, "scr_string_t", 0x3FD8616Du, "aliasName", 0x80761C1D, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("CreateFxPaletteDef", 0xD85FBC84, "scr_string_t", 0x3FD8616Du, "effectPath", 0x14E9168Eu, 4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("CreateFxPaletteDef", 0xD85FBC84, "ushort", 0xB7BE387D, "refCount", 0xA13639D4, 8ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
  }
}

/*
==============
Load_ProcessStructLayout_DynEntityList
==============
*/
void Load_ProcessStructLayout_DynEntityList(void)
{
  if ( Load_RegisterStructSize("DynEntityList", 0x7861615Cu, 0x40ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("DynEntityList", 0x7861615Cu, "XString", 0x6231894Bu, (const char *)&stru_143C9A1A4, 0x58737A51u, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("DynEntityList", 0x7861615Cu, "DynEntityListId", 0xFC0E7043, "index", 0x972C76D4, 8ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_DynEntityListId();
    Load_RegisterStructMemberSize("DynEntityList", 0x7861615Cu, "DynEntityLocalId", 0x3EBE779Eu, "dynEntCount[DYNENT_BASIS_MODEL]", 0xD5529FFA, 0xCui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_DynEntityLocalId();
    Load_RegisterStructMemberSize("DynEntityList", 0x7861615Cu, "DynEntityLocalId", 0x3EBE779Eu, "dynEntCount[DYNENT_BASIS_BRUSH]", 0xAE4C2957, 0xCui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_DynEntityLocalId();
    Load_RegisterStructMemberSize("DynEntityList", 0x7861615Cu, "DynEntityLocalId", 0x3EBE779Eu, "dynEntCountTotal", 0xAC88F8BD, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_DynEntityLocalId();
    Load_RegisterStructMemberSize("DynEntityList", 0x7861615Cu, "DynEntityDef", 0x69384021u, "dynEntDefList[DYNENT_BASIS_MODEL]", 0xC0D7B9EA, 0x18ui64, 0x10ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_DynEntityDef();
    Load_RegisterStructMemberSize("DynEntityList", 0x7861615Cu, "DynEntityDef", 0x69384021u, "dynEntDefList[DYNENT_BASIS_BRUSH]", 0xBB40DDE7, 0x18ui64, 0x10ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_DynEntityDef();
    Load_RegisterStructMemberSize("DynEntityList", 0x7861615Cu, "SpatialPartition_TransientPopulationPtr", 0x5C3CCB16u, "dynEntSpatialPopulation", 0xF282335u, 0x28ui64, 0x10ui64, 2ui64, 0, 0);
    Load_ProcessStructLayout_SpatialPartition_TransientPopulationPtr();
    Load_RegisterStructMemberSize("DynEntityList", 0x7861615Cu, "SpatialPartition_Population_Node", 0x8C672CEB, "dynEntNoSpatialList", 0xA44FB243, 0x38ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_SpatialPartition_Population_Node();
    Load_RegisterStructMemberSize("DynEntityList", 0x7861615Cu, "SpatialPartition_Population_Node", 0x8C672CEB, "dynEntNoSpatialListTail", 0xEFDEF69D, 0x3Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_SpatialPartition_Population_Node();
  }
}

/*
==============
Load_ProcessStructLayout_DynEntityListPtr
==============
*/
void Load_ProcessStructLayout_DynEntityListPtr(void)
{
  if ( Load_RegisterStructSize("DynEntityListPtr", 0x277C79DAu, 8ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("DynEntityListPtr", 0x277C79DAu, "DynEntityList", 0x7861615Cu, (const char *)&queryFormat.fmt + 3, 0, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_DynEntityList();
  }
}

/*
==============
Load_ProcessStructLayout_MapEdgeList
==============
*/
void Load_ProcessStructLayout_MapEdgeList(void)
{
  if ( Load_RegisterStructSize("MapEdgeList", 0x92CBD6CD, 0xA0ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("MapEdgeList", 0x92CBD6CD, "XString", 0x6231894Bu, (const char *)&stru_143C9A1A4, 0x58737A51u, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("MapEdgeList", 0x92CBD6CD, "vec3_t", 0x375A0610u, "mins", 0xED395B2F, 8ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("MapEdgeList", 0x92CBD6CD, "vec3_t", 0x375A0610u, "maxs", 0xDB25B73D, 0x14ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("MapEdgeList", 0x92CBD6CD, "uint", 0x53A932A0u, "transientIndex", 0x99AE86B6, 0x20ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapEdgeList", 0x92CBD6CD, "uint", 0x53A932A0u, "dynamicQueryTypes", 0x64C62E9Cu, 0x24ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapEdgeList", 0x92CBD6CD, "uint", 0x53A932A0u, "staticQueryTypes", 0xDC72FCD9, 0x28ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapEdgeList", 0x92CBD6CD, "uint", 0x53A932A0u, "numDynamicEdges", 0x699C3AABu, 0x2Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapEdgeList", 0x92CBD6CD, "uint", 0x53A932A0u, "numStaticEdges", 0xB46D5AEC, 0x30ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapEdgeList", 0x92CBD6CD, "bool", 0x1F095080u, "valid", 0x16597DD6u, 0x34ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("MapEdgeList", 0x92CBD6CD, "uint", 0x53A932A0u, "numEdges", 0x10806F26u, 0x38ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapEdgeList", 0x92CBD6CD, "lineSegmentFloat4_t", 0x989972Eu, "edges", 0x7351C2A6u, 0x40ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_lineSegmentFloat4_t();
    Load_RegisterStructMemberSize("MapEdgeList", 0x92CBD6CD, "FlaggedEdgeMetadata", 0x7FFD87FEu, "edgeMetadata", 0xCF1BE9D0, 0x48ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_FlaggedEdgeMetadata();
    Load_RegisterStructMemberSize("MapEdgeList", 0x92CBD6CD, "uint", 0x53A932A0u, "numEdgeOctrees", 0xD67FE588, 0x50ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapEdgeList", 0x92CBD6CD, "PMROctreeMetadata", 0x9A39DF0C, "edgeOctrees", 0xA52A9D08, 0x58ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_PMROctreeMetadata();
    Load_RegisterStructMemberSize("MapEdgeList", 0x92CBD6CD, "uint", 0x53A932A0u, "numEdgeOctreeNodeSet", 0xE9688103, 0x60ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapEdgeList", 0x92CBD6CD, "PMROctreeNodeSet", 0x57292B5u, "edgeOctreeNodeSets", 0x5B57024Au, 0x68ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_PMROctreeNodeSet();
    Load_RegisterStructMemberSize("MapEdgeList", 0x92CBD6CD, "uint", 0x53A932A0u, "numEdgeIndices", 0x19C43E96u, 0x70ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapEdgeList", 0x92CBD6CD, "EdgeIndex", 0xF5998DB9, "edgeIndices", 0xE86EF616, 0x78ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_EdgeIndex();
    Load_RegisterStructMemberSize("MapEdgeList", 0x92CBD6CD, "uint", 0x53A932A0u, "numEdgeAdjacencyMetadata", 0x52611008u, 0x80ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapEdgeList", 0x92CBD6CD, "EdgeAdjacencyMetadata", 0xB5A03068, "edgeAdjacencyMetadata", 0x646E4388u, 0x88ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_EdgeAdjacencyMetadata();
    Load_RegisterStructMemberSize("MapEdgeList", 0x92CBD6CD, "uint", 0x53A932A0u, "numEdgeAdjacency", 0x74CF683Fu, 0x90ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapEdgeList", 0x92CBD6CD, "EdgeAdjacency", 0xD50874DF, "edgeAdjacency", 0x347ABBFu, 0x98ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_EdgeAdjacency();
  }
}

/*
==============
Load_ProcessStructLayout_MapEdgeListPtr
==============
*/
void Load_ProcessStructLayout_MapEdgeListPtr(void)
{
  if ( Load_RegisterStructSize("MapEdgeListPtr", 0x778E7E71u, 8ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("MapEdgeListPtr", 0x778E7E71u, "MapEdgeList", 0x92CBD6CD, (const char *)&queryFormat.fmt + 3, 0, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_MapEdgeList();
  }
}

/*
==============
Load_ProcessStructLayout_MapEnts
==============
*/
void Load_ProcessStructLayout_MapEnts(void)
{
  if ( Load_RegisterStructSize("MapEnts", 0xCEF67210, 0x428ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "XString", 0x6231894Bu, (const char *)&stru_143C9A1A4, 0x58737A51u, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "int", 0x7103F94Bu, "numEntityChars", 0x669FD120u, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "char", 0x81D46614, "entityString", 0x84FA21CA, 8ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_char();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "MapTriggers", 0x8AADB1CD, "trigger", 0x3E2FE3D4u, 0x18ui64, 0x50ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_MapTriggers();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "ClientTriggers", 0x86DE4A02, "clientTrigger", 0x31DCB8CBu, 0x68ui64, 0xB0ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ClientTriggers();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "ClientTriggerBlend", 0x959B4924, "clientTriggerBlend", 0xA253F2C4, 0x118ui64, 0x10ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ClientTriggerBlend", 0x959B4924, 0x10ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ClientTriggerBlend", 0x959B4924, "ushort", 0xB7BE387D, "numClientTriggerBlendNodes", 0xE0C4FDBu, 0i64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("ClientTriggerBlend", 0x959B4924, "ClientTriggerBlendNode", 0x52E248D8u, "blendNodes", 0x3E35AF98u, 8ui64, 8ui64, 0i64, 1, 0);
      if ( Load_RegisterStructSize("ClientTriggerBlendNode", 0x52E248D8u, 0x1Cui64, 4ui64) )
      {
        Load_RegisterStructMemberSize("ClientTriggerBlendNode", 0x52E248D8u, "vec3_t", 0x375A0610u, "pointA", 0xEDCE50F7, 0i64, 0xCui64, 0i64, 0, 0);
        Load_ProcessStructLayout_vec3_t();
        Load_RegisterStructMemberSize("ClientTriggerBlendNode", 0x52E248D8u, "vec3_t", 0x375A0610u, "pointB", 0xEDCE50F4, 0xCui64, 0xCui64, 0i64, 0, 0);
        Load_ProcessStructLayout_vec3_t();
        Load_RegisterStructMemberSize("ClientTriggerBlendNode", 0x52E248D8u, "ushort", 0xB7BE387D, "triggerA", 0xB963A6FD, 0x18ui64, 2ui64, 0i64, 0, 0);
        Load_ProcessStructLayout_ushort();
        Load_RegisterStructMemberSize("ClientTriggerBlendNode", 0x52E248D8u, "ushort", 0xB7BE387D, "triggerB", 0xB963A6FE, 0x1Aui64, 2ui64, 0i64, 0, 0);
        Load_ProcessStructLayout_ushort();
      }
    }
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "SpawnPointRecordList", 0x43A9145Eu, "spawnList", 0xF0C15CED, 0x128ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_SpawnPointRecordList();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "SplineRecordList", 0xD2F9D5C8, "splineList", 0x503D9DAFu, 0x138ui64, 0x10ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("SplineRecordList", 0xD2F9D5C8, 0x10ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("SplineRecordList", 0xD2F9D5C8, "ushort", 0xB7BE387D, "splineCount", 0xF729C038, 0i64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("SplineRecordList", 0xD2F9D5C8, "SplinePointRecordList", 0xD1DE6C4u, "splines", 0x8869D242, 8ui64, 8ui64, 0i64, 1, 0);
      if ( Load_RegisterStructSize("SplinePointRecordList", 0xD1DE6C4u, 0x10ui64, 8ui64) )
      {
        Load_RegisterStructMemberSize("SplinePointRecordList", 0xD1DE6C4u, "ushort", 0xB7BE387D, "splinePointCount", 0x2CC64E4u, 0i64, 2ui64, 0i64, 0, 0);
        Load_ProcessStructLayout_ushort();
        Load_RegisterStructMemberSize("SplinePointRecordList", 0xD1DE6C4u, "float", 0x9B987AFE, "splineLength", 0x73D3D513u, 4ui64, 4ui64, 0i64, 0, 0);
        Load_ProcessStructLayout_float();
        Load_RegisterStructMemberSize("SplinePointRecordList", 0xD1DE6C4u, "SplinePointEntityRecord", 0x8A0E650D, "splinePoints", 0xB689EE5E, 8ui64, 8ui64, 0i64, 1, 0);
        Load_ProcessStructLayout_SplinePointEntityRecord();
      }
    }
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "uint", 0x53A932A0u, "havokEntsShapeDataSize", 0xD891EE33, 0x148ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "alignHavokShapeData_t", 0xFB84D230, "havokEntsShapeData", 0x485D3508u, 0x150ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_alignHavokShapeData_t();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "uint", 0x53A932A0u, "numSubModels", 0x87138FEC, 0x158ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "cmodel_t", 0x32F67017u, "cmodels", 0x4C6457DDu, 0x160ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_cmodel_t();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "uint", 0x53A932A0u, "edgeListUsedQueryTypes", 0x31E57DABu, 0x168ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "uint", 0x53A932A0u, "numEdgeLists", 0xF5D7402u, 0x16Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "MapEdgeListPtr", 0x778E7E71u, "edgeLists", 0x7CD07F82u, 0x170ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("MapEdgeListPtr", 0x778E7E71u, 8ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("MapEdgeListPtr", 0x778E7E71u, "MapEdgeList", 0x92CBD6CD, (const char *)&queryFormat.fmt + 3, 0, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_MapEdgeList();
    }
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "SpatialPartition_Tree", 0x9861EC4D, "edgeListSpatialTree", 0xCBB12299, 0x178ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_SpatialPartition_Tree();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "uint", 0x53A932A0u, "numClientModels", 0xC15DB25F, 0x180ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "CM_ClientModel", 0xE3182875, "clientModels", 0x981C90DF, 0x188ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_CM_ClientModel();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "DynEntityId", 0x8165C1BB, "dynEntCount[DYNENT_BASIS_MODEL]", 0xD5529FFA, 0x190ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_DynEntityId();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "DynEntityId", 0x8165C1BB, "dynEntCount[DYNENT_BASIS_BRUSH]", 0xAE4C2957, 0x190ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_DynEntityId();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "DynEntityId", 0x8165C1BB, "dynEntCountTotal", 0xAC88F8BD, 0x198ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_DynEntityId();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "DynEntityListId", 0xFC0E7043, "dynEntityListsCount", 0x95D6711C, 0x19Cui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_DynEntityListId();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "DynEntityListId", 0xFC0E7043, "dynEntListIds", 0xAB94B9F6, 0x1A0ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_DynEntityListId();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "DynEntityClientId", 0xDB213022, "dynEntNoSpatialCount[DYNENT_BASIS_MODEL]", 0xFFB514E3, 0x1B8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_DynEntityClientId();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "DynEntityClientId", 0xDB213022, "dynEntNoSpatialCount[DYNENT_BASIS_BRUSH]", 0x4317FCBAu, 0x1B8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_DynEntityClientId();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "DynEntityClientId", 0xDB213022, "dynEntMaxClientHistoryCount", 0x937F136A, 0x1BCui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_DynEntityClientId();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "byte", 0x363F8F7Eu, "dynEntMaxPosePartCount", 0x4A26BD9Fu, 0x1BEui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_byte();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "uint", 0x53A932A0u, "dynEntsWithExtraPosePartsCount", 0x6CC8FE03u, 0x1C0ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "SpatialPartition_PopulationPtr", 0x4CEE81B2u, "dynEntSpatialPopulation", 0xF282335u, 0x1C8ui64, 0x10ui64, 2ui64, 0, 0);
    Load_ProcessStructLayout_SpatialPartition_PopulationPtr();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "SpatialPartition_Population_TransientMapPtr", 0x4DA1CA9Bu, "dynEntSpatialTransientMap", 0xD1DF3918, 0x1D8ui64, 0x10ui64, 2ui64, 0, 0);
    Load_ProcessStructLayout_SpatialPartition_Population_TransientMapPtr();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "SpatialPartition_Population_Node", 0x8C672CEB, "dynEntNoSpatialList", 0xA44FB243, 0x1E8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_SpatialPartition_Population_Node();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "uint", 0x53A932A0u, "clientEntAnchorCount", 0x4F5B5EF4u, 0x1ECui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "ClientEntAnchor", 0x58ED1D4Fu, "clientEntAnchors", 0x61E6904Eu, 0x1F0ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("ClientEntAnchor", 0x58ED1D4Fu, 8ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("ClientEntAnchor", 0x58ED1D4Fu, "scr_string_t", 0x3FD8616Du, (const char *)&stru_143C9A1A4, 0x58737A51u, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_scr_string_t();
    }
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "ScriptableMapEnts", 0xBF4EC84F, "scriptableMapEnts", 0x9DCA066F, 0x1F8ui64, 0xD8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableMapEnts();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "SpawnGroup", 0x9C00FDD2, "spawnGroupLoot", 0xCFF22020, 0x2D0ui64, 0x30ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_SpawnGroup();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "ClientSideEffects", 0x107F884Eu, "clientSideEffects", 0x56BE886Eu, 0x300ui64, 0x98ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ClientSideEffects();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "CreateFxAssetData", 0x9DB071BA, "createFxAssetData", 0xCF81E89A, 0x398ui64, 0x10ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("CreateFxAssetData", 0x9DB071BA, 0x10ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("CreateFxAssetData", 0x9DB071BA, "ushort", 0xB7BE387D, "fxPaletteCount", 0x83033DC0, 0i64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("CreateFxAssetData", 0x9DB071BA, "CreateFxPaletteDef", 0xD85FBC84, "fxPalette", 0xC3A84BE3, 8ui64, 8ui64, 0i64, 1, 0);
      if ( Load_RegisterStructSize("CreateFxPaletteDef", 0xD85FBC84, 0xCui64, 4ui64) )
      {
        Load_RegisterStructMemberSize("CreateFxPaletteDef", 0xD85FBC84, "scr_string_t", 0x3FD8616Du, "aliasName", 0x80761C1D, 0i64, 4ui64, 0i64, 0, 0);
        Load_ProcessStructLayout_scr_string_t();
        Load_RegisterStructMemberSize("CreateFxPaletteDef", 0xD85FBC84, "scr_string_t", 0x3FD8616Du, "effectPath", 0x14E9168Eu, 4ui64, 4ui64, 0i64, 0, 0);
        Load_ProcessStructLayout_scr_string_t();
        Load_RegisterStructMemberSize("CreateFxPaletteDef", 0xD85FBC84, "ushort", 0xB7BE387D, "refCount", 0xA13639D4, 8ui64, 2ui64, 0i64, 0, 0);
        Load_ProcessStructLayout_ushort();
      }
    }
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "uint", 0x53A932A0u, "exploderNameTotal", 0xF3EB4918, 0x3A8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "scr_string_t", 0x3FD8616Du, "exploderNames", 0xD0F5F5B5, 0x3B0ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "ServerSideEffects", 0x553EB972u, "serverSideEffects", 0x4F1E9A92u, 0x3B8ui64, 0x10ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ServerSideEffects", 0x553EB972u, 0x10ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ServerSideEffects", 0x553EB972u, "ushort", 0xB7BE387D, "exploderCount", 0x339801DCu, 0i64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("ServerSideEffects", 0x553EB972u, "ServerExploderDef", 0x7FA6C31Bu, "exploders", 0x21C4E1F6u, 8ui64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ServerExploderDef();
    }
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "uint", 0x53A932A0u, "createFxEffectTotal", 0x499BD0A5u, 0x3C8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "uint", 0x53A932A0u, "numMayhemScenes", 0x1BD69460u, 0x3CCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "MayhemInstance", 0xAFC72B06, "mayhemScenes", 0xF29572E0, 0x3D0ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_MayhemInstance();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "SpawnerList", 0x88D28844, "spawners", 0x3CA94DD7u, 0x3D8ui64, 0x10ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("SpawnerList", 0x88D28844, 0x10ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("SpawnerList", 0x88D28844, "uint", 0x53A932A0u, "spawnerCount", 0x3758D5D9u, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("SpawnerList", 0x88D28844, "Spawner", 0x5018FB2Cu, "spanwerList", 0xC35C5B06, 8ui64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_Spawner();
    }
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "uint", 0x53A932A0u, "audioPASpeakerCount", 0xCE02547B, 0x3E8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "AudioPASpeaker", 0xEA1F90EE, "audioPASpeakers", 0xDEE55C39, 0x3F0ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("AudioPASpeaker", 0xEA1F90EE, 0x14ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("AudioPASpeaker", 0xEA1F90EE, "vec3_t", 0x375A0610u, "origin", 0xF35F8276, 0i64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("AudioPASpeaker", 0xEA1F90EE, "uint32_t", 0xFC58820E, "nameHash", 0x3F7EA1F1u, 0xCui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint32_t();
      Load_RegisterStructMemberSize("AudioPASpeaker", 0xEA1F90EE, "uint32_t", 0xFC58820E, "entChannelHash", 0x9262AEDC, 0x10ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint32_t();
    }
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "uint", 0x53A932A0u, "numAudioPropNodes", 0x9AEEAD0u, 0x3F8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "AudioPropagationNode", 0xDC986BEC, "audioPropNodes", 0xD1012D50, 0x400ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("AudioPropagationNode", 0xDC986BEC, 0x14ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("AudioPropagationNode", 0xDC986BEC, "vec3_t", 0x375A0610u, "position", 0x60BDC451u, 0i64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("AudioPropagationNode", 0xDC986BEC, "uint16_t", 0x6328C0E4u, "numEdges", 0x10806F26u, 0xCui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint16_t();
      Load_RegisterStructMemberSize("AudioPropagationNode", 0xDC986BEC, "uint32_t", 0xFC58820E, "edgeStartIndex", 0x275616F7u, 0x10ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint32_t();
    }
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "uint", 0x53A932A0u, "numAudioPropEdges", 0x2DC9CC0Du, 0x408ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "AudioPropagationEdge", 0xE3C16B7F, "audioPropEdges", 0xF51C0E8D, 0x410ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("AudioPropagationEdge", 0xE3C16B7F, 4ui64, 2ui64) )
    {
      Load_RegisterStructMemberSize("AudioPropagationEdge", 0xE3C16B7F, "int16_t", 0xD2EC8273, "neighbor", 0xBC983FBE, 0i64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_int16_t();
      Load_RegisterStructMemberSize("AudioPropagationEdge", 0xE3C16B7F, "int16_t", 0xD2EC8273, "portalIndex", 0x233BE46Eu, 2ui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_int16_t();
    }
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "uint", 0x53A932A0u, "numCollmaps", 0x946EE56F, 0x418ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapEnts", 0xCEF67210, "CollMapLookupEntry", 0x93EADBAE, "collmapLookups", 0x992F17F1, 0x420ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("CollMapLookupEntry", 0x93EADBAE, 0x10ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("CollMapLookupEntry", 0x93EADBAE, "XString", 0x6231894Bu, "targetName", 0x574018F6u, 0i64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_XString();
      Load_RegisterStructMemberSize("CollMapLookupEntry", 0x93EADBAE, "int", 0x7103F94Bu, "brushIndex", 0x93FDD734, 8ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_int();
    }
  }
}

/*
==============
Load_ProcessStructLayout_MapEntsPtr
==============
*/
void Load_ProcessStructLayout_MapEntsPtr(void)
{
  if ( Load_RegisterStructSize("MapEntsPtr", 0xA2CBE04E, 8ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("MapEntsPtr", 0xA2CBE04E, "MapEnts", 0xCEF67210, (const char *)&queryFormat.fmt + 3, 0, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_MapEnts();
  }
}

/*
==============
Load_ProcessStructLayout_MapTriggers
==============
*/
void Load_ProcessStructLayout_MapTriggers(void)
{
  if ( Load_RegisterStructSize("MapTriggers", 0x8AADB1CD, 0x50ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("MapTriggers", 0x8AADB1CD, "uint", 0x53A932A0u, "count", 0xACB3A915, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapTriggers", 0x8AADB1CD, "TriggerModel", 0xA7060A33, "models", 0x9420579E, 8ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_TriggerModel();
    Load_RegisterStructMemberSize("MapTriggers", 0x8AADB1CD, "uint", 0x53A932A0u, "hullCount", 0x60A24DFAu, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapTriggers", 0x8AADB1CD, "TriggerHull", 0xC1E04A9u, "hulls", 0xFF3F6B24, 0x18ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("TriggerHull", 0xC1E04A9u, 0x20ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("TriggerHull", 0xC1E04A9u, "Bounds", 0x1605EBBBu, "bounds", 0x704A7A5Bu, 0i64, 0x18ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_Bounds();
      Load_RegisterStructMemberSize("TriggerHull", 0xC1E04A9u, "int", 0x7103F94Bu, "contents", 0x2DCB6256u, 0x18ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_int();
      Load_RegisterStructMemberSize("TriggerHull", 0xC1E04A9u, "ushort", 0xB7BE387D, "slabCount", 0x63D63B1Du, 0x1Cui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("TriggerHull", 0xC1E04A9u, "ushort", 0xB7BE387D, "firstSlab", 0xA2252D12, 0x1Eui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
    }
    Load_RegisterStructMemberSize("MapTriggers", 0x8AADB1CD, "uint", 0x53A932A0u, "slabCount", 0x63D63B1Du, 0x20ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapTriggers", 0x8AADB1CD, "TriggerSlab", 0xE088E744, "slabs", 0x55D8917Bu, 0x28ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_TriggerSlab();
    Load_RegisterStructMemberSize("MapTriggers", 0x8AADB1CD, "uint", 0x53A932A0u, "windingCount", 0x100E9983u, 0x30ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapTriggers", 0x8AADB1CD, "TriggerWinding", 0xFCDAA64A, "windings", 0xB3DA3CE1, 0x38ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("TriggerWinding", 0xFCDAA64A, 0x14ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("TriggerWinding", 0xFCDAA64A, "vec3_t", 0x375A0610u, "dir", 0x71F72EADu, 0i64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("TriggerWinding", 0xFCDAA64A, "ushort", 0xB7BE387D, "pointCount", 0x27F1A3E7u, 0xCui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("TriggerWinding", 0xFCDAA64A, "ushort", 0xB7BE387D, "firstPoint", 0x4344E9E0u, 0xEui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("TriggerWinding", 0xFCDAA64A, "uint", 0x53A932A0u, "flags", 0x85A76201, 0x10ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
    }
    Load_RegisterStructMemberSize("MapTriggers", 0x8AADB1CD, "uint", 0x53A932A0u, "windingPointCount", 0x42E55F39u, 0x40ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("MapTriggers", 0x8AADB1CD, "TriggerWindingPoint", 0x69B3CAF0u, "windingPoints", 0x1A62DA77u, 0x48ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("TriggerWindingPoint", 0x69B3CAF0u, 0xCui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("TriggerWindingPoint", 0x69B3CAF0u, "vec3_t", 0x375A0610u, "loc", 0x700C4612u, 0i64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
    }
  }
}

/*
==============
Load_ProcessStructLayout_PhysicsCapacities
==============
*/
void Load_ProcessStructLayout_PhysicsCapacities(void)
{
  if ( Load_RegisterStructSize("PhysicsCapacities", 0xD82D8B8B, 0x20ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("PhysicsCapacities", 0xD82D8B8B, "int", 0x7103F94Bu, "maxNumRigidBodiesServer", 0x7E93F8FAu, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("PhysicsCapacities", 0xD82D8B8B, "int", 0x7103F94Bu, "maxNumDetailRigidBodiesServer", 0xD2E90593, 4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("PhysicsCapacities", 0xD82D8B8B, "int", 0x7103F94Bu, "maxNumConstraintsServer", 0xCEA118Fu, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("PhysicsCapacities", 0xD82D8B8B, "int", 0x7103F94Bu, "maxNumMotionsServer", 0x9D5D2FB6, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("PhysicsCapacities", 0xD82D8B8B, "int", 0x7103F94Bu, "maxNumRigidBodiesClient", 0xF1F58D36, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("PhysicsCapacities", 0xD82D8B8B, "int", 0x7103F94Bu, "maxNumDetailRigidBodiesClient", 0xCC232C3F, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("PhysicsCapacities", 0xD82D8B8B, "int", 0x7103F94Bu, "maxNumConstraintsClient", 0x7BEFDF53u, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("PhysicsCapacities", 0xD82D8B8B, "int", 0x7103F94Bu, "maxNumMotionsClient", 0xEFEB5DDA, 0x1Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
  }
}

/*
==============
Load_ProcessStructLayout_ServerExploderDef
==============
*/
void Load_ProcessStructLayout_ServerExploderDef(void)
{
  if ( Load_RegisterStructSize("ServerExploderDef", 0x7FA6C31Bu, 0x28ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("ServerExploderDef", 0x7FA6C31Bu, "vec3_t", 0x375A0610u, "origin", 0xF35F8276, 0i64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ServerExploderDef", 0x7FA6C31Bu, "int", 0x7103F94Bu, "delayMsec", 0x7C037E7Du, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ServerExploderDef", 0x7FA6C31Bu, "float", 0x9B987AFE, "damageAmount", 0x85D056AF, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ServerExploderDef", 0x7FA6C31Bu, "float", 0x9B987AFE, "damageRadius", 0x711EF255u, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ServerExploderDef", 0x7FA6C31Bu, "scr_string_t", 0x3FD8616Du, (const char *)&stru_143C9A1A4, 0x58737A51u, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("ServerExploderDef", 0x7FA6C31Bu, "scr_string_t", 0x3FD8616Du, "earthquakeName", 0x800362C2, 0x1Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("ServerExploderDef", 0x7FA6C31Bu, "scr_string_t", 0x3FD8616Du, "rumbleName", 0x2B8B4822u, 0x20ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("ServerExploderDef", 0x7FA6C31Bu, "bool", 0x1F095080u, "damageEnvironmentOnly", 0xA289F060, 0x24ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ServerExploderDef", 0x7FA6C31Bu, "bool", 0x1F095080u, "damageDoOcclusionTraces", 0x748ABE79u, 0x25ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
  }
}

/*
==============
Load_ProcessStructLayout_ServerSideEffects
==============
*/
void Load_ProcessStructLayout_ServerSideEffects(void)
{
  if ( Load_RegisterStructSize("ServerSideEffects", 0x553EB972u, 0x10ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ServerSideEffects", 0x553EB972u, "ushort", 0xB7BE387D, "exploderCount", 0x339801DCu, 0i64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("ServerSideEffects", 0x553EB972u, "ServerExploderDef", 0x7FA6C31Bu, "exploders", 0x21C4E1F6u, 8ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ServerExploderDef();
  }
}

/*
==============
Load_ProcessStructLayout_SpawnGroup
==============
*/
void Load_ProcessStructLayout_SpawnGroup(void)
{
  if ( Load_RegisterStructSize("SpawnGroup", 0x9C00FDD2, 0x30ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("SpawnGroup", 0x9C00FDD2, "ushort", 0xB7BE387D, "pointCount", 0x27F1A3E7u, 0i64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("SpawnGroup", 0x9C00FDD2, "SpawnGroupPoint", 0xD7548498, "points", 0xEDCE50C5, 8ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("SpawnGroupPoint", 0xD7548498, 0x1Cui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("SpawnGroupPoint", 0xD7548498, "vec3_t", 0x375A0610u, "origin", 0xF35F8276, 0i64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("SpawnGroupPoint", 0xD7548498, "vec3_t", 0x375A0610u, "angles", 0x3DE9D40u, 0xCui64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("SpawnGroupPoint", 0xD7548498, "ushort", 0xB7BE387D, "cluster", 0xCB7663D6, 0x18ui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("SpawnGroupPoint", 0xD7548498, "ushort", 0xB7BE387D, "zone", 0x76BF6382u, 0x1Aui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
    }
    Load_RegisterStructMemberSize("SpawnGroup", 0x9C00FDD2, "ushort", 0xB7BE387D, "clusterCount", 0x52948793u, 0x10ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("SpawnGroup", 0x9C00FDD2, "SpawnGroupCluster", 0x5DCB9350u, "clusters", 0x215F2991u, 0x18ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("SpawnGroupCluster", 0x5DCB9350u, 0x28ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("SpawnGroupCluster", 0x5DCB9350u, "ushort", 0xB7BE387D, "zone", 0x76BF6382u, 0i64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("SpawnGroupCluster", 0x5DCB9350u, "ushort", 0xB7BE387D, "pointCount", 0x27F1A3E7u, 2ui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("SpawnGroupCluster", 0x5DCB9350u, "ushort", 0xB7BE387D, "points", 0xEDCE50C5, 8ui64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("SpawnGroupCluster", 0x5DCB9350u, "Bounds", 0x1605EBBBu, "bounds", 0x704A7A5Bu, 0x10ui64, 0x18ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_Bounds();
    }
    Load_RegisterStructMemberSize("SpawnGroup", 0x9C00FDD2, "ushort", 0xB7BE387D, "zoneCount", 0xE3402D17, 0x20ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("SpawnGroup", 0x9C00FDD2, "SpawnGroupZone", 0x57AAAD88u, "zones", 0x7149A5D5u, 0x28ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("SpawnGroupZone", 0x57AAAD88u, 0x38ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("SpawnGroupZone", 0x57AAAD88u, "scr_string_t", 0x3FD8616Du, (const char *)&stru_143C9A1A4, 0x58737A51u, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_scr_string_t();
      Load_RegisterStructMemberSize("SpawnGroupZone", 0x57AAAD88u, "ushort", 0xB7BE387D, "pointCount", 0x27F1A3E7u, 4ui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("SpawnGroupZone", 0x57AAAD88u, "ushort", 0xB7BE387D, "points", 0xEDCE50C5, 8ui64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("SpawnGroupZone", 0x57AAAD88u, "ushort", 0xB7BE387D, "clusterCount", 0x52948793u, 0x10ui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("SpawnGroupZone", 0x57AAAD88u, "ushort", 0xB7BE387D, "clusters", 0x215F2991u, 0x18ui64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("SpawnGroupZone", 0x57AAAD88u, "Bounds", 0x1605EBBBu, "bounds", 0x704A7A5Bu, 0x20ui64, 0x18ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_Bounds();
    }
  }
}

/*
==============
Load_ProcessStructLayout_SpawnGroupCluster
==============
*/
void Load_ProcessStructLayout_SpawnGroupCluster(void)
{
  if ( Load_RegisterStructSize("SpawnGroupCluster", 0x5DCB9350u, 0x28ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("SpawnGroupCluster", 0x5DCB9350u, "ushort", 0xB7BE387D, "zone", 0x76BF6382u, 0i64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("SpawnGroupCluster", 0x5DCB9350u, "ushort", 0xB7BE387D, "pointCount", 0x27F1A3E7u, 2ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("SpawnGroupCluster", 0x5DCB9350u, "ushort", 0xB7BE387D, "points", 0xEDCE50C5, 8ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("SpawnGroupCluster", 0x5DCB9350u, "Bounds", 0x1605EBBBu, "bounds", 0x704A7A5Bu, 0x10ui64, 0x18ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_Bounds();
  }
}

/*
==============
Load_ProcessStructLayout_SpawnGroupPoint
==============
*/
void Load_ProcessStructLayout_SpawnGroupPoint(void)
{
  if ( Load_RegisterStructSize("SpawnGroupPoint", 0xD7548498, 0x1Cui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("SpawnGroupPoint", 0xD7548498, "vec3_t", 0x375A0610u, "origin", 0xF35F8276, 0i64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("SpawnGroupPoint", 0xD7548498, "vec3_t", 0x375A0610u, "angles", 0x3DE9D40u, 0xCui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("SpawnGroupPoint", 0xD7548498, "ushort", 0xB7BE387D, "cluster", 0xCB7663D6, 0x18ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("SpawnGroupPoint", 0xD7548498, "ushort", 0xB7BE387D, "zone", 0x76BF6382u, 0x1Aui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
  }
}

/*
==============
Load_ProcessStructLayout_SpawnGroupZone
==============
*/
void Load_ProcessStructLayout_SpawnGroupZone(void)
{
  if ( Load_RegisterStructSize("SpawnGroupZone", 0x57AAAD88u, 0x38ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("SpawnGroupZone", 0x57AAAD88u, "scr_string_t", 0x3FD8616Du, (const char *)&stru_143C9A1A4, 0x58737A51u, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("SpawnGroupZone", 0x57AAAD88u, "ushort", 0xB7BE387D, "pointCount", 0x27F1A3E7u, 4ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("SpawnGroupZone", 0x57AAAD88u, "ushort", 0xB7BE387D, "points", 0xEDCE50C5, 8ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("SpawnGroupZone", 0x57AAAD88u, "ushort", 0xB7BE387D, "clusterCount", 0x52948793u, 0x10ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("SpawnGroupZone", 0x57AAAD88u, "ushort", 0xB7BE387D, "clusters", 0x215F2991u, 0x18ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("SpawnGroupZone", 0x57AAAD88u, "Bounds", 0x1605EBBBu, "bounds", 0x704A7A5Bu, 0x20ui64, 0x18ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_Bounds();
  }
}

/*
==============
Load_ProcessStructLayout_SpawnPointEntityRecord
==============
*/
void Load_ProcessStructLayout_SpawnPointEntityRecord(void)
{
  if ( Load_RegisterStructSize("SpawnPointEntityRecord", 0x50185DA7u, 0x28ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("SpawnPointEntityRecord", 0x50185DA7u, "ushort", 0xB7BE387D, "index", 0x972C76D4, 0i64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("SpawnPointEntityRecord", 0x50185DA7u, "scr_string_t", 0x3FD8616Du, (const char *)&stru_143C9A1A4, 0x58737A51u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("SpawnPointEntityRecord", 0x50185DA7u, "scr_string_t", 0x3FD8616Du, "target", 0x12592D33u, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("SpawnPointEntityRecord", 0x50185DA7u, "scr_string_t", 0x3FD8616Du, "script_noteworthy", 0x99A1E761, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("SpawnPointEntityRecord", 0x50185DA7u, "vec3_t", 0x375A0610u, "origin", 0xF35F8276, 0x10ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("SpawnPointEntityRecord", 0x50185DA7u, "vec3_t", 0x375A0610u, "angles", 0x3DE9D40u, 0x1Cui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
  }
}

/*
==============
Load_ProcessStructLayout_SpawnPointRecordList
==============
*/
void Load_ProcessStructLayout_SpawnPointRecordList(void)
{
  if ( Load_RegisterStructSize("SpawnPointRecordList", 0x43A9145Eu, 0x10ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("SpawnPointRecordList", 0x43A9145Eu, "ushort", 0xB7BE387D, "spawnsCount", 0xF058C6C9, 0i64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("SpawnPointRecordList", 0x43A9145Eu, "SpawnPointEntityRecord", 0x50185DA7u, "spawns", 0x3644039Cu, 8ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("SpawnPointEntityRecord", 0x50185DA7u, 0x28ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("SpawnPointEntityRecord", 0x50185DA7u, "ushort", 0xB7BE387D, "index", 0x972C76D4, 0i64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("SpawnPointEntityRecord", 0x50185DA7u, "scr_string_t", 0x3FD8616Du, (const char *)&stru_143C9A1A4, 0x58737A51u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_scr_string_t();
      Load_RegisterStructMemberSize("SpawnPointEntityRecord", 0x50185DA7u, "scr_string_t", 0x3FD8616Du, "target", 0x12592D33u, 8ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_scr_string_t();
      Load_RegisterStructMemberSize("SpawnPointEntityRecord", 0x50185DA7u, "scr_string_t", 0x3FD8616Du, "script_noteworthy", 0x99A1E761, 0xCui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_scr_string_t();
      Load_RegisterStructMemberSize("SpawnPointEntityRecord", 0x50185DA7u, "vec3_t", 0x375A0610u, "origin", 0xF35F8276, 0x10ui64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("SpawnPointEntityRecord", 0x50185DA7u, "vec3_t", 0x375A0610u, "angles", 0x3DE9D40u, 0x1Cui64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
    }
  }
}

/*
==============
Load_ProcessStructLayout_Spawner
==============
*/
void Load_ProcessStructLayout_Spawner(void)
{
  if ( Load_RegisterStructSize("Spawner", 0x5018FB2Cu, 0x38ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("Spawner", 0x5018FB2Cu, "vec3_t", 0x375A0610u, "origin", 0xF35F8276, 0i64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("Spawner", 0x5018FB2Cu, "vec3_t", 0x375A0610u, "angles", 0x3DE9D40u, 0xCui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("Spawner", 0x5018FB2Cu, "SpawnerField", 0xD7937668, "fields", 0x3F275C7Fu, 0x18ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("SpawnerField", 0xD7937668, 0x10ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("SpawnerField", 0xD7937668, "scr_string_t", 0x3FD8616Du, "key", 0x86089705, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_scr_string_t();
      Load_RegisterStructMemberSize("SpawnerField", 0xD7937668, "uint", 0x53A932A0u, "keyCanonical", 0xDC4417E5, 4ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("SpawnerField", 0xD7937668, "scr_string_t", 0x3FD8616Du, (const char *)&stru_143CE7590, 0x2A599D4Bu, 8ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_scr_string_t();
      Load_RegisterStructMemberSize("SpawnerField", 0xD7937668, "VariableType", 0xA58B4F78, "type", 0xE73D75F8, 0xCui64, 1ui64, 0i64, 0, 0);
      Load_RegisterStructSize("VariableType", 0xA58B4F78, 1ui64, 1ui64);
    }
    Load_RegisterStructMemberSize("Spawner", 0x5018FB2Cu, "int", 0x7103F94Bu, "flags", 0x85A76201, 0x20ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("Spawner", 0x5018FB2Cu, "int", 0x7103F94Bu, "count", 0xACB3A915, 0x24ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("Spawner", 0x5018FB2Cu, "uint", 0x53A932A0u, "numFields", 0x2FA0E9FFu, 0x28ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("Spawner", 0x5018FB2Cu, "scr_string_t", 0x3FD8616Du, "targetname", 0xF23B1796, 0x2Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("Spawner", 0x5018FB2Cu, "scr_string_t", 0x3FD8616Du, "classname", 0x9C251C79, 0x30ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
  }
}

/*
==============
Load_ProcessStructLayout_SpawnerField
==============
*/
void Load_ProcessStructLayout_SpawnerField(void)
{
  if ( Load_RegisterStructSize("SpawnerField", 0xD7937668, 0x10ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("SpawnerField", 0xD7937668, "scr_string_t", 0x3FD8616Du, "key", 0x86089705, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("SpawnerField", 0xD7937668, "uint", 0x53A932A0u, "keyCanonical", 0xDC4417E5, 4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("SpawnerField", 0xD7937668, "scr_string_t", 0x3FD8616Du, (const char *)&stru_143CE7590, 0x2A599D4Bu, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("SpawnerField", 0xD7937668, "VariableType", 0xA58B4F78, "type", 0xE73D75F8, 0xCui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("VariableType", 0xA58B4F78, 1ui64, 1ui64);
  }
}

/*
==============
Load_ProcessStructLayout_SpawnerList
==============
*/
void Load_ProcessStructLayout_SpawnerList(void)
{
  if ( Load_RegisterStructSize("SpawnerList", 0x88D28844, 0x10ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("SpawnerList", 0x88D28844, "uint", 0x53A932A0u, "spawnerCount", 0x3758D5D9u, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("SpawnerList", 0x88D28844, "Spawner", 0x5018FB2Cu, "spanwerList", 0xC35C5B06, 8ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_Spawner();
  }
}

/*
==============
Load_ProcessStructLayout_SplinePointEntityRecord
==============
*/
void Load_ProcessStructLayout_SplinePointEntityRecord(void)
{
  if ( Load_RegisterStructSize("SplinePointEntityRecord", 0x8A0E650D, 0xA8ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("SplinePointEntityRecord", 0x8A0E650D, "int", 0x7103F94Bu, "splineId", 0x3696528Cu, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("SplinePointEntityRecord", 0x8A0E650D, "int", 0x7103F94Bu, "splineNodeId", 0x2F9DCFB4u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("SplinePointEntityRecord", 0x8A0E650D, "scr_string_t", 0x3FD8616Du, "splineNodeLabel", 0x27E2724Bu, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("SplinePointEntityRecord", 0x8A0E650D, "scr_string_t", 0x3FD8616Du, "targetname", 0xF23B1796, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("SplinePointEntityRecord", 0x8A0E650D, "scr_string_t", 0x3FD8616Du, "target", 0x12592D33u, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("SplinePointEntityRecord", 0x8A0E650D, "scr_string_t", 0x3FD8616Du, "string", 0xB7F478F3, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("SplinePointEntityRecord", 0x8A0E650D, "float", 0x9B987AFE, "speed", 0xDEE887E9, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("SplinePointEntityRecord", 0x8A0E650D, "float", 0x9B987AFE, "splineNodeTension", 0x292A59BBu, 0x1Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("SplinePointEntityRecord", 0x8A0E650D, "vec3_t", 0x375A0610u, "origin", 0xF35F8276, 0x20ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("SplinePointEntityRecord", 0x8A0E650D, "vec3_t", 0x375A0610u, "angles", 0x3DE9D40u, 0x2Cui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("SplinePointEntityRecord", 0x8A0E650D, "float", 0x9B987AFE, "throttle", 0x1EC532Cu, 0x38ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("SplinePointEntityRecord", 0x8A0E650D, "vec2_t", 0x3757C7B9u, "corridorDims", 0xF6E5960F, 0x3Cui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec2_t();
    Load_RegisterStructMemberSize("SplinePointEntityRecord", 0x8A0E650D, "vec3_t", 0x375A0610u, "tangent", 0x8577D313, 0x44ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("SplinePointEntityRecord", 0x8A0E650D, "float", 0x9B987AFE, "distToNextNode", 0xA7353000, 0x50ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("SplinePointEntityRecord", 0x8A0E650D, "vec3_t", 0x375A0610u, "positionCubic", 0x983EB59u, 0x54ui64, 0x30ui64, 4ui64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("SplinePointEntityRecord", 0x8A0E650D, "vec3_t", 0x375A0610u, "tangentQuadratic", 0x3F597D7u, 0x84ui64, 0x24ui64, 3ui64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
  }
}

/*
==============
Load_ProcessStructLayout_SplinePointRecordList
==============
*/
void Load_ProcessStructLayout_SplinePointRecordList(void)
{
  if ( Load_RegisterStructSize("SplinePointRecordList", 0xD1DE6C4u, 0x10ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("SplinePointRecordList", 0xD1DE6C4u, "ushort", 0xB7BE387D, "splinePointCount", 0x2CC64E4u, 0i64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("SplinePointRecordList", 0xD1DE6C4u, "float", 0x9B987AFE, "splineLength", 0x73D3D513u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("SplinePointRecordList", 0xD1DE6C4u, "SplinePointEntityRecord", 0x8A0E650D, "splinePoints", 0xB689EE5E, 8ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_SplinePointEntityRecord();
  }
}

/*
==============
Load_ProcessStructLayout_SplineRecordList
==============
*/
void Load_ProcessStructLayout_SplineRecordList(void)
{
  if ( Load_RegisterStructSize("SplineRecordList", 0xD2F9D5C8, 0x10ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("SplineRecordList", 0xD2F9D5C8, "ushort", 0xB7BE387D, "splineCount", 0xF729C038, 0i64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("SplineRecordList", 0xD2F9D5C8, "SplinePointRecordList", 0xD1DE6C4u, "splines", 0x8869D242, 8ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("SplinePointRecordList", 0xD1DE6C4u, 0x10ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("SplinePointRecordList", 0xD1DE6C4u, "ushort", 0xB7BE387D, "splinePointCount", 0x2CC64E4u, 0i64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("SplinePointRecordList", 0xD1DE6C4u, "float", 0x9B987AFE, "splineLength", 0x73D3D513u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float();
      Load_RegisterStructMemberSize("SplinePointRecordList", 0xD1DE6C4u, "SplinePointEntityRecord", 0x8A0E650D, "splinePoints", 0xB689EE5E, 8ui64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_SplinePointEntityRecord();
    }
  }
}

/*
==============
Load_ProcessStructLayout_StaticModelCollisionCompressedInstance
==============
*/
void Load_ProcessStructLayout_StaticModelCollisionCompressedInstance(void)
{
  if ( Load_RegisterStructSize("StaticModelCollisionCompressedInstance", 0x64D86F45u, 0xEui64, 2ui64) )
  {
    Load_RegisterStructMemberSize("StaticModelCollisionCompressedInstance", 0x64D86F45u, "uint16_t", 0x6328C0E4u, "origin", 0xF35F8276, 0i64, 6ui64, 3ui64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
    Load_RegisterStructMemberSize("StaticModelCollisionCompressedInstance", 0x64D86F45u, "uint16_t", 0x6328C0E4u, "angles", 0x3DE9D40u, 6ui64, 6ui64, 3ui64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
    Load_RegisterStructMemberSize("StaticModelCollisionCompressedInstance", 0x64D86F45u, "uint16_t", 0x6328C0E4u, "scale", 0x52FD90B6u, 0xCui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
  }
}

/*
==============
Load_ProcessStructLayout_StaticModelCollisionCompressedModel
==============
*/
void Load_ProcessStructLayout_StaticModelCollisionCompressedModel(void)
{
  if ( Load_RegisterStructSize("StaticModelCollisionCompressedModel", 0xE3210E2B, 0x38ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("StaticModelCollisionCompressedModel", 0xE3210E2B, "scr_string_t", 0x3FD8616Du, (const char *)&stru_143C9A1A4, 0x58737A51u, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("StaticModelCollisionCompressedModel", 0xE3210E2B, "PhysicsAssetPtr", 0x7A878EB9u, "physicsAsset", 0xFD561865, 8ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_PhysicsAssetPtr();
    Load_RegisterStructMemberSize("StaticModelCollisionCompressedModel", 0xE3210E2B, "XModelDetailCollisionPtr", 0x3E724EA2u, "detailCollision", 0x9A91FE9u, 0x10ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XModelDetailCollisionPtr();
    Load_RegisterStructMemberSize("StaticModelCollisionCompressedModel", 0xE3210E2B, "uint", 0x53A932A0u, "numInstances", 0x925955C8, 0x2Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("StaticModelCollisionCompressedModel", 0xE3210E2B, "StaticModelCollisionCompressedInstance", 0x64D86F45u, "instances", 0xFFCC6148, 0x30ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("StaticModelCollisionCompressedInstance", 0x64D86F45u, 0xEui64, 2ui64) )
    {
      Load_RegisterStructMemberSize("StaticModelCollisionCompressedInstance", 0x64D86F45u, "uint16_t", 0x6328C0E4u, "origin", 0xF35F8276, 0i64, 6ui64, 3ui64, 0, 0);
      Load_ProcessStructLayout_uint16_t();
      Load_RegisterStructMemberSize("StaticModelCollisionCompressedInstance", 0x64D86F45u, "uint16_t", 0x6328C0E4u, "angles", 0x3DE9D40u, 6ui64, 6ui64, 3ui64, 0, 0);
      Load_ProcessStructLayout_uint16_t();
      Load_RegisterStructMemberSize("StaticModelCollisionCompressedInstance", 0x64D86F45u, "uint16_t", 0x6328C0E4u, "scale", 0x52FD90B6u, 0xCui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint16_t();
    }
  }
}

/*
==============
Load_ProcessStructLayout_StaticModelCollisionCompressedModelList
==============
*/
void Load_ProcessStructLayout_StaticModelCollisionCompressedModelList(void)
{
  if ( Load_RegisterStructSize("StaticModelCollisionCompressedModelList", 0xBC514C2F, 0x20ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("StaticModelCollisionCompressedModelList", 0xBC514C2F, "uint", 0x53A932A0u, "numModels", 0x8499E51E, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("StaticModelCollisionCompressedModelList", 0xBC514C2F, "StaticModelCollisionCompressedModel", 0xE3210E2B, "models", 0x9420579E, 8ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_StaticModelCollisionCompressedModel();
    Load_RegisterStructMemberSize("StaticModelCollisionCompressedModelList", 0xBC514C2F, "uint", 0x53A932A0u, "structureMemoryCost", 0xA1091055, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("StaticModelCollisionCompressedModelList", 0xBC514C2F, "uint", 0x53A932A0u, "numInstances", 0x925955C8, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("StaticModelCollisionCompressedModelList", 0xBC514C2F, "uint", 0x53A932A0u, "assetCost", 0xC91E0027, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_StaticModelCollisionInstance
==============
*/
void Load_ProcessStructLayout_StaticModelCollisionInstance(void)
{
  if ( Load_RegisterStructSize("StaticModelCollisionInstance", 0x40F2F396u, 0x1Cui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("StaticModelCollisionInstance", 0x40F2F396u, "vec3_t", 0x375A0610u, "origin", 0xF35F8276, 0i64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("StaticModelCollisionInstance", 0x40F2F396u, "vec3_t", 0x375A0610u, "angles", 0x3DE9D40u, 0xCui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("StaticModelCollisionInstance", 0x40F2F396u, "float", 0x9B987AFE, "scale", 0x52FD90B6u, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
  }
}

/*
==============
Load_ProcessStructLayout_StaticModelCollisionModel
==============
*/
void Load_ProcessStructLayout_StaticModelCollisionModel(void)
{
  if ( Load_RegisterStructSize("StaticModelCollisionModel", 0x5C58A80Eu, 0x28ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("StaticModelCollisionModel", 0x5C58A80Eu, "scr_string_t", 0x3FD8616Du, (const char *)&stru_143C9A1A4, 0x58737A51u, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("StaticModelCollisionModel", 0x5C58A80Eu, "PhysicsAssetPtr", 0x7A878EB9u, "physicsAsset", 0xFD561865, 8ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_PhysicsAssetPtr();
    Load_RegisterStructMemberSize("StaticModelCollisionModel", 0x5C58A80Eu, "XModelDetailCollisionPtr", 0x3E724EA2u, "detailCollision", 0x9A91FE9u, 0x10ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XModelDetailCollisionPtr();
    Load_RegisterStructMemberSize("StaticModelCollisionModel", 0x5C58A80Eu, "uint", 0x53A932A0u, "numInstances", 0x925955C8, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("StaticModelCollisionModel", 0x5C58A80Eu, "StaticModelCollisionInstance", 0x40F2F396u, "instances", 0xFFCC6148, 0x20ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("StaticModelCollisionInstance", 0x40F2F396u, 0x1Cui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("StaticModelCollisionInstance", 0x40F2F396u, "vec3_t", 0x375A0610u, "origin", 0xF35F8276, 0i64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("StaticModelCollisionInstance", 0x40F2F396u, "vec3_t", 0x375A0610u, "angles", 0x3DE9D40u, 0xCui64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("StaticModelCollisionInstance", 0x40F2F396u, "float", 0x9B987AFE, "scale", 0x52FD90B6u, 0x18ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float();
    }
  }
}

/*
==============
Load_ProcessStructLayout_StaticModelCollisionModelList
==============
*/
void Load_ProcessStructLayout_StaticModelCollisionModelList(void)
{
  if ( Load_RegisterStructSize("StaticModelCollisionModelList", 0xFB1E23C2, 0x18ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("StaticModelCollisionModelList", 0xFB1E23C2, "uint", 0x53A932A0u, "numModels", 0x8499E51E, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("StaticModelCollisionModelList", 0xFB1E23C2, "StaticModelCollisionModel", 0x5C58A80Eu, "models", 0x9420579E, 8ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_StaticModelCollisionModel();
    Load_RegisterStructMemberSize("StaticModelCollisionModelList", 0xFB1E23C2, "uint", 0x53A932A0u, "structureMemoryCost", 0xA1091055, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_TriggerHull
==============
*/
void Load_ProcessStructLayout_TriggerHull(void)
{
  if ( Load_RegisterStructSize("TriggerHull", 0xC1E04A9u, 0x20ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("TriggerHull", 0xC1E04A9u, "Bounds", 0x1605EBBBu, "bounds", 0x704A7A5Bu, 0i64, 0x18ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_Bounds();
    Load_RegisterStructMemberSize("TriggerHull", 0xC1E04A9u, "int", 0x7103F94Bu, "contents", 0x2DCB6256u, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("TriggerHull", 0xC1E04A9u, "ushort", 0xB7BE387D, "slabCount", 0x63D63B1Du, 0x1Cui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("TriggerHull", 0xC1E04A9u, "ushort", 0xB7BE387D, "firstSlab", 0xA2252D12, 0x1Eui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
  }
}

/*
==============
Load_ProcessStructLayout_TriggerModel
==============
*/
void Load_ProcessStructLayout_TriggerModel(void)
{
  if ( Load_RegisterStructSize("TriggerModel", 0xA7060A33, 0x20ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("TriggerModel", 0xA7060A33, "int", 0x7103F94Bu, "contents", 0x2DCB6256u, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("TriggerModel", 0xA7060A33, "ushort", 0xB7BE387D, "hullCount", 0x60A24DFAu, 4ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("TriggerModel", 0xA7060A33, "ushort", 0xB7BE387D, "firstHull", 0xC7832187, 6ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("TriggerModel", 0xA7060A33, "ushort", 0xB7BE387D, "windingCount", 0x100E9983u, 8ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("TriggerModel", 0xA7060A33, "ushort", 0xB7BE387D, "firstWinding", 0x36ED2A7Cu, 0xAui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("TriggerModel", 0xA7060A33, "uint", 0x53A932A0u, "flags", 0x85A76201, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("TriggerModel", 0xA7060A33, "PhysicsAssetPtr", 0x7A878EB9u, "physicsAsset", 0xFD561865, 0x10ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_PhysicsAssetPtr();
    Load_RegisterStructMemberSize("TriggerModel", 0xA7060A33, "UnsignedShort", 0xAF31D6AD, "physicsShapeOverrideIdx", 0x52251CBFu, 0x18ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_UnsignedShort();
  }
}

/*
==============
Load_ProcessStructLayout_TriggerSlab
==============
*/
void Load_ProcessStructLayout_TriggerSlab(void)
{
  if ( Load_RegisterStructSize("TriggerSlab", 0xE088E744, 0x14ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("TriggerSlab", 0xE088E744, "vec3_t", 0x375A0610u, "dir", 0x71F72EADu, 0i64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("TriggerSlab", 0xE088E744, "float", 0x9B987AFE, "midPoint", 0xF0778BA4, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("TriggerSlab", 0xE088E744, "float", 0x9B987AFE, "halfSize", 0x2AA6BB88u, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
  }
}

/*
==============
Load_ProcessStructLayout_TriggerWinding
==============
*/
void Load_ProcessStructLayout_TriggerWinding(void)
{
  if ( Load_RegisterStructSize("TriggerWinding", 0xFCDAA64A, 0x14ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("TriggerWinding", 0xFCDAA64A, "vec3_t", 0x375A0610u, "dir", 0x71F72EADu, 0i64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("TriggerWinding", 0xFCDAA64A, "ushort", 0xB7BE387D, "pointCount", 0x27F1A3E7u, 0xCui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("TriggerWinding", 0xFCDAA64A, "ushort", 0xB7BE387D, "firstPoint", 0x4344E9E0u, 0xEui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("TriggerWinding", 0xFCDAA64A, "uint", 0x53A932A0u, "flags", 0x85A76201, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_TriggerWindingPoint
==============
*/
void Load_ProcessStructLayout_TriggerWindingPoint(void)
{
  if ( Load_RegisterStructSize("TriggerWindingPoint", 0x69B3CAF0u, 0xCui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("TriggerWindingPoint", 0x69B3CAF0u, "vec3_t", 0x375A0610u, "loc", 0x700C4612u, 0i64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
  }
}

/*
==============
Load_ProcessStructLayout_VariableType
==============
*/
void Load_ProcessStructLayout_VariableType(void)
{
  Load_RegisterStructSize("VariableType", 0xA58B4F78, 1ui64, 1ui64);
}

/*
==============
Load_ProcessStructLayout_alignHavokShapeData_t
==============
*/
void Load_ProcessStructLayout_alignHavokShapeData_t(void)
{
  if ( Load_RegisterStructSize("alignHavokShapeData_t", 0xFB84D230, 1ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("alignHavokShapeData_t", 0xFB84D230, "char", 0x81D46614, (const char *)&queryFormat.fmt + 3, 0, 0i64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_char();
  }
}

/*
==============
Load_ProcessStructLayout_clipMap_ptr
==============
*/
void Load_ProcessStructLayout_clipMap_ptr(void)
{
  if ( Load_RegisterStructSize("clipMap_ptr", 0x8CA457FB, 8ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("clipMap_ptr", 0x8CA457FB, "clipMap_t", 0x5DDF1EB9u, (const char *)&queryFormat.fmt + 3, 0, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_clipMap_t();
  }
}

/*
==============
Load_ProcessStructLayout_clipMap_t
==============
*/
void Load_ProcessStructLayout_clipMap_t(void)
{
  if ( Load_RegisterStructSize("clipMap_t", 0x5DDF1EB9u, 0xF8ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("clipMap_t", 0x5DDF1EB9u, "XString", 0x6231894Bu, (const char *)&stru_143C9A1A4, 0x58737A51u, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("clipMap_t", 0x5DDF1EB9u, "qboolean", 0x6ABDA89Bu, "isInUse", 0x9D0896FA, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_qboolean();
    Load_RegisterStructMemberSize("clipMap_t", 0x5DDF1EB9u, "uint", 0x53A932A0u, "numStaticModelCollisionModelLists", 0x1EBFD2B5u, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("clipMap_t", 0x5DDF1EB9u, "StaticModelCollisionModelList", 0xFB1E23C2, "staticModelCollisionModelLists", 0x23E7B535u, 0x10ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("StaticModelCollisionModelList", 0xFB1E23C2, 0x18ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("StaticModelCollisionModelList", 0xFB1E23C2, "uint", 0x53A932A0u, "numModels", 0x8499E51E, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("StaticModelCollisionModelList", 0xFB1E23C2, "StaticModelCollisionModel", 0x5C58A80Eu, "models", 0x9420579E, 8ui64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_StaticModelCollisionModel();
      Load_RegisterStructMemberSize("StaticModelCollisionModelList", 0xFB1E23C2, "uint", 0x53A932A0u, "structureMemoryCost", 0xA1091055, 0x10ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
    }
    Load_RegisterStructMemberSize("clipMap_t", 0x5DDF1EB9u, "MapEntsPtr", 0xA2CBE04E, "mapEnts", 0xC3CC3670, 0x18ui64, 8ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("MapEntsPtr", 0xA2CBE04E, 8ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("MapEntsPtr", 0xA2CBE04E, "MapEnts", 0xCEF67210, (const char *)&queryFormat.fmt + 3, 0, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_MapEnts();
    }
    Load_RegisterStructMemberSize("clipMap_t", 0x5DDF1EB9u, "byte", 0x363F8F7Eu, "stageCount", 0xEAFA75AF, 0x28ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_byte();
    Load_RegisterStructMemberSize("clipMap_t", 0x5DDF1EB9u, "Stage", 0x143E9EAu, "stages", 0x422C36CDu, 0x20ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_Stage();
    Load_RegisterStructMemberSize("clipMap_t", 0x5DDF1EB9u, "MapTriggers", 0x8AADB1CD, "stageTrigger", 0x29E336E2u, 0x30ui64, 0x50ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_MapTriggers();
    Load_RegisterStructMemberSize("clipMap_t", 0x5DDF1EB9u, "vec3_t", 0x375A0610u, "broadphaseMin", 0xD75A9E8F, 0x80ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("clipMap_t", 0x5DDF1EB9u, "vec3_t", 0x375A0610u, "broadphaseMax", 0xCF5A9231, 0x8Cui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("clipMap_t", 0x5DDF1EB9u, "PhysicsCapacities", 0xD82D8B8B, "physicsCapacities", 0xE8A562EB, 0x98ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_PhysicsCapacities();
    Load_RegisterStructMemberSize("clipMap_t", 0x5DDF1EB9u, "uint", 0x53A932A0u, "havokWorldShapeDataSize", 0xE042643B, 0xB8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("clipMap_t", 0x5DDF1EB9u, "alignHavokShapeData_t", 0xFB84D230, "havokWorldShapeData", 0xDF6A4090, 0xC0ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_alignHavokShapeData_t();
    Load_RegisterStructMemberSize("clipMap_t", 0x5DDF1EB9u, "uint", 0x53A932A0u, "numCollisionHeatmapEntries", 0xAC480534, 0xC8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("clipMap_t", 0x5DDF1EB9u, "CollisionHeatmapEntry", 0x80077E78, "collisionHeatmap", 0x15ACCC2Cu, 0xD0ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("CollisionHeatmapEntry", 0x80077E78, 0x20ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("CollisionHeatmapEntry", 0x80077E78, "int", 0x7103F94Bu, "vertexCount", 0xECA9CA7F, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_int();
      Load_RegisterStructMemberSize("CollisionHeatmapEntry", 0x80077E78, "float", 0x9B987AFE, "vertexDensity", 0xB38543EE, 4ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float();
      Load_RegisterStructMemberSize("CollisionHeatmapEntry", 0x80077E78, "vec3_t", 0x375A0610u, "minExtent", 0x1D294B3Cu, 8ui64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("CollisionHeatmapEntry", 0x80077E78, "vec3_t", 0x375A0610u, "maxExtent", 0x26512636u, 0x14ui64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
    }
    Load_RegisterStructMemberSize("clipMap_t", 0x5DDF1EB9u, "uint", 0x53A932A0u, "totalGlassInitPieceCount", 0xB3945CD7, 0xD8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("clipMap_t", 0x5DDF1EB9u, "uint", 0x53A932A0u, "totalGlassPieceLimit", 0xE8133401, 0xDCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("clipMap_t", 0x5DDF1EB9u, "TopDownMapData", 0x936DAEC5, "topDownMapData", 0x239A3825u, 0xE0ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_TopDownMapData();
    Load_RegisterStructMemberSize("clipMap_t", 0x5DDF1EB9u, "XString", 0x6231894Bu, "visionSetName", 0x15C5B929u, 0xE8ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
  }
}

/*
==============
Load_ProcessStructLayout_cmodel_t
==============
*/
void Load_ProcessStructLayout_cmodel_t(void)
{
  if ( Load_RegisterStructSize("cmodel_t", 0x32F67017u, 0x38ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("cmodel_t", 0x32F67017u, "Bounds", 0x1605EBBBu, "bounds", 0x704A7A5Bu, 0i64, 0x18ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_Bounds();
    Load_RegisterStructMemberSize("cmodel_t", 0x32F67017u, "float", 0x9B987AFE, "radius", 0xAF4D19C2, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("cmodel_t", 0x32F67017u, "PhysicsAssetPtr", 0x7A878EB9u, "physicsAsset", 0xFD561865, 0x20ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_PhysicsAssetPtr();
    Load_RegisterStructMemberSize("cmodel_t", 0x32F67017u, "UnsignedShort", 0xAF31D6AD, "physicsShapeOverrideIdx", 0x52251CBFu, 0x28ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_UnsignedShort();
    Load_RegisterStructMemberSize("cmodel_t", 0x32F67017u, "UnsignedShort", 0xAF31D6AD, "navObstacleIdx", 0xB8017551, 0x2Aui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_UnsignedShort();
    Load_RegisterStructMemberSize("cmodel_t", 0x32F67017u, "EdgeIndex", 0xF5998DB9, "edgeFirstIndex", 0x5E1963BDu, 0x2Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_EdgeIndex();
    Load_RegisterStructMemberSize("cmodel_t", 0x32F67017u, "EdgeIndex", 0xF5998DB9, "edgeTotalCount", 0x75648E04u, 0x30ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_EdgeIndex();
  }
}

/*
==============
Load_ServerExploderDef
==============
*/
void Load_ServerExploderDef(const DBStreamStart streamStart)
{
  scr_string_t *v1; 

  Load_Stream(streamStart, varServerExploderDef, 0x28ui64);
  v1 = varscr_string_t;
  varscr_string_t = &varServerExploderDef->name;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = &varServerExploderDef->earthquakeName;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = &varServerExploderDef->rumbleName;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = v1;
}

/*
==============
Load_ServerExploderDefArray
==============
*/
void Load_ServerExploderDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ServerExploderDef *i; 
  scr_string_t *v4; 

  v2 = count;
  Load_Stream(streamStart, varServerExploderDef, 40 * count);
  for ( i = varServerExploderDef; v2; --v2 )
  {
    varServerExploderDef = i;
    Load_Stream(NotAtStart, i, 0x28ui64);
    v4 = varscr_string_t;
    varscr_string_t = &varServerExploderDef->name;
    Load_scr_string_t(NotAtStart);
    varscr_string_t = &varServerExploderDef->earthquakeName;
    Load_scr_string_t(NotAtStart);
    varscr_string_t = &varServerExploderDef->rumbleName;
    Load_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v4;
  }
}

/*
==============
Load_ServerExploderDefStream
==============
*/
void Load_ServerExploderDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  scr_string_t *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 13966, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varServerExploderDef;
    do
    {
      Load_Stream(AtStart, pos, 0x28ui64);
      v4 = varscr_string_t;
      varscr_string_t = &varServerExploderDef->name;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = &varServerExploderDef->earthquakeName;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = &varServerExploderDef->rumbleName;
      Load_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varServerExploderDef = (ServerExploderDef *)g_streamPosGlob.pos;
      varscr_string_t = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ServerSideEffects
==============
*/
void Load_ServerSideEffects(const DBStreamStart streamStart)
{
  ServerSideEffects *v1; 
  ServerExploderDef *v2; 
  __int64 exploderCount; 
  ServerExploderDef *i; 
  scr_string_t *v5; 

  Load_Stream(streamStart, varServerSideEffects, 0x10ui64);
  v1 = varServerSideEffects;
  if ( varServerSideEffects->exploders )
  {
    v2 = varServerExploderDef;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->exploders = (ServerExploderDef *)g_streamPosGlob.pos;
    varServerExploderDef = (ServerExploderDef *)g_streamPosGlob.pos;
    exploderCount = varServerSideEffects->exploderCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 40 * exploderCount);
    for ( i = varServerExploderDef; exploderCount; --exploderCount )
    {
      varServerExploderDef = i;
      Load_Stream(NotAtStart, i, 0x28ui64);
      v5 = varscr_string_t;
      varscr_string_t = &varServerExploderDef->name;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = &varServerExploderDef->earthquakeName;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = &varServerExploderDef->rumbleName;
      Load_scr_string_t(NotAtStart);
      ++i;
      varscr_string_t = v5;
    }
    varServerExploderDef = v2;
  }
}

/*
==============
Load_ServerSideEffectsArray
==============
*/
void Load_ServerSideEffectsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ServerSideEffects *i; 
  ServerSideEffects *v4; 
  ServerExploderDef *v5; 
  __int64 exploderCount; 
  ServerExploderDef *j; 
  scr_string_t *v8; 

  v2 = count;
  Load_Stream(streamStart, varServerSideEffects, 16 * count);
  for ( i = varServerSideEffects; v2; --v2 )
  {
    varServerSideEffects = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    v4 = varServerSideEffects;
    if ( varServerSideEffects->exploders )
    {
      v5 = varServerExploderDef;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->exploders = (ServerExploderDef *)g_streamPosGlob.pos;
      varServerExploderDef = (ServerExploderDef *)g_streamPosGlob.pos;
      exploderCount = varServerSideEffects->exploderCount;
      Load_Stream(AtStart, g_streamPosGlob.pos, 40 * exploderCount);
      for ( j = varServerExploderDef; exploderCount; --exploderCount )
      {
        varServerExploderDef = j;
        Load_Stream(NotAtStart, j, 0x28ui64);
        v8 = varscr_string_t;
        varscr_string_t = &varServerExploderDef->name;
        Load_scr_string_t(NotAtStart);
        varscr_string_t = &varServerExploderDef->earthquakeName;
        Load_scr_string_t(NotAtStart);
        varscr_string_t = &varServerExploderDef->rumbleName;
        Load_scr_string_t(NotAtStart);
        ++j;
        varscr_string_t = v8;
      }
      varServerExploderDef = v5;
    }
    ++i;
  }
}

/*
==============
Load_ServerSideEffectsStream
==============
*/
void Load_ServerSideEffectsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ServerSideEffects *v4; 
  ServerExploderDef *v5; 
  __int64 exploderCount; 
  ServerExploderDef *i; 
  scr_string_t *v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 14069, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varServerSideEffects;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      v4 = varServerSideEffects;
      if ( varServerSideEffects->exploders )
      {
        v5 = varServerExploderDef;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->exploders = (ServerExploderDef *)g_streamPosGlob.pos;
        varServerExploderDef = (ServerExploderDef *)g_streamPosGlob.pos;
        exploderCount = varServerSideEffects->exploderCount;
        Load_Stream(AtStart, g_streamPosGlob.pos, 40 * exploderCount);
        for ( i = varServerExploderDef; exploderCount; --exploderCount )
        {
          varServerExploderDef = i;
          Load_Stream(NotAtStart, i, 0x28ui64);
          v8 = varscr_string_t;
          varscr_string_t = &varServerExploderDef->name;
          Load_scr_string_t(NotAtStart);
          varscr_string_t = &varServerExploderDef->earthquakeName;
          Load_scr_string_t(NotAtStart);
          varscr_string_t = &varServerExploderDef->rumbleName;
          Load_scr_string_t(NotAtStart);
          ++i;
          varscr_string_t = v8;
        }
        varServerExploderDef = v5;
      }
      pos = g_streamPosGlob.pos;
      varServerSideEffects = (ServerSideEffects *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_SpawnGroup
==============
*/
void Load_SpawnGroup(const DBStreamStart streamStart)
{
  SpawnGroup *v1; 
  SpawnGroupPoint *v2; 
  SpawnGroupCluster *v3; 
  __int64 clusterCount; 
  SpawnGroupCluster *i; 
  SpawnGroupCluster *v6; 
  unsigned __int16 *v7; 
  unsigned __int16 *ushort; 
  SpawnGroupZone *v9; 
  __int64 zoneCount; 
  SpawnGroupZone *j; 

  Load_Stream(streamStart, varSpawnGroup, 0x30ui64);
  v1 = varSpawnGroup;
  if ( varSpawnGroup->points )
  {
    v2 = varSpawnGroupPoint;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->points = (SpawnGroupPoint *)g_streamPosGlob.pos;
    varSpawnGroupPoint = (SpawnGroupPoint *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varSpawnGroup->pointCount);
    v1 = varSpawnGroup;
    varSpawnGroupPoint = v2;
  }
  if ( v1->clusters )
  {
    v3 = varSpawnGroupCluster;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->clusters = (SpawnGroupCluster *)g_streamPosGlob.pos;
    varSpawnGroupCluster = (SpawnGroupCluster *)g_streamPosGlob.pos;
    clusterCount = varSpawnGroup->clusterCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 40 * clusterCount);
    for ( i = varSpawnGroupCluster; clusterCount; --clusterCount )
    {
      varSpawnGroupCluster = i;
      Load_Stream(NotAtStart, i, 0x28ui64);
      v6 = varSpawnGroupCluster;
      if ( varSpawnGroupCluster->points )
      {
        v7 = varushort;
        ushort = AllocLoad_ushort();
        v6->points = ushort;
        varushort = ushort;
        Load_ushortArray(AtStart, varSpawnGroupCluster->pointCount);
        varushort = v7;
      }
      ++i;
    }
    v1 = varSpawnGroup;
    varSpawnGroupCluster = v3;
  }
  if ( v1->zones )
  {
    v9 = varSpawnGroupZone;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->zones = (SpawnGroupZone *)g_streamPosGlob.pos;
    varSpawnGroupZone = (SpawnGroupZone *)g_streamPosGlob.pos;
    zoneCount = varSpawnGroup->zoneCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 56 * zoneCount);
    for ( j = varSpawnGroupZone; zoneCount; --zoneCount )
    {
      varSpawnGroupZone = j;
      Load_SpawnGroupZone(NotAtStart);
      ++j;
    }
    varSpawnGroupZone = v9;
  }
}

/*
==============
Load_SpawnGroupArray
==============
*/
void Load_SpawnGroupArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SpawnGroup *i; 
  SpawnGroup *v4; 
  SpawnGroupPoint *v5; 
  SpawnGroupCluster *v6; 
  __int64 clusterCount; 
  SpawnGroupCluster *j; 
  SpawnGroupCluster *v9; 
  unsigned __int16 *v10; 
  unsigned __int16 *ushort; 
  SpawnGroupZone *v12; 
  __int64 zoneCount; 
  SpawnGroupZone *k; 

  v2 = count;
  Load_Stream(streamStart, varSpawnGroup, 48 * count);
  for ( i = varSpawnGroup; v2; --v2 )
  {
    varSpawnGroup = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    v4 = varSpawnGroup;
    if ( varSpawnGroup->points )
    {
      v5 = varSpawnGroupPoint;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->points = (SpawnGroupPoint *)g_streamPosGlob.pos;
      varSpawnGroupPoint = (SpawnGroupPoint *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varSpawnGroup->pointCount);
      v4 = varSpawnGroup;
      varSpawnGroupPoint = v5;
    }
    if ( v4->clusters )
    {
      v6 = varSpawnGroupCluster;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->clusters = (SpawnGroupCluster *)g_streamPosGlob.pos;
      varSpawnGroupCluster = (SpawnGroupCluster *)g_streamPosGlob.pos;
      clusterCount = varSpawnGroup->clusterCount;
      Load_Stream(AtStart, g_streamPosGlob.pos, 40 * clusterCount);
      for ( j = varSpawnGroupCluster; clusterCount; --clusterCount )
      {
        varSpawnGroupCluster = j;
        Load_Stream(NotAtStart, j, 0x28ui64);
        v9 = varSpawnGroupCluster;
        if ( varSpawnGroupCluster->points )
        {
          v10 = varushort;
          ushort = AllocLoad_ushort();
          v9->points = ushort;
          varushort = ushort;
          Load_ushortArray(AtStart, varSpawnGroupCluster->pointCount);
          varushort = v10;
        }
        ++j;
      }
      v4 = varSpawnGroup;
      varSpawnGroupCluster = v6;
    }
    if ( v4->zones )
    {
      v12 = varSpawnGroupZone;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->zones = (SpawnGroupZone *)g_streamPosGlob.pos;
      varSpawnGroupZone = (SpawnGroupZone *)g_streamPosGlob.pos;
      zoneCount = varSpawnGroup->zoneCount;
      Load_Stream(AtStart, g_streamPosGlob.pos, 56 * zoneCount);
      for ( k = varSpawnGroupZone; zoneCount; --zoneCount )
      {
        varSpawnGroupZone = k;
        Load_SpawnGroupZone(NotAtStart);
        ++k;
      }
      varSpawnGroupZone = v12;
    }
    ++i;
  }
}

/*
==============
Load_SpawnGroupCluster
==============
*/
void Load_SpawnGroupCluster(const DBStreamStart streamStart)
{
  SpawnGroupCluster *v1; 
  unsigned __int16 *v2; 
  unsigned __int16 *ushort; 

  Load_Stream(streamStart, varSpawnGroupCluster, 0x28ui64);
  v1 = varSpawnGroupCluster;
  if ( varSpawnGroupCluster->points )
  {
    v2 = varushort;
    ushort = AllocLoad_ushort();
    v1->points = ushort;
    varushort = ushort;
    Load_ushortArray(AtStart, varSpawnGroupCluster->pointCount);
    varushort = v2;
  }
}

/*
==============
Load_SpawnGroupClusterArray
==============
*/
void Load_SpawnGroupClusterArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SpawnGroupCluster *i; 
  SpawnGroupCluster *v4; 
  unsigned __int16 *v5; 
  unsigned __int16 *ushort; 

  v2 = count;
  Load_Stream(streamStart, varSpawnGroupCluster, 40 * count);
  for ( i = varSpawnGroupCluster; v2; --v2 )
  {
    varSpawnGroupCluster = i;
    Load_Stream(NotAtStart, i, 0x28ui64);
    v4 = varSpawnGroupCluster;
    if ( varSpawnGroupCluster->points )
    {
      v5 = varushort;
      ushort = AllocLoad_ushort();
      v4->points = ushort;
      varushort = ushort;
      Load_ushortArray(AtStart, varSpawnGroupCluster->pointCount);
      varushort = v5;
    }
    ++i;
  }
}

/*
==============
Load_SpawnGroupClusterStream
==============
*/
void Load_SpawnGroupClusterStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  SpawnGroupCluster *v4; 
  unsigned __int16 *v5; 
  unsigned __int16 *ushort; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 11464, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varSpawnGroupCluster;
    do
    {
      Load_Stream(AtStart, pos, 0x28ui64);
      v4 = varSpawnGroupCluster;
      if ( varSpawnGroupCluster->points )
      {
        v5 = varushort;
        ushort = AllocLoad_ushort();
        v4->points = ushort;
        varushort = ushort;
        Load_ushortArray(AtStart, varSpawnGroupCluster->pointCount);
        varushort = v5;
      }
      pos = g_streamPosGlob.pos;
      varSpawnGroupCluster = (SpawnGroupCluster *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_SpawnGroupPoint
==============
*/
void Load_SpawnGroupPoint(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varSpawnGroupPoint, 0x1Cui64);
}

/*
==============
Load_SpawnGroupPointArray
==============
*/
void Load_SpawnGroupPointArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varSpawnGroupPoint, 28 * count);
}

/*
==============
Load_SpawnGroupPointStream
==============
*/
void Load_SpawnGroupPointStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 11315, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varSpawnGroupPoint;
    do
    {
      Load_Stream(AtStart, pos, 0x1Cui64);
      pos = g_streamPosGlob.pos;
      varSpawnGroupPoint = (SpawnGroupPoint *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_SpawnGroupStream
==============
*/
void Load_SpawnGroupStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  SpawnGroup *v4; 
  SpawnGroupPoint *v5; 
  SpawnGroupCluster *v6; 
  __int64 clusterCount; 
  SpawnGroupCluster *i; 
  SpawnGroupCluster *v9; 
  unsigned __int16 *v10; 
  unsigned __int16 *ushort; 
  SpawnGroupZone *v12; 
  __int64 zoneCount; 
  SpawnGroupZone *j; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 11863, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varSpawnGroup;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      v4 = varSpawnGroup;
      if ( varSpawnGroup->points )
      {
        v5 = varSpawnGroupPoint;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->points = (SpawnGroupPoint *)g_streamPosGlob.pos;
        varSpawnGroupPoint = (SpawnGroupPoint *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varSpawnGroup->pointCount);
        v4 = varSpawnGroup;
        varSpawnGroupPoint = v5;
      }
      if ( v4->clusters )
      {
        v6 = varSpawnGroupCluster;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->clusters = (SpawnGroupCluster *)g_streamPosGlob.pos;
        varSpawnGroupCluster = (SpawnGroupCluster *)g_streamPosGlob.pos;
        clusterCount = varSpawnGroup->clusterCount;
        Load_Stream(AtStart, g_streamPosGlob.pos, 40 * clusterCount);
        for ( i = varSpawnGroupCluster; clusterCount; --clusterCount )
        {
          varSpawnGroupCluster = i;
          Load_Stream(NotAtStart, i, 0x28ui64);
          v9 = varSpawnGroupCluster;
          if ( varSpawnGroupCluster->points )
          {
            v10 = varushort;
            ushort = AllocLoad_ushort();
            v9->points = ushort;
            varushort = ushort;
            Load_ushortArray(AtStart, varSpawnGroupCluster->pointCount);
            varushort = v10;
          }
          ++i;
        }
        v4 = varSpawnGroup;
        varSpawnGroupCluster = v6;
      }
      if ( v4->zones )
      {
        v12 = varSpawnGroupZone;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->zones = (SpawnGroupZone *)g_streamPosGlob.pos;
        varSpawnGroupZone = (SpawnGroupZone *)g_streamPosGlob.pos;
        zoneCount = varSpawnGroup->zoneCount;
        Load_Stream(AtStart, g_streamPosGlob.pos, 56 * zoneCount);
        for ( j = varSpawnGroupZone; zoneCount; --zoneCount )
        {
          varSpawnGroupZone = j;
          Load_SpawnGroupZone(NotAtStart);
          ++j;
        }
        varSpawnGroupZone = v12;
      }
      pos = g_streamPosGlob.pos;
      varSpawnGroup = (SpawnGroup *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_SpawnGroupZone
==============
*/
void Load_SpawnGroupZone(const DBStreamStart streamStart)
{
  scr_string_t *v1; 
  unsigned __int16 *v2; 
  SpawnGroupZone *v3; 
  unsigned __int16 *ushort; 
  unsigned __int16 *v5; 

  Load_Stream(streamStart, varSpawnGroupZone, 0x38ui64);
  v1 = varscr_string_t;
  varscr_string_t = &varSpawnGroupZone->name;
  Load_scr_string_t(NotAtStart);
  v2 = varushort;
  varscr_string_t = v1;
  v3 = varSpawnGroupZone;
  if ( varSpawnGroupZone->points )
  {
    ushort = AllocLoad_ushort();
    v3->points = ushort;
    varushort = ushort;
    Load_ushortArray(AtStart, varSpawnGroupZone->pointCount);
    v3 = varSpawnGroupZone;
    varushort = v2;
  }
  if ( v3->clusters )
  {
    v5 = AllocLoad_ushort();
    v3->clusters = v5;
    varushort = v5;
    Load_ushortArray(AtStart, varSpawnGroupZone->clusterCount);
    varushort = v2;
  }
}

/*
==============
Load_SpawnGroupZoneArray
==============
*/
void Load_SpawnGroupZoneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SpawnGroupZone *i; 
  scr_string_t *v4; 
  unsigned __int16 *v5; 
  SpawnGroupZone *v6; 
  unsigned __int16 *ushort; 
  unsigned __int16 *v8; 

  v2 = count;
  Load_Stream(streamStart, varSpawnGroupZone, 56 * count);
  for ( i = varSpawnGroupZone; v2; --v2 )
  {
    varSpawnGroupZone = i;
    Load_Stream(NotAtStart, i, 0x38ui64);
    v4 = varscr_string_t;
    varscr_string_t = &varSpawnGroupZone->name;
    Load_scr_string_t(NotAtStart);
    v5 = varushort;
    varscr_string_t = v4;
    v6 = varSpawnGroupZone;
    if ( varSpawnGroupZone->points )
    {
      ushort = AllocLoad_ushort();
      v6->points = ushort;
      varushort = ushort;
      Load_ushortArray(AtStart, varSpawnGroupZone->pointCount);
      v6 = varSpawnGroupZone;
      varushort = v5;
    }
    if ( v6->clusters )
    {
      v8 = AllocLoad_ushort();
      v6->clusters = v8;
      varushort = v8;
      Load_ushortArray(AtStart, varSpawnGroupZone->clusterCount);
      varushort = v5;
    }
    ++i;
  }
}

/*
==============
Load_SpawnGroupZoneStream
==============
*/
void Load_SpawnGroupZoneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  scr_string_t *v4; 
  unsigned __int16 *v5; 
  SpawnGroupZone *v6; 
  unsigned __int16 *ushort; 
  unsigned __int16 *v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 11662, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varSpawnGroupZone;
    do
    {
      Load_Stream(AtStart, pos, 0x38ui64);
      v4 = varscr_string_t;
      varscr_string_t = &varSpawnGroupZone->name;
      Load_scr_string_t(NotAtStart);
      v5 = varushort;
      varscr_string_t = v4;
      v6 = varSpawnGroupZone;
      if ( varSpawnGroupZone->points )
      {
        ushort = AllocLoad_ushort();
        v6->points = ushort;
        varushort = ushort;
        Load_ushortArray(AtStart, varSpawnGroupZone->pointCount);
        v6 = varSpawnGroupZone;
        varushort = v5;
      }
      if ( v6->clusters )
      {
        v8 = AllocLoad_ushort();
        v6->clusters = v8;
        varushort = v8;
        Load_ushortArray(AtStart, varSpawnGroupZone->clusterCount);
        varushort = v5;
      }
      pos = g_streamPosGlob.pos;
      varSpawnGroupZone = (SpawnGroupZone *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_SpawnPointEntityRecord
==============
*/
void Load_SpawnPointEntityRecord(const DBStreamStart streamStart)
{
  scr_string_t *v1; 

  Load_Stream(streamStart, varSpawnPointEntityRecord, 0x28ui64);
  v1 = varscr_string_t;
  varscr_string_t = &varSpawnPointEntityRecord->name;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = &varSpawnPointEntityRecord->target;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = &varSpawnPointEntityRecord->script_noteworthy;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = v1;
}

/*
==============
Load_SpawnPointEntityRecordArray
==============
*/
void Load_SpawnPointEntityRecordArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SpawnPointEntityRecord *i; 
  scr_string_t *v4; 

  v2 = count;
  Load_Stream(streamStart, varSpawnPointEntityRecord, 40 * count);
  for ( i = varSpawnPointEntityRecord; v2; --v2 )
  {
    varSpawnPointEntityRecord = i;
    Load_Stream(NotAtStart, i, 0x28ui64);
    v4 = varscr_string_t;
    varscr_string_t = &varSpawnPointEntityRecord->name;
    Load_scr_string_t(NotAtStart);
    varscr_string_t = &varSpawnPointEntityRecord->target;
    Load_scr_string_t(NotAtStart);
    varscr_string_t = &varSpawnPointEntityRecord->script_noteworthy;
    Load_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v4;
  }
}

/*
==============
Load_SpawnPointEntityRecordStream
==============
*/
void Load_SpawnPointEntityRecordStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  scr_string_t *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 11066, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varSpawnPointEntityRecord;
    do
    {
      Load_Stream(AtStart, pos, 0x28ui64);
      v4 = varscr_string_t;
      varscr_string_t = &varSpawnPointEntityRecord->name;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = &varSpawnPointEntityRecord->target;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = &varSpawnPointEntityRecord->script_noteworthy;
      Load_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varSpawnPointEntityRecord = (SpawnPointEntityRecord *)g_streamPosGlob.pos;
      varscr_string_t = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_SpawnPointRecordList
==============
*/
void Load_SpawnPointRecordList(const DBStreamStart streamStart)
{
  SpawnPointRecordList *v1; 
  SpawnPointEntityRecord *v2; 
  __int64 spawnsCount; 
  SpawnPointEntityRecord *i; 
  scr_string_t *v5; 

  Load_Stream(streamStart, varSpawnPointRecordList, 0x10ui64);
  v1 = varSpawnPointRecordList;
  if ( varSpawnPointRecordList->spawns )
  {
    v2 = varSpawnPointEntityRecord;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->spawns = (SpawnPointEntityRecord *)g_streamPosGlob.pos;
    varSpawnPointEntityRecord = (SpawnPointEntityRecord *)g_streamPosGlob.pos;
    spawnsCount = varSpawnPointRecordList->spawnsCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 40 * spawnsCount);
    for ( i = varSpawnPointEntityRecord; spawnsCount; --spawnsCount )
    {
      varSpawnPointEntityRecord = i;
      Load_Stream(NotAtStart, i, 0x28ui64);
      v5 = varscr_string_t;
      varscr_string_t = &varSpawnPointEntityRecord->name;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = &varSpawnPointEntityRecord->target;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = &varSpawnPointEntityRecord->script_noteworthy;
      Load_scr_string_t(NotAtStart);
      ++i;
      varscr_string_t = v5;
    }
    varSpawnPointEntityRecord = v2;
  }
}

/*
==============
Load_SpawnPointRecordListArray
==============
*/
void Load_SpawnPointRecordListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SpawnPointRecordList *i; 
  SpawnPointRecordList *v4; 
  SpawnPointEntityRecord *v5; 
  __int64 spawnsCount; 
  SpawnPointEntityRecord *j; 
  scr_string_t *v8; 

  v2 = count;
  Load_Stream(streamStart, varSpawnPointRecordList, 16 * count);
  for ( i = varSpawnPointRecordList; v2; --v2 )
  {
    varSpawnPointRecordList = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    v4 = varSpawnPointRecordList;
    if ( varSpawnPointRecordList->spawns )
    {
      v5 = varSpawnPointEntityRecord;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->spawns = (SpawnPointEntityRecord *)g_streamPosGlob.pos;
      varSpawnPointEntityRecord = (SpawnPointEntityRecord *)g_streamPosGlob.pos;
      spawnsCount = varSpawnPointRecordList->spawnsCount;
      Load_Stream(AtStart, g_streamPosGlob.pos, 40 * spawnsCount);
      for ( j = varSpawnPointEntityRecord; spawnsCount; --spawnsCount )
      {
        varSpawnPointEntityRecord = j;
        Load_Stream(NotAtStart, j, 0x28ui64);
        v8 = varscr_string_t;
        varscr_string_t = &varSpawnPointEntityRecord->name;
        Load_scr_string_t(NotAtStart);
        varscr_string_t = &varSpawnPointEntityRecord->target;
        Load_scr_string_t(NotAtStart);
        varscr_string_t = &varSpawnPointEntityRecord->script_noteworthy;
        Load_scr_string_t(NotAtStart);
        ++j;
        varscr_string_t = v8;
      }
      varSpawnPointEntityRecord = v5;
    }
    ++i;
  }
}

/*
==============
Load_SpawnPointRecordListStream
==============
*/
void Load_SpawnPointRecordListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  SpawnPointRecordList *v4; 
  SpawnPointEntityRecord *v5; 
  __int64 spawnsCount; 
  SpawnPointEntityRecord *i; 
  scr_string_t *v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 11169, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varSpawnPointRecordList;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      v4 = varSpawnPointRecordList;
      if ( varSpawnPointRecordList->spawns )
      {
        v5 = varSpawnPointEntityRecord;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->spawns = (SpawnPointEntityRecord *)g_streamPosGlob.pos;
        varSpawnPointEntityRecord = (SpawnPointEntityRecord *)g_streamPosGlob.pos;
        spawnsCount = varSpawnPointRecordList->spawnsCount;
        Load_Stream(AtStart, g_streamPosGlob.pos, 40 * spawnsCount);
        for ( i = varSpawnPointEntityRecord; spawnsCount; --spawnsCount )
        {
          varSpawnPointEntityRecord = i;
          Load_Stream(NotAtStart, i, 0x28ui64);
          v8 = varscr_string_t;
          varscr_string_t = &varSpawnPointEntityRecord->name;
          Load_scr_string_t(NotAtStart);
          varscr_string_t = &varSpawnPointEntityRecord->target;
          Load_scr_string_t(NotAtStart);
          varscr_string_t = &varSpawnPointEntityRecord->script_noteworthy;
          Load_scr_string_t(NotAtStart);
          ++i;
          varscr_string_t = v8;
        }
        varSpawnPointEntityRecord = v5;
      }
      pos = g_streamPosGlob.pos;
      varSpawnPointRecordList = (SpawnPointRecordList *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_Spawner
==============
*/
void Load_Spawner(const DBStreamStart streamStart)
{
  Spawner *v1; 
  SpawnerField *v2; 
  __int64 numFields; 
  SpawnerField *i; 
  scr_string_t *v5; 
  scr_string_t *v6; 

  Load_Stream(streamStart, varSpawner, 0x38ui64);
  v1 = varSpawner;
  if ( varSpawner->fields )
  {
    v2 = varSpawnerField;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->fields = (SpawnerField *)g_streamPosGlob.pos;
    varSpawnerField = (SpawnerField *)g_streamPosGlob.pos;
    numFields = varSpawner->numFields;
    Load_Stream(AtStart, g_streamPosGlob.pos, 16 * numFields);
    for ( i = varSpawnerField; numFields; --numFields )
    {
      varSpawnerField = i;
      Load_Stream(NotAtStart, i, 0x10ui64);
      v5 = varscr_string_t;
      varscr_string_t = &varSpawnerField->key;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = &varSpawnerField->value;
      Load_scr_string_t(NotAtStart);
      ++i;
      varscr_string_t = v5;
    }
    v1 = varSpawner;
    varSpawnerField = v2;
  }
  v6 = varscr_string_t;
  varscr_string_t = &v1->targetname;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = &varSpawner->classname;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = v6;
}

/*
==============
Load_SpawnerArray
==============
*/
void Load_SpawnerArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  Spawner *i; 
  Spawner *v4; 
  SpawnerField *v5; 
  __int64 numFields; 
  SpawnerField *j; 
  scr_string_t *v8; 
  scr_string_t *v9; 

  v2 = count;
  Load_Stream(streamStart, varSpawner, 56 * count);
  for ( i = varSpawner; v2; --v2 )
  {
    varSpawner = i;
    Load_Stream(NotAtStart, i, 0x38ui64);
    v4 = varSpawner;
    if ( varSpawner->fields )
    {
      v5 = varSpawnerField;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->fields = (SpawnerField *)g_streamPosGlob.pos;
      varSpawnerField = (SpawnerField *)g_streamPosGlob.pos;
      numFields = varSpawner->numFields;
      Load_Stream(AtStart, g_streamPosGlob.pos, 16 * numFields);
      for ( j = varSpawnerField; numFields; --numFields )
      {
        varSpawnerField = j;
        Load_Stream(NotAtStart, j, 0x10ui64);
        v8 = varscr_string_t;
        varscr_string_t = &varSpawnerField->key;
        Load_scr_string_t(NotAtStart);
        varscr_string_t = &varSpawnerField->value;
        Load_scr_string_t(NotAtStart);
        ++j;
        varscr_string_t = v8;
      }
      v4 = varSpawner;
      varSpawnerField = v5;
    }
    v9 = varscr_string_t;
    varscr_string_t = &v4->targetname;
    Load_scr_string_t(NotAtStart);
    varscr_string_t = &varSpawner->classname;
    Load_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v9;
  }
}

/*
==============
Load_SpawnerField
==============
*/
void Load_SpawnerField(const DBStreamStart streamStart)
{
  scr_string_t *v1; 

  Load_Stream(streamStart, varSpawnerField, 0x10ui64);
  v1 = varscr_string_t;
  varscr_string_t = &varSpawnerField->key;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = &varSpawnerField->value;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = v1;
}

/*
==============
Load_SpawnerFieldArray
==============
*/
void Load_SpawnerFieldArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SpawnerField *i; 
  scr_string_t *v4; 

  v2 = count;
  Load_Stream(streamStart, varSpawnerField, 16 * count);
  for ( i = varSpawnerField; v2; --v2 )
  {
    varSpawnerField = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    v4 = varscr_string_t;
    varscr_string_t = &varSpawnerField->key;
    Load_scr_string_t(NotAtStart);
    varscr_string_t = &varSpawnerField->value;
    Load_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v4;
  }
}

/*
==============
Load_SpawnerFieldStream
==============
*/
void Load_SpawnerFieldStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  scr_string_t *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 13015, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varSpawnerField;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      v4 = varscr_string_t;
      varscr_string_t = &varSpawnerField->key;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = &varSpawnerField->value;
      Load_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varSpawnerField = (SpawnerField *)g_streamPosGlob.pos;
      varscr_string_t = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_SpawnerList
==============
*/
void Load_SpawnerList(const DBStreamStart streamStart)
{
  SpawnerList *v1; 
  Spawner *v2; 
  __int64 spawnerCount; 
  Spawner *i; 

  Load_Stream(streamStart, varSpawnerList, 0x10ui64);
  v1 = varSpawnerList;
  if ( varSpawnerList->spanwerList )
  {
    v2 = varSpawner;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->spanwerList = (Spawner *)g_streamPosGlob.pos;
    varSpawner = (Spawner *)g_streamPosGlob.pos;
    spawnerCount = varSpawnerList->spawnerCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 56 * spawnerCount);
    for ( i = varSpawner; spawnerCount; --spawnerCount )
    {
      varSpawner = i;
      Load_Spawner(NotAtStart);
      ++i;
    }
    varSpawner = v2;
  }
}

/*
==============
Load_SpawnerListArray
==============
*/
void Load_SpawnerListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SpawnerList *i; 
  SpawnerList *v4; 
  Spawner *v5; 
  __int64 spawnerCount; 
  Spawner *j; 

  v2 = count;
  Load_Stream(streamStart, varSpawnerList, 16 * count);
  for ( i = varSpawnerList; v2; --v2 )
  {
    varSpawnerList = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    v4 = varSpawnerList;
    if ( varSpawnerList->spanwerList )
    {
      v5 = varSpawner;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->spanwerList = (Spawner *)g_streamPosGlob.pos;
      varSpawner = (Spawner *)g_streamPosGlob.pos;
      spawnerCount = varSpawnerList->spawnerCount;
      Load_Stream(AtStart, g_streamPosGlob.pos, 56 * spawnerCount);
      for ( j = varSpawner; spawnerCount; --spawnerCount )
      {
        varSpawner = j;
        Load_Spawner(NotAtStart);
        ++j;
      }
      varSpawner = v5;
    }
    ++i;
  }
}

/*
==============
Load_SpawnerListStream
==============
*/
void Load_SpawnerListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  SpawnerList *v4; 
  Spawner *v5; 
  __int64 spawnerCount; 
  Spawner *i; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 13359, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varSpawnerList;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      v4 = varSpawnerList;
      if ( varSpawnerList->spanwerList )
      {
        v5 = varSpawner;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->spanwerList = (Spawner *)g_streamPosGlob.pos;
        varSpawner = (Spawner *)g_streamPosGlob.pos;
        spawnerCount = varSpawnerList->spawnerCount;
        Load_Stream(AtStart, g_streamPosGlob.pos, 56 * spawnerCount);
        for ( i = varSpawner; spawnerCount; --spawnerCount )
        {
          varSpawner = i;
          Load_Spawner(NotAtStart);
          ++i;
        }
        varSpawner = v5;
      }
      pos = g_streamPosGlob.pos;
      varSpawnerList = (SpawnerList *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_SpawnerStream
==============
*/
void Load_SpawnerStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  Spawner *v4; 
  SpawnerField *v5; 
  __int64 numFields; 
  SpawnerField *i; 
  scr_string_t *v8; 
  scr_string_t *v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 13256, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varSpawner;
    do
    {
      Load_Stream(AtStart, pos, 0x38ui64);
      v4 = varSpawner;
      if ( varSpawner->fields )
      {
        v5 = varSpawnerField;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->fields = (SpawnerField *)g_streamPosGlob.pos;
        varSpawnerField = (SpawnerField *)g_streamPosGlob.pos;
        numFields = varSpawner->numFields;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16 * numFields);
        for ( i = varSpawnerField; numFields; --numFields )
        {
          varSpawnerField = i;
          Load_Stream(NotAtStart, i, 0x10ui64);
          v8 = varscr_string_t;
          varscr_string_t = &varSpawnerField->key;
          Load_scr_string_t(NotAtStart);
          varscr_string_t = &varSpawnerField->value;
          Load_scr_string_t(NotAtStart);
          ++i;
          varscr_string_t = v8;
        }
        v4 = varSpawner;
        varSpawnerField = v5;
      }
      v9 = varscr_string_t;
      varscr_string_t = &v4->targetname;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = &varSpawner->classname;
      Load_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varSpawner = (Spawner *)g_streamPosGlob.pos;
      varscr_string_t = v9;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_SplinePointEntityRecord
==============
*/
void Load_SplinePointEntityRecord(const DBStreamStart streamStart)
{
  scr_string_t *v1; 

  Load_Stream(streamStart, varSplinePointEntityRecord, 0xA8ui64);
  v1 = varscr_string_t;
  varscr_string_t = &varSplinePointEntityRecord->splineNodeLabel;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = &varSplinePointEntityRecord->targetname;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = &varSplinePointEntityRecord->target;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = &varSplinePointEntityRecord->string;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = v1;
}

/*
==============
Load_SplinePointEntityRecordArray
==============
*/
void Load_SplinePointEntityRecordArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SplinePointEntityRecord *i; 
  scr_string_t *v4; 

  v2 = count;
  Load_Stream(streamStart, varSplinePointEntityRecord, 168 * count);
  for ( i = varSplinePointEntityRecord; v2; --v2 )
  {
    varSplinePointEntityRecord = i;
    Load_Stream(NotAtStart, i, 0xA8ui64);
    v4 = varscr_string_t;
    varscr_string_t = &varSplinePointEntityRecord->splineNodeLabel;
    Load_scr_string_t(NotAtStart);
    varscr_string_t = &varSplinePointEntityRecord->targetname;
    Load_scr_string_t(NotAtStart);
    varscr_string_t = &varSplinePointEntityRecord->target;
    Load_scr_string_t(NotAtStart);
    varscr_string_t = &varSplinePointEntityRecord->string;
    Load_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v4;
  }
}

/*
==============
Load_SplinePointEntityRecordStream
==============
*/
void Load_SplinePointEntityRecordStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  scr_string_t *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 12285, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varSplinePointEntityRecord;
    do
    {
      Load_Stream(AtStart, pos, 0xA8ui64);
      v4 = varscr_string_t;
      varscr_string_t = &varSplinePointEntityRecord->splineNodeLabel;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = &varSplinePointEntityRecord->targetname;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = &varSplinePointEntityRecord->target;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = &varSplinePointEntityRecord->string;
      Load_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varSplinePointEntityRecord = (SplinePointEntityRecord *)g_streamPosGlob.pos;
      varscr_string_t = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_SplinePointRecordList
==============
*/
void Load_SplinePointRecordList(const DBStreamStart streamStart)
{
  SplinePointRecordList *v1; 
  SplinePointEntityRecord *v2; 
  __int64 splinePointCount; 
  SplinePointEntityRecord *i; 

  Load_Stream(streamStart, varSplinePointRecordList, 0x10ui64);
  v1 = varSplinePointRecordList;
  if ( varSplinePointRecordList->splinePoints )
  {
    v2 = varSplinePointEntityRecord;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->splinePoints = (SplinePointEntityRecord *)g_streamPosGlob.pos;
    varSplinePointEntityRecord = (SplinePointEntityRecord *)g_streamPosGlob.pos;
    splinePointCount = varSplinePointRecordList->splinePointCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 168 * splinePointCount);
    for ( i = varSplinePointEntityRecord; splinePointCount; --splinePointCount )
    {
      varSplinePointEntityRecord = i;
      Load_SplinePointEntityRecord(NotAtStart);
      ++i;
    }
    varSplinePointEntityRecord = v2;
  }
}

/*
==============
Load_SplinePointRecordListArray
==============
*/
void Load_SplinePointRecordListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SplinePointRecordList *i; 
  SplinePointRecordList *v4; 
  SplinePointEntityRecord *v5; 
  __int64 splinePointCount; 
  SplinePointEntityRecord *j; 

  v2 = count;
  Load_Stream(streamStart, varSplinePointRecordList, 16 * count);
  for ( i = varSplinePointRecordList; v2; --v2 )
  {
    varSplinePointRecordList = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    v4 = varSplinePointRecordList;
    if ( varSplinePointRecordList->splinePoints )
    {
      v5 = varSplinePointEntityRecord;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->splinePoints = (SplinePointEntityRecord *)g_streamPosGlob.pos;
      varSplinePointEntityRecord = (SplinePointEntityRecord *)g_streamPosGlob.pos;
      splinePointCount = varSplinePointRecordList->splinePointCount;
      Load_Stream(AtStart, g_streamPosGlob.pos, 168 * splinePointCount);
      for ( j = varSplinePointEntityRecord; splinePointCount; --splinePointCount )
      {
        varSplinePointEntityRecord = j;
        Load_SplinePointEntityRecord(NotAtStart);
        ++j;
      }
      varSplinePointEntityRecord = v5;
    }
    ++i;
  }
}

/*
==============
Load_SplinePointRecordListStream
==============
*/
void Load_SplinePointRecordListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  SplinePointRecordList *v4; 
  SplinePointEntityRecord *v5; 
  __int64 splinePointCount; 
  SplinePointEntityRecord *i; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 12411, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varSplinePointRecordList;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      v4 = varSplinePointRecordList;
      if ( varSplinePointRecordList->splinePoints )
      {
        v5 = varSplinePointEntityRecord;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->splinePoints = (SplinePointEntityRecord *)g_streamPosGlob.pos;
        varSplinePointEntityRecord = (SplinePointEntityRecord *)g_streamPosGlob.pos;
        splinePointCount = varSplinePointRecordList->splinePointCount;
        Load_Stream(AtStart, g_streamPosGlob.pos, 168 * splinePointCount);
        for ( i = varSplinePointEntityRecord; splinePointCount; --splinePointCount )
        {
          varSplinePointEntityRecord = i;
          Load_SplinePointEntityRecord(NotAtStart);
          ++i;
        }
        varSplinePointEntityRecord = v5;
      }
      pos = g_streamPosGlob.pos;
      varSplinePointRecordList = (SplinePointRecordList *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_SplineRecordList
==============
*/
void Load_SplineRecordList(const DBStreamStart streamStart)
{
  SplineRecordList *v1; 
  SplinePointRecordList *v2; 
  __int64 splineCount; 
  SplinePointRecordList *i; 

  Load_Stream(streamStart, varSplineRecordList, 0x10ui64);
  v1 = varSplineRecordList;
  if ( varSplineRecordList->splines )
  {
    v2 = varSplinePointRecordList;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->splines = (SplinePointRecordList *)g_streamPosGlob.pos;
    varSplinePointRecordList = (SplinePointRecordList *)g_streamPosGlob.pos;
    splineCount = varSplineRecordList->splineCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 16 * splineCount);
    for ( i = varSplinePointRecordList; splineCount; --splineCount )
    {
      varSplinePointRecordList = i;
      Load_SplinePointRecordList(NotAtStart);
      ++i;
    }
    varSplinePointRecordList = v2;
  }
}

/*
==============
Load_SplineRecordListArray
==============
*/
void Load_SplineRecordListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SplineRecordList *i; 
  SplineRecordList *v4; 
  SplinePointRecordList *v5; 
  __int64 splineCount; 
  SplinePointRecordList *j; 

  v2 = count;
  Load_Stream(streamStart, varSplineRecordList, 16 * count);
  for ( i = varSplineRecordList; v2; --v2 )
  {
    varSplineRecordList = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    v4 = varSplineRecordList;
    if ( varSplineRecordList->splines )
    {
      v5 = varSplinePointRecordList;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->splines = (SplinePointRecordList *)g_streamPosGlob.pos;
      varSplinePointRecordList = (SplinePointRecordList *)g_streamPosGlob.pos;
      splineCount = varSplineRecordList->splineCount;
      Load_Stream(AtStart, g_streamPosGlob.pos, 16 * splineCount);
      for ( j = varSplinePointRecordList; splineCount; --splineCount )
      {
        varSplinePointRecordList = j;
        Load_SplinePointRecordList(NotAtStart);
        ++j;
      }
      varSplinePointRecordList = v5;
    }
    ++i;
  }
}

/*
==============
Load_SplineRecordListStream
==============
*/
void Load_SplineRecordListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  SplineRecordList *v4; 
  SplinePointRecordList *v5; 
  __int64 splineCount; 
  SplinePointRecordList *i; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 12514, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varSplineRecordList;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      v4 = varSplineRecordList;
      if ( varSplineRecordList->splines )
      {
        v5 = varSplinePointRecordList;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->splines = (SplinePointRecordList *)g_streamPosGlob.pos;
        varSplinePointRecordList = (SplinePointRecordList *)g_streamPosGlob.pos;
        splineCount = varSplineRecordList->splineCount;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16 * splineCount);
        for ( i = varSplinePointRecordList; splineCount; --splineCount )
        {
          varSplinePointRecordList = i;
          Load_SplinePointRecordList(NotAtStart);
          ++i;
        }
        varSplinePointRecordList = v5;
      }
      pos = g_streamPosGlob.pos;
      varSplineRecordList = (SplineRecordList *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_StaticModelCollisionCompressedInstance
==============
*/
void Load_StaticModelCollisionCompressedInstance(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varStaticModelCollisionCompressedInstance, 0xEui64);
}

/*
==============
Load_StaticModelCollisionCompressedInstanceArray
==============
*/
void Load_StaticModelCollisionCompressedInstanceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varStaticModelCollisionCompressedInstance, 14 * count);
}

/*
==============
Load_StaticModelCollisionCompressedInstanceStream
==============
*/
void Load_StaticModelCollisionCompressedInstanceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 6791, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varStaticModelCollisionCompressedInstance;
    do
    {
      Load_Stream(AtStart, pos, 0xEui64);
      pos = g_streamPosGlob.pos;
      varStaticModelCollisionCompressedInstance = (StaticModelCollisionCompressedInstance *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_StaticModelCollisionCompressedModel
==============
*/
void Load_StaticModelCollisionCompressedModel(const DBStreamStart streamStart)
{
  scr_string_t *v1; 
  PhysicsAsset **v2; 
  XModelDetailCollision **v3; 
  StaticModelCollisionCompressedModel *v4; 
  StaticModelCollisionCompressedInstance *v5; 

  Load_Stream(streamStart, varStaticModelCollisionCompressedModel, 0x38ui64);
  v1 = varscr_string_t;
  varscr_string_t = &varStaticModelCollisionCompressedModel->name;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = v1;
  v2 = varPhysicsAssetPtr;
  varPhysicsAssetPtr = &varStaticModelCollisionCompressedModel->physicsAsset;
  Load_PhysicsAssetPtr(NotAtStart);
  varPhysicsAssetPtr = v2;
  v3 = varXModelDetailCollisionPtr;
  varXModelDetailCollisionPtr = &varStaticModelCollisionCompressedModel->detailCollision;
  Load_XModelDetailCollisionPtr(NotAtStart);
  v4 = varStaticModelCollisionCompressedModel;
  varXModelDetailCollisionPtr = v3;
  if ( varStaticModelCollisionCompressedModel->instances )
  {
    v5 = varStaticModelCollisionCompressedInstance;
    DB_PatchMem_FixStreamAlignment(1ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->instances = (StaticModelCollisionCompressedInstance *)g_streamPosGlob.pos;
    varStaticModelCollisionCompressedInstance = (StaticModelCollisionCompressedInstance *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 14i64 * varStaticModelCollisionCompressedModel->numInstances);
    varStaticModelCollisionCompressedInstance = v5;
  }
}

/*
==============
Load_StaticModelCollisionCompressedModelArray
==============
*/
void Load_StaticModelCollisionCompressedModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  StaticModelCollisionCompressedModel *i; 
  scr_string_t *v4; 
  PhysicsAsset **v5; 
  XModelDetailCollision **v6; 
  StaticModelCollisionCompressedModel *v7; 
  StaticModelCollisionCompressedInstance *v8; 

  v2 = count;
  Load_Stream(streamStart, varStaticModelCollisionCompressedModel, 56 * count);
  for ( i = varStaticModelCollisionCompressedModel; v2; --v2 )
  {
    varStaticModelCollisionCompressedModel = i;
    Load_Stream(NotAtStart, i, 0x38ui64);
    v4 = varscr_string_t;
    varscr_string_t = &varStaticModelCollisionCompressedModel->name;
    Load_scr_string_t(NotAtStart);
    varscr_string_t = v4;
    v5 = varPhysicsAssetPtr;
    varPhysicsAssetPtr = &varStaticModelCollisionCompressedModel->physicsAsset;
    Load_PhysicsAssetPtr(NotAtStart);
    varPhysicsAssetPtr = v5;
    v6 = varXModelDetailCollisionPtr;
    varXModelDetailCollisionPtr = &varStaticModelCollisionCompressedModel->detailCollision;
    Load_XModelDetailCollisionPtr(NotAtStart);
    v7 = varStaticModelCollisionCompressedModel;
    varXModelDetailCollisionPtr = v6;
    if ( varStaticModelCollisionCompressedModel->instances )
    {
      v8 = varStaticModelCollisionCompressedInstance;
      DB_PatchMem_FixStreamAlignment(1ui64);
      DB_CheckCanIncStreamPos(0i64);
      v7->instances = (StaticModelCollisionCompressedInstance *)g_streamPosGlob.pos;
      varStaticModelCollisionCompressedInstance = (StaticModelCollisionCompressedInstance *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 14i64 * varStaticModelCollisionCompressedModel->numInstances);
      varStaticModelCollisionCompressedInstance = v8;
    }
    ++i;
  }
}

/*
==============
Load_StaticModelCollisionCompressedModelList
==============
*/
void Load_StaticModelCollisionCompressedModelList(const DBStreamStart streamStart)
{
  StaticModelCollisionCompressedModelList *v1; 
  StaticModelCollisionCompressedModel *v2; 
  __int64 numModels; 
  StaticModelCollisionCompressedModel *i; 

  Load_Stream(streamStart, varStaticModelCollisionCompressedModelList, 0x20ui64);
  v1 = varStaticModelCollisionCompressedModelList;
  if ( varStaticModelCollisionCompressedModelList->models )
  {
    v2 = varStaticModelCollisionCompressedModel;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->models = (StaticModelCollisionCompressedModel *)g_streamPosGlob.pos;
    varStaticModelCollisionCompressedModel = (StaticModelCollisionCompressedModel *)g_streamPosGlob.pos;
    numModels = varStaticModelCollisionCompressedModelList->numModels;
    Load_Stream(AtStart, g_streamPosGlob.pos, 56 * numModels);
    for ( i = varStaticModelCollisionCompressedModel; numModels; --numModels )
    {
      varStaticModelCollisionCompressedModel = i;
      Load_StaticModelCollisionCompressedModel(NotAtStart);
      ++i;
    }
    varStaticModelCollisionCompressedModel = v2;
  }
}

/*
==============
Load_StaticModelCollisionCompressedModelListArray
==============
*/
void Load_StaticModelCollisionCompressedModelListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  StaticModelCollisionCompressedModelList *i; 
  StaticModelCollisionCompressedModelList *v4; 
  StaticModelCollisionCompressedModel *v5; 
  __int64 numModels; 
  StaticModelCollisionCompressedModel *j; 

  v2 = count;
  Load_Stream(streamStart, varStaticModelCollisionCompressedModelList, 32 * count);
  for ( i = varStaticModelCollisionCompressedModelList; v2; --v2 )
  {
    varStaticModelCollisionCompressedModelList = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    v4 = varStaticModelCollisionCompressedModelList;
    if ( varStaticModelCollisionCompressedModelList->models )
    {
      v5 = varStaticModelCollisionCompressedModel;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->models = (StaticModelCollisionCompressedModel *)g_streamPosGlob.pos;
      varStaticModelCollisionCompressedModel = (StaticModelCollisionCompressedModel *)g_streamPosGlob.pos;
      numModels = varStaticModelCollisionCompressedModelList->numModels;
      Load_Stream(AtStart, g_streamPosGlob.pos, 56 * numModels);
      for ( j = varStaticModelCollisionCompressedModel; numModels; --numModels )
      {
        varStaticModelCollisionCompressedModel = j;
        Load_StaticModelCollisionCompressedModel(NotAtStart);
        ++j;
      }
      varStaticModelCollisionCompressedModel = v5;
    }
    ++i;
  }
}

/*
==============
Load_StaticModelCollisionCompressedModelListStream
==============
*/
void Load_StaticModelCollisionCompressedModelListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  StaticModelCollisionCompressedModelList *v4; 
  StaticModelCollisionCompressedModel *v5; 
  __int64 numModels; 
  StaticModelCollisionCompressedModel *i; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 7430, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varStaticModelCollisionCompressedModelList;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      v4 = varStaticModelCollisionCompressedModelList;
      if ( varStaticModelCollisionCompressedModelList->models )
      {
        v5 = varStaticModelCollisionCompressedModel;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->models = (StaticModelCollisionCompressedModel *)g_streamPosGlob.pos;
        varStaticModelCollisionCompressedModel = (StaticModelCollisionCompressedModel *)g_streamPosGlob.pos;
        numModels = varStaticModelCollisionCompressedModelList->numModels;
        Load_Stream(AtStart, g_streamPosGlob.pos, 56 * numModels);
        for ( i = varStaticModelCollisionCompressedModel; numModels; --numModels )
        {
          varStaticModelCollisionCompressedModel = i;
          Load_StaticModelCollisionCompressedModel(NotAtStart);
          ++i;
        }
        varStaticModelCollisionCompressedModel = v5;
      }
      pos = g_streamPosGlob.pos;
      varStaticModelCollisionCompressedModelList = (StaticModelCollisionCompressedModelList *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_StaticModelCollisionCompressedModelStream
==============
*/
void Load_StaticModelCollisionCompressedModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  scr_string_t *v4; 
  PhysicsAsset **v5; 
  XModelDetailCollision **v6; 
  StaticModelCollisionCompressedModel *v7; 
  StaticModelCollisionCompressedInstance *v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 7086, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varStaticModelCollisionCompressedModel;
    do
    {
      Load_Stream(AtStart, pos, 0x38ui64);
      v4 = varscr_string_t;
      varscr_string_t = &varStaticModelCollisionCompressedModel->name;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = v4;
      v5 = varPhysicsAssetPtr;
      varPhysicsAssetPtr = &varStaticModelCollisionCompressedModel->physicsAsset;
      Load_PhysicsAssetPtr(NotAtStart);
      varPhysicsAssetPtr = v5;
      v6 = varXModelDetailCollisionPtr;
      varXModelDetailCollisionPtr = &varStaticModelCollisionCompressedModel->detailCollision;
      Load_XModelDetailCollisionPtr(NotAtStart);
      v7 = varStaticModelCollisionCompressedModel;
      varXModelDetailCollisionPtr = v6;
      if ( varStaticModelCollisionCompressedModel->instances )
      {
        v8 = varStaticModelCollisionCompressedInstance;
        DB_PatchMem_FixStreamAlignment(1ui64);
        DB_CheckCanIncStreamPos(0i64);
        v7->instances = (StaticModelCollisionCompressedInstance *)g_streamPosGlob.pos;
        varStaticModelCollisionCompressedInstance = (StaticModelCollisionCompressedInstance *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 14i64 * varStaticModelCollisionCompressedModel->numInstances);
        varStaticModelCollisionCompressedInstance = v8;
      }
      pos = g_streamPosGlob.pos;
      varStaticModelCollisionCompressedModel = (StaticModelCollisionCompressedModel *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_StaticModelCollisionInstance
==============
*/
void Load_StaticModelCollisionInstance(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varStaticModelCollisionInstance, 0x1Cui64);
}

/*
==============
Load_StaticModelCollisionInstanceArray
==============
*/
void Load_StaticModelCollisionInstanceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varStaticModelCollisionInstance, 28 * count);
}

/*
==============
Load_StaticModelCollisionInstanceStream
==============
*/
void Load_StaticModelCollisionInstanceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 6914, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varStaticModelCollisionInstance;
    do
    {
      Load_Stream(AtStart, pos, 0x1Cui64);
      pos = g_streamPosGlob.pos;
      varStaticModelCollisionInstance = (StaticModelCollisionInstance *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_StaticModelCollisionModel
==============
*/
void Load_StaticModelCollisionModel(const DBStreamStart streamStart)
{
  scr_string_t *v1; 
  PhysicsAsset **v2; 
  XModelDetailCollision **v3; 
  StaticModelCollisionModel *v4; 
  StaticModelCollisionInstance *v5; 

  Load_Stream(streamStart, varStaticModelCollisionModel, 0x28ui64);
  v1 = varscr_string_t;
  varscr_string_t = &varStaticModelCollisionModel->name;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = v1;
  v2 = varPhysicsAssetPtr;
  varPhysicsAssetPtr = &varStaticModelCollisionModel->physicsAsset;
  Load_PhysicsAssetPtr(NotAtStart);
  varPhysicsAssetPtr = v2;
  v3 = varXModelDetailCollisionPtr;
  varXModelDetailCollisionPtr = &varStaticModelCollisionModel->detailCollision;
  Load_XModelDetailCollisionPtr(NotAtStart);
  v4 = varStaticModelCollisionModel;
  varXModelDetailCollisionPtr = v3;
  if ( varStaticModelCollisionModel->instances )
  {
    v5 = varStaticModelCollisionInstance;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->instances = (StaticModelCollisionInstance *)g_streamPosGlob.pos;
    varStaticModelCollisionInstance = (StaticModelCollisionInstance *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varStaticModelCollisionModel->numInstances);
    varStaticModelCollisionInstance = v5;
  }
}

/*
==============
Load_StaticModelCollisionModelArray
==============
*/
void Load_StaticModelCollisionModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  StaticModelCollisionModel *i; 
  scr_string_t *v4; 
  PhysicsAsset **v5; 
  XModelDetailCollision **v6; 
  StaticModelCollisionModel *v7; 
  StaticModelCollisionInstance *v8; 

  v2 = count;
  Load_Stream(streamStart, varStaticModelCollisionModel, 40 * count);
  for ( i = varStaticModelCollisionModel; v2; --v2 )
  {
    varStaticModelCollisionModel = i;
    Load_Stream(NotAtStart, i, 0x28ui64);
    v4 = varscr_string_t;
    varscr_string_t = &varStaticModelCollisionModel->name;
    Load_scr_string_t(NotAtStart);
    varscr_string_t = v4;
    v5 = varPhysicsAssetPtr;
    varPhysicsAssetPtr = &varStaticModelCollisionModel->physicsAsset;
    Load_PhysicsAssetPtr(NotAtStart);
    varPhysicsAssetPtr = v5;
    v6 = varXModelDetailCollisionPtr;
    varXModelDetailCollisionPtr = &varStaticModelCollisionModel->detailCollision;
    Load_XModelDetailCollisionPtr(NotAtStart);
    v7 = varStaticModelCollisionModel;
    varXModelDetailCollisionPtr = v6;
    if ( varStaticModelCollisionModel->instances )
    {
      v8 = varStaticModelCollisionInstance;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v7->instances = (StaticModelCollisionInstance *)g_streamPosGlob.pos;
      varStaticModelCollisionInstance = (StaticModelCollisionInstance *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varStaticModelCollisionModel->numInstances);
      varStaticModelCollisionInstance = v8;
    }
    ++i;
  }
}

/*
==============
Load_StaticModelCollisionModelList
==============
*/
void Load_StaticModelCollisionModelList(const DBStreamStart streamStart)
{
  StaticModelCollisionModelList *v1; 
  StaticModelCollisionModel *v2; 
  __int64 numModels; 
  StaticModelCollisionModel *i; 

  Load_Stream(streamStart, varStaticModelCollisionModelList, 0x18ui64);
  v1 = varStaticModelCollisionModelList;
  if ( varStaticModelCollisionModelList->models )
  {
    v2 = varStaticModelCollisionModel;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->models = (StaticModelCollisionModel *)g_streamPosGlob.pos;
    varStaticModelCollisionModel = (StaticModelCollisionModel *)g_streamPosGlob.pos;
    numModels = varStaticModelCollisionModelList->numModels;
    Load_Stream(AtStart, g_streamPosGlob.pos, 40 * numModels);
    for ( i = varStaticModelCollisionModel; numModels; --numModels )
    {
      varStaticModelCollisionModel = i;
      Load_StaticModelCollisionModel(NotAtStart);
      ++i;
    }
    varStaticModelCollisionModel = v2;
  }
}

/*
==============
Load_StaticModelCollisionModelListArray
==============
*/
void Load_StaticModelCollisionModelListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  StaticModelCollisionModelList *i; 
  StaticModelCollisionModelList *v4; 
  StaticModelCollisionModel *v5; 
  __int64 numModels; 
  StaticModelCollisionModel *j; 

  v2 = count;
  Load_Stream(streamStart, varStaticModelCollisionModelList, 24 * count);
  for ( i = varStaticModelCollisionModelList; v2; --v2 )
  {
    varStaticModelCollisionModelList = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    v4 = varStaticModelCollisionModelList;
    if ( varStaticModelCollisionModelList->models )
    {
      v5 = varStaticModelCollisionModel;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->models = (StaticModelCollisionModel *)g_streamPosGlob.pos;
      varStaticModelCollisionModel = (StaticModelCollisionModel *)g_streamPosGlob.pos;
      numModels = varStaticModelCollisionModelList->numModels;
      Load_Stream(AtStart, g_streamPosGlob.pos, 40 * numModels);
      for ( j = varStaticModelCollisionModel; numModels; --numModels )
      {
        varStaticModelCollisionModel = j;
        Load_StaticModelCollisionModel(NotAtStart);
        ++j;
      }
      varStaticModelCollisionModel = v5;
    }
    ++i;
  }
}

/*
==============
Load_StaticModelCollisionModelListStream
==============
*/
void Load_StaticModelCollisionModelListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  StaticModelCollisionModelList *v4; 
  StaticModelCollisionModel *v5; 
  __int64 numModels; 
  StaticModelCollisionModel *i; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 7556, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varStaticModelCollisionModelList;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      v4 = varStaticModelCollisionModelList;
      if ( varStaticModelCollisionModelList->models )
      {
        v5 = varStaticModelCollisionModel;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->models = (StaticModelCollisionModel *)g_streamPosGlob.pos;
        varStaticModelCollisionModel = (StaticModelCollisionModel *)g_streamPosGlob.pos;
        numModels = varStaticModelCollisionModelList->numModels;
        Load_Stream(AtStart, g_streamPosGlob.pos, 40 * numModels);
        for ( i = varStaticModelCollisionModel; numModels; --numModels )
        {
          varStaticModelCollisionModel = i;
          Load_StaticModelCollisionModel(NotAtStart);
          ++i;
        }
        varStaticModelCollisionModel = v5;
      }
      pos = g_streamPosGlob.pos;
      varStaticModelCollisionModelList = (StaticModelCollisionModelList *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_StaticModelCollisionModelStream
==============
*/
void Load_StaticModelCollisionModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  scr_string_t *v4; 
  PhysicsAsset **v5; 
  XModelDetailCollision **v6; 
  StaticModelCollisionModel *v7; 
  StaticModelCollisionInstance *v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 7258, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varStaticModelCollisionModel;
    do
    {
      Load_Stream(AtStart, pos, 0x28ui64);
      v4 = varscr_string_t;
      varscr_string_t = &varStaticModelCollisionModel->name;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = v4;
      v5 = varPhysicsAssetPtr;
      varPhysicsAssetPtr = &varStaticModelCollisionModel->physicsAsset;
      Load_PhysicsAssetPtr(NotAtStart);
      varPhysicsAssetPtr = v5;
      v6 = varXModelDetailCollisionPtr;
      varXModelDetailCollisionPtr = &varStaticModelCollisionModel->detailCollision;
      Load_XModelDetailCollisionPtr(NotAtStart);
      v7 = varStaticModelCollisionModel;
      varXModelDetailCollisionPtr = v6;
      if ( varStaticModelCollisionModel->instances )
      {
        v8 = varStaticModelCollisionInstance;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v7->instances = (StaticModelCollisionInstance *)g_streamPosGlob.pos;
        varStaticModelCollisionInstance = (StaticModelCollisionInstance *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varStaticModelCollisionModel->numInstances);
        varStaticModelCollisionInstance = v8;
      }
      pos = g_streamPosGlob.pos;
      varStaticModelCollisionModel = (StaticModelCollisionModel *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_TriggerHull
==============
*/
void Load_TriggerHull(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varTriggerHull, 0x20ui64);
}

/*
==============
Load_TriggerHullArray
==============
*/
void Load_TriggerHullArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varTriggerHull, 32 * count);
}

/*
==============
Load_TriggerHullStream
==============
*/
void Load_TriggerHullStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 8263, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varTriggerHull;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      pos = g_streamPosGlob.pos;
      varTriggerHull = (TriggerHull *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_TriggerModel
==============
*/
void Load_TriggerModel(const DBStreamStart streamStart)
{
  PhysicsAsset **v1; 

  Load_Stream(streamStart, varTriggerModel, 0x20ui64);
  v1 = varPhysicsAssetPtr;
  varPhysicsAssetPtr = &varTriggerModel->physicsAsset;
  Load_PhysicsAssetPtr(NotAtStart);
  varPhysicsAssetPtr = v1;
}

/*
==============
Load_TriggerModelArray
==============
*/
void Load_TriggerModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  TriggerModel *i; 
  PhysicsAsset **v4; 

  v2 = count;
  Load_Stream(streamStart, varTriggerModel, 32 * count);
  for ( i = varTriggerModel; v2; --v2 )
  {
    varTriggerModel = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    v4 = varPhysicsAssetPtr;
    varPhysicsAssetPtr = &varTriggerModel->physicsAsset;
    Load_PhysicsAssetPtr(NotAtStart);
    ++i;
    varPhysicsAssetPtr = v4;
  }
}

/*
==============
Load_TriggerModelStream
==============
*/
void Load_TriggerModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  PhysicsAsset **v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 8501, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varTriggerModel;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      v4 = varPhysicsAssetPtr;
      varPhysicsAssetPtr = &varTriggerModel->physicsAsset;
      Load_PhysicsAssetPtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varTriggerModel = (TriggerModel *)g_streamPosGlob.pos;
      varPhysicsAssetPtr = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_TriggerSlab
==============
*/
void Load_TriggerSlab(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varTriggerSlab, 0x14ui64);
}

/*
==============
Load_TriggerSlabArray
==============
*/
void Load_TriggerSlabArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varTriggerSlab, 20 * count);
}

/*
==============
Load_TriggerSlabStream
==============
*/
void Load_TriggerSlabStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 8117, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varTriggerSlab;
    do
    {
      Load_Stream(AtStart, pos, 0x14ui64);
      pos = g_streamPosGlob.pos;
      varTriggerSlab = (TriggerSlab *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_TriggerWinding
==============
*/
void Load_TriggerWinding(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varTriggerWinding, 0x14ui64);
}

/*
==============
Load_TriggerWindingArray
==============
*/
void Load_TriggerWindingArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varTriggerWinding, 20 * count);
}

/*
==============
Load_TriggerWindingPoint
==============
*/
void Load_TriggerWindingPoint(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varTriggerWindingPoint, 0xCui64);
}

/*
==============
Load_TriggerWindingPointArray
==============
*/
void Load_TriggerWindingPointArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varTriggerWindingPoint, 12 * count);
}

/*
==============
Load_TriggerWindingPointStream
==============
*/
void Load_TriggerWindingPointStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 7848, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varTriggerWindingPoint;
    do
    {
      Load_Stream(AtStart, pos, 0xCui64);
      pos = g_streamPosGlob.pos;
      varTriggerWindingPoint = (TriggerWindingPoint *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_TriggerWindingStream
==============
*/
void Load_TriggerWindingStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 7994, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varTriggerWinding;
    do
    {
      Load_Stream(AtStart, pos, 0x14ui64);
      pos = g_streamPosGlob.pos;
      varTriggerWinding = (TriggerWinding *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_VariableType
==============
*/
void Load_VariableType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varVariableType, 1ui64);
}

/*
==============
Load_VariableTypeArray
==============
*/
void Load_VariableTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varVariableType, count);
}

/*
==============
Load_VariableTypeStream
==============
*/
void Load_VariableTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 12869, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varVariableType;
    do
    {
      Load_Stream(AtStart, pos, 1ui64);
      pos = g_streamPosGlob.pos;
      varVariableType = (VariableType *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_alignHavokShapeData_t
==============
*/
void Load_alignHavokShapeData_t(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varalignHavokShapeData_t, 1ui64);
}

/*
==============
Load_alignHavokShapeData_tArray
==============
*/
void Load_alignHavokShapeData_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varalignHavokShapeData_t, count);
}

/*
==============
Load_alignHavokShapeData_tStream
==============
*/
void Load_alignHavokShapeData_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 12668, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varalignHavokShapeData_t;
    do
    {
      Load_Stream(AtStart, pos, 1ui64);
      pos = g_streamPosGlob.pos;
      varalignHavokShapeData_t = (char *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_clipMap_ptr
==============
*/
void Load_clipMap_ptr(const DBStreamStart streamStart)
{
  clipMap_t **v1; 
  __int64 v2; 
  clipMap_t *v3; 
  unsigned __int8 *inserted; 

  Load_Stream(streamStart, varclipMap_ptr, 8ui64);
  DB_PushStreamPos(1u);
  v1 = varclipMap_ptr;
  v2 = (__int64)*varclipMap_ptr;
  if ( *varclipMap_ptr )
  {
    if ( v2 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v2 != -2 && v2 != -3 )
    {
      DB_ConvertOffsetToAlias((unsigned __int64 *)varclipMap_ptr);
      goto LABEL_6;
    }
    v3 = varclipMap_t;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    inserted = NULL;
    *v1 = (clipMap_t *)g_streamPosGlob.pos;
    varclipMap_t = (clipMap_t *)g_streamPosGlob.pos;
    if ( v2 == -3 )
      inserted = DB_InsertPointer();
    Load_clipMap_t(AtStart);
    Load_ClipMapAsset(v1);
    varclipMap_t = v3;
    if ( inserted )
      *(_QWORD *)inserted = *v1;
    if ( v2 == -1 )
      DB_PopSharedData();
  }
LABEL_6:
  DB_PopStreamPos();
}

/*
==============
Load_clipMap_ptrArray
==============
*/
void Load_clipMap_ptrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  clipMap_t **i; 
  clipMap_t **v4; 
  __int64 v5; 
  clipMap_t *v6; 
  unsigned __int8 *inserted; 

  v2 = count;
  Load_Stream(streamStart, varclipMap_ptr, 8 * count);
  for ( i = varclipMap_ptr; v2; --v2 )
  {
    varclipMap_ptr = i;
    Load_Stream(NotAtStart, i, 8ui64);
    DB_PushStreamPos(1u);
    v4 = varclipMap_ptr;
    v5 = (__int64)*varclipMap_ptr;
    if ( *varclipMap_ptr )
    {
      if ( v5 == -1 )
      {
        DB_PushSharedData();
LABEL_8:
        v6 = varclipMap_t;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        inserted = NULL;
        *v4 = (clipMap_t *)g_streamPosGlob.pos;
        varclipMap_t = (clipMap_t *)g_streamPosGlob.pos;
        if ( v5 == -3 )
          inserted = DB_InsertPointer();
        Load_clipMap_t(AtStart);
        Load_ClipMapAsset(v4);
        varclipMap_t = v6;
        if ( inserted )
          *(_QWORD *)inserted = *v4;
        if ( v5 == -1 )
          DB_PopSharedData();
        goto LABEL_14;
      }
      if ( v5 == -2 || v5 == -3 )
        goto LABEL_8;
      DB_ConvertOffsetToAlias((unsigned __int64 *)varclipMap_ptr);
    }
LABEL_14:
    DB_PopStreamPos();
    ++i;
  }
}

/*
==============
Load_clipMap_ptrStream
==============
*/
void Load_clipMap_ptrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  clipMap_t **v4; 
  __int64 v5; 
  clipMap_t *v6; 
  unsigned __int8 *inserted; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 20328, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varclipMap_ptr;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      DB_PushStreamPos(1u);
      v4 = varclipMap_ptr;
      v5 = (__int64)*varclipMap_ptr;
      if ( *varclipMap_ptr )
      {
        if ( v5 == -1 )
        {
          DB_PushSharedData();
LABEL_12:
          v6 = varclipMap_t;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          inserted = NULL;
          *v4 = (clipMap_t *)g_streamPosGlob.pos;
          varclipMap_t = (clipMap_t *)g_streamPosGlob.pos;
          if ( v5 == -3 )
            inserted = DB_InsertPointer();
          Load_clipMap_t(AtStart);
          Load_ClipMapAsset(v4);
          varclipMap_t = v6;
          if ( inserted )
            *(_QWORD *)inserted = *v4;
          if ( v5 == -1 )
            DB_PopSharedData();
          goto LABEL_18;
        }
        if ( v5 == -2 || v5 == -3 )
          goto LABEL_12;
        DB_ConvertOffsetToAlias((unsigned __int64 *)varclipMap_ptr);
      }
LABEL_18:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varclipMap_ptr = (clipMap_t **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_clipMap_t
==============
*/
void Load_clipMap_t(const DBStreamStart streamStart)
{
  const char **v2; 
  clipMap_t *v3; 
  StaticModelCollisionModelList *v4; 
  __int64 numStaticModelCollisionModelLists; 
  StaticModelCollisionModelList *i; 
  MapEnts **v7; 
  clipMap_t *v8; 
  Stage *v9; 
  Stage *Stage; 
  MapTriggers *v11; 
  clipMap_t *v12; 
  char *v13; 
  clipMap_t *v14; 
  CollisionHeatmapEntry *v15; 
  clipMap_t *v16; 
  TopDownMapData *topDownMapData; 
  TopDownMapData *v18; 
  TopDownMapData *v19; 
  const char **v20; 

  DB_PatchMem_PushAsset(19, varclipMap_t);
  Load_Stream(streamStart, varclipMap_t, 0xF8ui64);
  DB_PushStreamPos(8u);
  v2 = varXString;
  varXString = &varclipMap_t->name;
  Load_XString(NotAtStart);
  v3 = varclipMap_t;
  varXString = v2;
  if ( varclipMap_t->staticModelCollisionModelLists )
  {
    v4 = varStaticModelCollisionModelList;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v3->staticModelCollisionModelLists = (StaticModelCollisionModelList *)g_streamPosGlob.pos;
    varStaticModelCollisionModelList = (StaticModelCollisionModelList *)g_streamPosGlob.pos;
    numStaticModelCollisionModelLists = varclipMap_t->numStaticModelCollisionModelLists;
    Load_Stream(AtStart, g_streamPosGlob.pos, 24 * numStaticModelCollisionModelLists);
    for ( i = varStaticModelCollisionModelList; numStaticModelCollisionModelLists; --numStaticModelCollisionModelLists )
    {
      varStaticModelCollisionModelList = i;
      Load_StaticModelCollisionModelList(NotAtStart);
      ++i;
    }
    v3 = varclipMap_t;
    varStaticModelCollisionModelList = v4;
  }
  v7 = varMapEntsPtr;
  varMapEntsPtr = &v3->mapEnts;
  Load_MapEntsPtr(NotAtStart);
  v8 = varclipMap_t;
  varMapEntsPtr = v7;
  if ( varclipMap_t->stages )
  {
    v9 = varStage;
    Stage = AllocLoad_Stage();
    v8->stages = Stage;
    varStage = Stage;
    Load_StageArray(AtStart, varclipMap_t->stageCount);
    v8 = varclipMap_t;
    varStage = v9;
  }
  v11 = varMapTriggers;
  varMapTriggers = &v8->stageTrigger;
  Load_MapTriggers(NotAtStart);
  v12 = varclipMap_t;
  varMapTriggers = v11;
  if ( varclipMap_t->havokWorldShapeData )
  {
    v13 = varalignHavokShapeData_t;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    v12->havokWorldShapeData = (char *)g_streamPosGlob.pos;
    varalignHavokShapeData_t = (char *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, varclipMap_t->havokWorldShapeDataSize);
    varalignHavokShapeData_t = v13;
  }
  v14 = varclipMap_t;
  if ( varclipMap_t->collisionHeatmap )
  {
    v15 = varCollisionHeatmapEntry;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v14->collisionHeatmap = (CollisionHeatmapEntry *)g_streamPosGlob.pos;
    varCollisionHeatmapEntry = (CollisionHeatmapEntry *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varclipMap_t->numCollisionHeatmapEntries);
    varCollisionHeatmapEntry = v15;
  }
  v16 = varclipMap_t;
  topDownMapData = varclipMap_t->topDownMapData;
  if ( topDownMapData )
  {
    if ( topDownMapData == (TopDownMapData *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( topDownMapData != (TopDownMapData *)-2i64 )
    {
      v16->topDownMapData = (TopDownMapData *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varclipMap_t->topDownMapData);
      goto LABEL_18;
    }
    v18 = varTopDownMapData;
    v19 = AllocLoad_TopDownMapData();
    v16->topDownMapData = v19;
    varTopDownMapData = v19;
    Load_TopDownMapData(AtStart);
    varTopDownMapData = v18;
    if ( topDownMapData == (TopDownMapData *)-1i64 )
      DB_PopSharedData();
  }
LABEL_18:
  v20 = varXString;
  varXString = &varclipMap_t->visionSetName;
  Load_XString(NotAtStart);
  varXString = v20;
  DB_PopStreamPos();
  DB_PatchMem_PopAsset();
}

/*
==============
Load_clipMap_tArray
==============
*/
void Load_clipMap_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  clipMap_t *v3; 
  const char **v4; 
  clipMap_t *v5; 
  StaticModelCollisionModelList *v6; 
  __int64 numStaticModelCollisionModelLists; 
  StaticModelCollisionModelList *i; 
  MapEnts **v9; 
  clipMap_t *v10; 
  Stage *v11; 
  Stage *Stage; 
  MapTriggers *v13; 
  clipMap_t *v14; 
  char *v15; 
  clipMap_t *v16; 
  CollisionHeatmapEntry *v17; 
  clipMap_t *v18; 
  TopDownMapData *topDownMapData; 
  TopDownMapData *v20; 
  TopDownMapData *v21; 
  const char **v22; 

  v2 = count;
  Load_Stream(streamStart, varclipMap_t, 248 * count);
  v3 = varclipMap_t;
  if ( v2 )
  {
    while ( 1 )
    {
      varclipMap_t = v3;
      DB_PatchMem_PushAsset(19, v3);
      Load_Stream(NotAtStart, varclipMap_t, 0xF8ui64);
      DB_PushStreamPos(8u);
      v4 = varXString;
      varXString = &varclipMap_t->name;
      Load_XString(NotAtStart);
      v5 = varclipMap_t;
      varXString = v4;
      if ( varclipMap_t->staticModelCollisionModelLists )
      {
        v6 = varStaticModelCollisionModelList;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v5->staticModelCollisionModelLists = (StaticModelCollisionModelList *)g_streamPosGlob.pos;
        varStaticModelCollisionModelList = (StaticModelCollisionModelList *)g_streamPosGlob.pos;
        numStaticModelCollisionModelLists = varclipMap_t->numStaticModelCollisionModelLists;
        Load_Stream(AtStart, g_streamPosGlob.pos, 24 * numStaticModelCollisionModelLists);
        for ( i = varStaticModelCollisionModelList; numStaticModelCollisionModelLists; --numStaticModelCollisionModelLists )
        {
          varStaticModelCollisionModelList = i;
          Load_StaticModelCollisionModelList(NotAtStart);
          ++i;
        }
        v5 = varclipMap_t;
        varStaticModelCollisionModelList = v6;
      }
      v9 = varMapEntsPtr;
      varMapEntsPtr = &v5->mapEnts;
      Load_MapEntsPtr(NotAtStart);
      v10 = varclipMap_t;
      varMapEntsPtr = v9;
      if ( varclipMap_t->stages )
      {
        v11 = varStage;
        Stage = AllocLoad_Stage();
        v10->stages = Stage;
        varStage = Stage;
        Load_StageArray(AtStart, varclipMap_t->stageCount);
        v10 = varclipMap_t;
        varStage = v11;
      }
      v13 = varMapTriggers;
      varMapTriggers = &v10->stageTrigger;
      Load_MapTriggers(NotAtStart);
      v14 = varclipMap_t;
      varMapTriggers = v13;
      if ( varclipMap_t->havokWorldShapeData )
      {
        v15 = varalignHavokShapeData_t;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        v14->havokWorldShapeData = (char *)g_streamPosGlob.pos;
        varalignHavokShapeData_t = (char *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, varclipMap_t->havokWorldShapeDataSize);
        varalignHavokShapeData_t = v15;
      }
      v16 = varclipMap_t;
      if ( varclipMap_t->collisionHeatmap )
      {
        v17 = varCollisionHeatmapEntry;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v16->collisionHeatmap = (CollisionHeatmapEntry *)g_streamPosGlob.pos;
        varCollisionHeatmapEntry = (CollisionHeatmapEntry *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varclipMap_t->numCollisionHeatmapEntries);
        varCollisionHeatmapEntry = v17;
      }
      v18 = varclipMap_t;
      topDownMapData = varclipMap_t->topDownMapData;
      if ( !topDownMapData )
        goto LABEL_19;
      if ( topDownMapData == (TopDownMapData *)-1i64 )
        break;
      if ( topDownMapData == (TopDownMapData *)-2i64 )
        goto LABEL_17;
      v18->topDownMapData = (TopDownMapData *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varclipMap_t->topDownMapData);
LABEL_19:
      v22 = varXString;
      varXString = &varclipMap_t->visionSetName;
      Load_XString(NotAtStart);
      varXString = v22;
      DB_PopStreamPos();
      DB_PatchMem_PopAsset();
      ++v3;
      if ( !--v2 )
        return;
    }
    DB_PushSharedData();
LABEL_17:
    v20 = varTopDownMapData;
    v21 = AllocLoad_TopDownMapData();
    v18->topDownMapData = v21;
    varTopDownMapData = v21;
    Load_TopDownMapData(AtStart);
    varTopDownMapData = v20;
    if ( topDownMapData == (TopDownMapData *)-1i64 )
      DB_PopSharedData();
    goto LABEL_19;
  }
}

/*
==============
Load_clipMap_tStream
==============
*/
void Load_clipMap_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 
  clipMap_t *v5; 
  StaticModelCollisionModelList *v6; 
  __int64 numStaticModelCollisionModelLists; 
  StaticModelCollisionModelList *i; 
  MapEnts **v9; 
  clipMap_t *v10; 
  Stage *v11; 
  Stage *Stage; 
  MapTriggers *v13; 
  clipMap_t *v14; 
  char *v15; 
  clipMap_t *v16; 
  CollisionHeatmapEntry *v17; 
  clipMap_t *v18; 
  TopDownMapData *topDownMapData; 
  TopDownMapData *v20; 
  TopDownMapData *v21; 
  const char **v22; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 20204, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varclipMap_t;
    while ( 1 )
    {
      DB_PatchMem_PushAsset(19, pos);
      Load_Stream(AtStart, varclipMap_t, 0xF8ui64);
      DB_PushStreamPos(8u);
      v4 = varXString;
      varXString = &varclipMap_t->name;
      Load_XString(NotAtStart);
      v5 = varclipMap_t;
      varXString = v4;
      if ( varclipMap_t->staticModelCollisionModelLists )
      {
        v6 = varStaticModelCollisionModelList;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v5->staticModelCollisionModelLists = (StaticModelCollisionModelList *)g_streamPosGlob.pos;
        varStaticModelCollisionModelList = (StaticModelCollisionModelList *)g_streamPosGlob.pos;
        numStaticModelCollisionModelLists = varclipMap_t->numStaticModelCollisionModelLists;
        Load_Stream(AtStart, g_streamPosGlob.pos, 24 * numStaticModelCollisionModelLists);
        for ( i = varStaticModelCollisionModelList; numStaticModelCollisionModelLists; --numStaticModelCollisionModelLists )
        {
          varStaticModelCollisionModelList = i;
          Load_StaticModelCollisionModelList(NotAtStart);
          ++i;
        }
        v5 = varclipMap_t;
        varStaticModelCollisionModelList = v6;
      }
      v9 = varMapEntsPtr;
      varMapEntsPtr = &v5->mapEnts;
      Load_MapEntsPtr(NotAtStart);
      v10 = varclipMap_t;
      varMapEntsPtr = v9;
      if ( varclipMap_t->stages )
      {
        v11 = varStage;
        Stage = AllocLoad_Stage();
        v10->stages = Stage;
        varStage = Stage;
        Load_StageArray(AtStart, varclipMap_t->stageCount);
        v10 = varclipMap_t;
        varStage = v11;
      }
      v13 = varMapTriggers;
      varMapTriggers = &v10->stageTrigger;
      Load_MapTriggers(NotAtStart);
      v14 = varclipMap_t;
      varMapTriggers = v13;
      if ( varclipMap_t->havokWorldShapeData )
      {
        v15 = varalignHavokShapeData_t;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        v14->havokWorldShapeData = (char *)g_streamPosGlob.pos;
        varalignHavokShapeData_t = (char *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, varclipMap_t->havokWorldShapeDataSize);
        varalignHavokShapeData_t = v15;
      }
      v16 = varclipMap_t;
      if ( varclipMap_t->collisionHeatmap )
      {
        v17 = varCollisionHeatmapEntry;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v16->collisionHeatmap = (CollisionHeatmapEntry *)g_streamPosGlob.pos;
        varCollisionHeatmapEntry = (CollisionHeatmapEntry *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varclipMap_t->numCollisionHeatmapEntries);
        varCollisionHeatmapEntry = v17;
      }
      v18 = varclipMap_t;
      topDownMapData = varclipMap_t->topDownMapData;
      if ( !topDownMapData )
        goto LABEL_23;
      if ( topDownMapData == (TopDownMapData *)-1i64 )
        break;
      if ( topDownMapData == (TopDownMapData *)-2i64 )
        goto LABEL_21;
      v18->topDownMapData = (TopDownMapData *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varclipMap_t->topDownMapData);
LABEL_23:
      v22 = varXString;
      varXString = &varclipMap_t->visionSetName;
      Load_XString(NotAtStart);
      varXString = v22;
      DB_PopStreamPos();
      DB_PatchMem_PopAsset();
      pos = g_streamPosGlob.pos;
      varclipMap_t = (clipMap_t *)g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_21:
    v20 = varTopDownMapData;
    v21 = AllocLoad_TopDownMapData();
    v18->topDownMapData = v21;
    varTopDownMapData = v21;
    Load_TopDownMapData(AtStart);
    varTopDownMapData = v20;
    if ( topDownMapData == (TopDownMapData *)-1i64 )
      DB_PopSharedData();
    goto LABEL_23;
  }
}

/*
==============
Load_cmodel_t
==============
*/
void Load_cmodel_t(const DBStreamStart streamStart)
{
  PhysicsAsset **v1; 

  Load_Stream(streamStart, varcmodel_t, 0x38ui64);
  v1 = varPhysicsAssetPtr;
  varPhysicsAssetPtr = &varcmodel_t->physicsAsset;
  Load_PhysicsAssetPtr(NotAtStart);
  varPhysicsAssetPtr = v1;
}

/*
==============
Load_cmodel_tArray
==============
*/
void Load_cmodel_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  cmodel_t *i; 
  PhysicsAsset **v4; 

  v2 = count;
  Load_Stream(streamStart, varcmodel_t, 56 * count);
  for ( i = varcmodel_t; v2; --v2 )
  {
    varcmodel_t = i;
    Load_Stream(NotAtStart, i, 0x38ui64);
    v4 = varPhysicsAssetPtr;
    varPhysicsAssetPtr = &varcmodel_t->physicsAsset;
    Load_PhysicsAssetPtr(NotAtStart);
    ++i;
    varPhysicsAssetPtr = v4;
  }
}

/*
==============
Load_cmodel_tStream
==============
*/
void Load_cmodel_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  PhysicsAsset **v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 7771, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varcmodel_t;
    do
    {
      Load_Stream(AtStart, pos, 0x38ui64);
      v4 = varPhysicsAssetPtr;
      varPhysicsAssetPtr = &varcmodel_t->physicsAsset;
      Load_PhysicsAssetPtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varcmodel_t = (cmodel_t *)g_streamPosGlob.pos;
      varPhysicsAssetPtr = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Mark_AddonMapEnts
==============
*/
_BOOL8 Mark_AddonMapEnts()
{
  MapTriggers *v0; 
  int v1; 
  cmodel_t *v2; 
  int v3; 
  _BOOL8 result; 

  v0 = marMapTriggers;
  marMapTriggers = &marAddonMapEnts->trigger;
  v1 = Mark_MapTriggers();
  marMapTriggers = v0;
  result = 0;
  if ( v1 )
  {
    if ( !marAddonMapEnts->cmodels )
      return 1;
    v2 = marcmodel_t;
    marcmodel_t = marAddonMapEnts->cmodels;
    v3 = Mark_cmodel_tArray(marAddonMapEnts->numSubModels);
    marcmodel_t = v2;
    if ( v3 )
      return 1;
  }
  return result;
}

/*
==============
Mark_AddonMapEntsArray
==============
*/
__int64 Mark_AddonMapEntsArray(const unsigned __int64 count)
{
  AddonMapEnts *v1; 
  __int64 v2; 
  MapTriggers *v4; 
  int v5; 
  cmodel_t *v6; 
  int v7; 

  v1 = marAddonMapEnts;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  while ( 1 )
  {
    v4 = marMapTriggers;
    marMapTriggers = &v1->trigger;
    marAddonMapEnts = v1;
    v5 = Mark_MapTriggers();
    marMapTriggers = v4;
    if ( !v5 )
      break;
    if ( marAddonMapEnts->cmodels )
    {
      v6 = marcmodel_t;
      marcmodel_t = marAddonMapEnts->cmodels;
      v7 = Mark_cmodel_tArray(marAddonMapEnts->numSubModels);
      marcmodel_t = v6;
      if ( !v7 )
        break;
    }
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_AddonMapEntsPtr
==============
*/
__int64 Mark_AddonMapEntsPtr()
{
  AddonMapEnts *v0; 
  AddonMapEnts *v1; 
  int v3; 

  v0 = *marAddonMapEntsPtr;
  if ( *marAddonMapEntsPtr )
  {
    v1 = marAddonMapEnts;
    marAddonMapEnts = *marAddonMapEntsPtr;
    if ( Mark_AddonMapEntsAsset(v0, 0) )
    {
      marAddonMapEnts = v1;
      return 1i64;
    }
    if ( !Mark_AddonMapEnts() )
    {
      marAddonMapEnts = v1;
      return 0i64;
    }
    v3 = Mark_AddonMapEntsAsset(marAddonMapEnts, 1);
    marAddonMapEnts = v1;
    if ( !v3 )
      return 0i64;
  }
  return 1i64;
}

/*
==============
Mark_AddonMapEntsPtrArray
==============
*/
__int64 Mark_AddonMapEntsPtrArray(const unsigned __int64 count)
{
  AddonMapEnts **v1; 
  __int64 v2; 
  AddonMapEnts *v4; 
  AddonMapEnts *v5; 
  int v6; 

  v1 = marAddonMapEntsPtr;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marAddonMapEnts;
  while ( 1 )
  {
    marAddonMapEntsPtr = v1;
    v5 = *v1;
    if ( !*v1 )
      goto LABEL_8;
    marAddonMapEnts = *v1;
    if ( Mark_AddonMapEntsAsset(v5, 0) )
    {
      marAddonMapEnts = v4;
      goto LABEL_8;
    }
    if ( !Mark_AddonMapEnts() )
      break;
    v6 = Mark_AddonMapEntsAsset(marAddonMapEnts, 1);
    marAddonMapEnts = v4;
    if ( !v6 )
      return 0i64;
LABEL_8:
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  marAddonMapEnts = v4;
  return 0i64;
}

/*
==============
Mark_AudioPASpeaker
==============
*/
__int64 Mark_AudioPASpeaker()
{
  return 1i64;
}

/*
==============
Mark_AudioPASpeakerArray
==============
*/
__int64 Mark_AudioPASpeakerArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_AudioPropagationEdge
==============
*/
__int64 Mark_AudioPropagationEdge()
{
  return 1i64;
}

/*
==============
Mark_AudioPropagationEdgeArray
==============
*/
__int64 Mark_AudioPropagationEdgeArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_AudioPropagationNode
==============
*/
__int64 Mark_AudioPropagationNode()
{
  return 1i64;
}

/*
==============
Mark_AudioPropagationNodeArray
==============
*/
__int64 Mark_AudioPropagationNodeArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_CTAudRvbPanInfo
==============
*/
__int64 Mark_CTAudRvbPanInfo()
{
  return 1i64;
}

/*
==============
Mark_CTAudRvbPanInfoArray
==============
*/
__int64 Mark_CTAudRvbPanInfoArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ClientEntAnchor
==============
*/
_BOOL8 Mark_ClientEntAnchor()
{
  scr_string_t *v0; 
  int v1; 

  v0 = marscr_string_t;
  marscr_string_t = (scr_string_t *)marClientEntAnchor;
  v1 = Mark_scr_string_t();
  marscr_string_t = v0;
  return v1 != 0;
}

/*
==============
Mark_ClientEntAnchorArray
==============
*/
__int64 Mark_ClientEntAnchorArray(const unsigned __int64 count)
{
  ClientEntAnchor *v1; 
  __int64 v2; 
  scr_string_t *v4; 
  int v5; 

  v1 = marClientEntAnchor;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marscr_string_t;
  while ( 1 )
  {
    marClientEntAnchor = v1;
    marscr_string_t = (scr_string_t *)v1;
    v5 = Mark_scr_string_t();
    marscr_string_t = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ClientEntityLinkToDefPtr
==============
*/
__int64 Mark_ClientEntityLinkToDefPtr()
{
  return 1i64;
}

/*
==============
Mark_ClientEntityLinkToDefPtrArray
==============
*/
__int64 Mark_ClientEntityLinkToDefPtrArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ClientExploderDef
==============
*/
_BOOL8 Mark_ClientExploderDef()
{
  FxCombinedDef *v0; 
  int v1; 
  scr_string_t *v2; 
  int v3; 
  _BOOL8 result; 

  v0 = marFxCombinedDef;
  marFxCombinedDef = &marClientExploderDef->effect;
  v1 = Mark_FxCombinedDef();
  marFxCombinedDef = v0;
  result = 0;
  if ( v1 )
  {
    v2 = marscr_string_t;
    marscr_string_t = &marClientExploderDef->name;
    v3 = Mark_scr_string_t();
    marscr_string_t = v2;
    if ( v3 )
      return 1;
  }
  return result;
}

/*
==============
Mark_ClientExploderDefArray
==============
*/
__int64 Mark_ClientExploderDefArray(const unsigned __int64 count)
{
  ClientExploderDef *v1; 
  __int64 v2; 
  FxCombinedDef *v4; 
  int v5; 
  scr_string_t *v6; 
  int v7; 

  v1 = marClientExploderDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  while ( 1 )
  {
    v4 = marFxCombinedDef;
    marFxCombinedDef = &v1->effect;
    marClientExploderDef = v1;
    v5 = Mark_FxCombinedDef();
    marFxCombinedDef = v4;
    if ( !v5 )
      break;
    v6 = marscr_string_t;
    marscr_string_t = &marClientExploderDef->name;
    v7 = Mark_scr_string_t();
    marscr_string_t = v6;
    if ( !v7 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ClientIntervalSoundDef
==============
*/
__int64 Mark_ClientIntervalSoundDef()
{
  return 1i64;
}

/*
==============
Mark_ClientIntervalSoundDefArray
==============
*/
__int64 Mark_ClientIntervalSoundDefArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ClientLoopSoundDef
==============
*/
__int64 Mark_ClientLoopSoundDef()
{
  return 1i64;
}

/*
==============
Mark_ClientLoopSoundDefArray
==============
*/
__int64 Mark_ClientLoopSoundDefArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ClientMapTriggers
==============
*/
__int64 Mark_ClientMapTriggers()
{
  return 1i64;
}

/*
==============
Mark_ClientMapTriggersArray
==============
*/
__int64 Mark_ClientMapTriggersArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ClientOneshotEffectDef
==============
*/
_BOOL8 Mark_ClientOneshotEffectDef()
{
  FxCombinedDef *v0; 
  int v1; 

  v0 = marFxCombinedDef;
  marFxCombinedDef = &marClientOneshotEffectDef->effect;
  v1 = Mark_FxCombinedDef();
  marFxCombinedDef = v0;
  return v1 != 0;
}

/*
==============
Mark_ClientOneshotEffectDefArray
==============
*/
__int64 Mark_ClientOneshotEffectDefArray(const unsigned __int64 count)
{
  ClientOneshotEffectDef *v1; 
  __int64 v2; 
  FxCombinedDef *v4; 
  int v5; 

  v1 = marClientOneshotEffectDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marFxCombinedDef;
  while ( 1 )
  {
    marClientOneshotEffectDef = v1;
    marFxCombinedDef = &v1->effect;
    v5 = Mark_FxCombinedDef();
    marFxCombinedDef = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ClientReactiveEntDef
==============
*/
_BOOL8 Mark_ClientReactiveEntDef()
{
  FxCombinedDef *v0; 
  int v1; 

  v0 = marFxCombinedDef;
  marFxCombinedDef = &marClientReactiveEntDef->effect;
  v1 = Mark_FxCombinedDef();
  marFxCombinedDef = v0;
  return v1 != 0;
}

/*
==============
Mark_ClientReactiveEntDefArray
==============
*/
__int64 Mark_ClientReactiveEntDefArray(const unsigned __int64 count)
{
  ClientReactiveEntDef *v1; 
  __int64 v2; 
  FxCombinedDef *v4; 
  int v5; 

  v1 = marClientReactiveEntDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marFxCombinedDef;
  while ( 1 )
  {
    marClientReactiveEntDef = v1;
    marFxCombinedDef = &v1->effect;
    v5 = Mark_FxCombinedDef();
    marFxCombinedDef = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ClientRootDef
==============
*/
_BOOL8 Mark_ClientRootDef()
{
  scr_string_t *v0; 
  int v1; 

  v0 = marscr_string_t;
  marscr_string_t = &marClientRootDef->path;
  v1 = Mark_scr_string_t();
  marscr_string_t = v0;
  return v1 != 0;
}

/*
==============
Mark_ClientRootDefArray
==============
*/
__int64 Mark_ClientRootDefArray(const unsigned __int64 count)
{
  ClientRootDef *v1; 
  __int64 v2; 
  scr_string_t *v4; 
  int v5; 

  v1 = marClientRootDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marscr_string_t;
  while ( 1 )
  {
    marClientRootDef = v1;
    marscr_string_t = &v1->path;
    v5 = Mark_scr_string_t();
    marscr_string_t = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ClientSideEffects
==============
*/
__int64 Mark_ClientSideEffects()
{
  ClientSideEffects *v0; 
  __int64 v1; 
  FxCombinedDef *v2; 
  ClientOneshotEffectDef *oneshotEffects; 
  ClientOneshotEffectDef *v4; 
  __int64 v5; 
  unsigned __int64 oneshotEffectCount; 
  int v7; 
  ClientExploderDef *exploders; 
  ClientExploderDef *v9; 
  __int64 v10; 
  unsigned __int64 exploderCount; 
  int v12; 
  scr_string_t *v13; 
  int v14; 
  ClientReactiveEntDef *reactiveEnts; 
  ClientReactiveEntDef *v16; 
  __int64 v17; 
  unsigned __int64 reactiveEntCount; 
  int v19; 
  ClientRootDef *roots; 
  ClientRootDef *v21; 
  unsigned __int64 rootCount; 
  scr_string_t *v23; 
  int v24; 

  v0 = marClientSideEffects;
  v1 = 0i64;
  v2 = marFxCombinedDef;
  oneshotEffects = marClientSideEffects->oneshotEffects;
  if ( !oneshotEffects )
  {
LABEL_7:
    exploders = v0->exploders;
    if ( exploders )
    {
      v9 = marClientExploderDef;
      v10 = 0i64;
      marClientExploderDef = v0->exploders;
      exploderCount = v0->exploderCount;
      if ( v0->exploderCount )
      {
        while ( 1 )
        {
          marClientExploderDef = exploders;
          marFxCombinedDef = &exploders->effect;
          v12 = Mark_FxCombinedDef();
          marFxCombinedDef = v2;
          if ( !v12 )
            break;
          v13 = marscr_string_t;
          marscr_string_t = &marClientExploderDef->name;
          v14 = Mark_scr_string_t();
          marscr_string_t = v13;
          if ( !v14 )
            break;
          v2 = marFxCombinedDef;
          ++exploders;
          if ( ++v10 >= exploderCount )
          {
            v0 = marClientSideEffects;
            goto LABEL_13;
          }
        }
        marClientExploderDef = v9;
        return 0i64;
      }
LABEL_13:
      marClientExploderDef = v9;
    }
    reactiveEnts = v0->reactiveEnts;
    if ( reactiveEnts )
    {
      v16 = marClientReactiveEntDef;
      v17 = 0i64;
      marClientReactiveEntDef = v0->reactiveEnts;
      reactiveEntCount = v0->reactiveEntCount;
      if ( v0->reactiveEntCount )
      {
        while ( 1 )
        {
          marClientReactiveEntDef = reactiveEnts;
          marFxCombinedDef = &reactiveEnts->effect;
          v19 = Mark_FxCombinedDef();
          marFxCombinedDef = v2;
          if ( !v19 )
            break;
          ++reactiveEnts;
          if ( ++v17 >= reactiveEntCount )
          {
            v0 = marClientSideEffects;
            goto LABEL_19;
          }
        }
        marClientReactiveEntDef = v16;
        return 0i64;
      }
LABEL_19:
      marClientReactiveEntDef = v16;
    }
    roots = v0->roots;
    if ( roots )
    {
      v21 = marClientRootDef;
      marClientRootDef = v0->roots;
      rootCount = v0->rootCount;
      if ( v0->rootCount )
      {
        while ( 1 )
        {
          v23 = marscr_string_t;
          marscr_string_t = &roots->path;
          marClientRootDef = roots;
          v24 = Mark_scr_string_t();
          marscr_string_t = v23;
          if ( !v24 )
            break;
          ++roots;
          if ( ++v1 >= rootCount )
            goto LABEL_24;
        }
        marClientRootDef = v21;
        return 0i64;
      }
LABEL_24:
      marClientRootDef = v21;
    }
    return 1i64;
  }
  v4 = marClientOneshotEffectDef;
  v5 = 0i64;
  marClientOneshotEffectDef = marClientSideEffects->oneshotEffects;
  oneshotEffectCount = marClientSideEffects->oneshotEffectCount;
  if ( !marClientSideEffects->oneshotEffectCount )
  {
LABEL_6:
    marClientOneshotEffectDef = v4;
    goto LABEL_7;
  }
  while ( 1 )
  {
    marClientOneshotEffectDef = oneshotEffects;
    marFxCombinedDef = &oneshotEffects->effect;
    v7 = Mark_FxCombinedDef();
    marFxCombinedDef = v2;
    if ( !v7 )
      break;
    ++oneshotEffects;
    if ( ++v5 >= oneshotEffectCount )
    {
      v0 = marClientSideEffects;
      goto LABEL_6;
    }
  }
  marClientOneshotEffectDef = v4;
  return 0i64;
}

/*
==============
Mark_ClientSideEffectsArray
==============
*/
__int64 Mark_ClientSideEffectsArray(const unsigned __int64 count)
{
  ClientSideEffects *v1; 
  __int64 v2; 
  unsigned __int64 v3; 
  FxCombinedDef *v4; 
  ClientSideEffects *v5; 
  ClientOneshotEffectDef *oneshotEffects; 
  ClientOneshotEffectDef *v7; 
  __int64 v8; 
  unsigned __int64 oneshotEffectCount; 
  int v10; 
  ClientExploderDef *exploders; 
  ClientExploderDef *v12; 
  __int64 v13; 
  unsigned __int64 exploderCount; 
  int v15; 
  scr_string_t *v16; 
  int v17; 
  ClientReactiveEntDef *reactiveEnts; 
  ClientReactiveEntDef *v19; 
  __int64 v20; 
  unsigned __int64 reactiveEntCount; 
  int v22; 
  ClientRootDef *roots; 
  ClientRootDef *v24; 
  __int64 v25; 
  unsigned __int64 rootCount; 
  scr_string_t *v27; 
  int v28; 

  v1 = marClientSideEffects;
  v2 = 0i64;
  v3 = count;
  if ( !count )
    return 1i64;
  v4 = marFxCombinedDef;
  while ( 1 )
  {
    v5 = v1;
    marClientSideEffects = v1;
    oneshotEffects = v1->oneshotEffects;
    if ( !oneshotEffects )
      goto LABEL_9;
    v7 = marClientOneshotEffectDef;
    v8 = 0i64;
    marClientOneshotEffectDef = v1->oneshotEffects;
    oneshotEffectCount = v1->oneshotEffectCount;
    if ( v1->oneshotEffectCount )
      break;
LABEL_8:
    marClientOneshotEffectDef = v7;
LABEL_9:
    exploders = v5->exploders;
    if ( exploders )
    {
      v12 = marClientExploderDef;
      v13 = 0i64;
      marClientExploderDef = v5->exploders;
      exploderCount = v5->exploderCount;
      if ( v5->exploderCount )
      {
        while ( 1 )
        {
          marClientExploderDef = exploders;
          marFxCombinedDef = &exploders->effect;
          v15 = Mark_FxCombinedDef();
          marFxCombinedDef = v4;
          if ( !v15 )
            break;
          v16 = marscr_string_t;
          marscr_string_t = &marClientExploderDef->name;
          v17 = Mark_scr_string_t();
          marscr_string_t = v16;
          if ( !v17 )
            break;
          v4 = marFxCombinedDef;
          ++exploders;
          if ( ++v13 >= exploderCount )
          {
            v5 = marClientSideEffects;
            goto LABEL_15;
          }
        }
        marClientExploderDef = v12;
        return 0i64;
      }
LABEL_15:
      marClientExploderDef = v12;
      v3 = count;
    }
    reactiveEnts = v5->reactiveEnts;
    if ( reactiveEnts )
    {
      v19 = marClientReactiveEntDef;
      v20 = 0i64;
      marClientReactiveEntDef = v5->reactiveEnts;
      reactiveEntCount = v5->reactiveEntCount;
      if ( v5->reactiveEntCount )
      {
        while ( 1 )
        {
          marClientReactiveEntDef = reactiveEnts;
          marFxCombinedDef = &reactiveEnts->effect;
          v22 = Mark_FxCombinedDef();
          marFxCombinedDef = v4;
          if ( !v22 )
            break;
          ++reactiveEnts;
          if ( ++v20 >= reactiveEntCount )
          {
            v5 = marClientSideEffects;
            goto LABEL_21;
          }
        }
        marClientReactiveEntDef = v19;
        return 0i64;
      }
LABEL_21:
      marClientReactiveEntDef = v19;
    }
    roots = v5->roots;
    if ( roots )
    {
      v24 = marClientRootDef;
      v25 = 0i64;
      marClientRootDef = v5->roots;
      rootCount = v5->rootCount;
      if ( v5->rootCount )
      {
        while ( 1 )
        {
          v27 = marscr_string_t;
          marscr_string_t = &roots->path;
          marClientRootDef = roots;
          v28 = Mark_scr_string_t();
          marscr_string_t = v27;
          if ( !v28 )
            break;
          ++roots;
          if ( ++v25 >= rootCount )
          {
            v4 = marFxCombinedDef;
            goto LABEL_27;
          }
        }
        marClientRootDef = v24;
        return 0i64;
      }
LABEL_27:
      marClientRootDef = v24;
    }
    ++v1;
    if ( ++v2 >= v3 )
      return 1i64;
  }
  while ( 1 )
  {
    marClientOneshotEffectDef = oneshotEffects;
    marFxCombinedDef = &oneshotEffects->effect;
    v10 = Mark_FxCombinedDef();
    marFxCombinedDef = v4;
    if ( !v10 )
      break;
    ++oneshotEffects;
    if ( ++v8 >= oneshotEffectCount )
    {
      v5 = marClientSideEffects;
      goto LABEL_8;
    }
  }
  marClientOneshotEffectDef = v7;
  return 0i64;
}

/*
==============
Mark_ClientTriggerBlend
==============
*/
__int64 Mark_ClientTriggerBlend()
{
  return 1i64;
}

/*
==============
Mark_ClientTriggerBlendArray
==============
*/
__int64 Mark_ClientTriggerBlendArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ClientTriggerBlendNode
==============
*/
__int64 Mark_ClientTriggerBlendNode()
{
  return 1i64;
}

/*
==============
Mark_ClientTriggerBlendNodeArray
==============
*/
__int64 Mark_ClientTriggerBlendNodeArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ClientTriggerHull
==============
*/
__int64 Mark_ClientTriggerHull()
{
  return 1i64;
}

/*
==============
Mark_ClientTriggerHullArray
==============
*/
__int64 Mark_ClientTriggerHullArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ClientTriggerModel
==============
*/
__int64 Mark_ClientTriggerModel()
{
  return 1i64;
}

/*
==============
Mark_ClientTriggerModelArray
==============
*/
__int64 Mark_ClientTriggerModelArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ClientTriggers
==============
*/
int Mark_ClientTriggers()
{
  SndBankTransient **v0; 
  int result; 

  if ( !marClientTriggers->detailSoundBank )
    return 1;
  v0 = marSndBankTransientPtr;
  marSndBankTransientPtr = marClientTriggers->detailSoundBank;
  result = Mark_SndBankTransientPtrArray(marClientTriggers->trigger.count);
  marSndBankTransientPtr = v0;
  if ( result )
    return 1;
  return result;
}

/*
==============
Mark_ClientTriggersArray
==============
*/
__int64 Mark_ClientTriggersArray(const unsigned __int64 count)
{
  ClientTriggers *v1; 
  __int64 v2; 
  SndBankTransient **v4; 
  int v5; 

  v1 = marClientTriggers;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marSndBankTransientPtr;
  while ( 1 )
  {
    marClientTriggers = v1;
    if ( v1->detailSoundBank )
    {
      marSndBankTransientPtr = v1->detailSoundBank;
      v5 = Mark_SndBankTransientPtrArray(v1->trigger.count);
      marSndBankTransientPtr = v4;
      if ( !v5 )
        break;
    }
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_CollMapLookupEntry
==============
*/
__int64 Mark_CollMapLookupEntry()
{
  return 1i64;
}

/*
==============
Mark_CollMapLookupEntryArray
==============
*/
__int64 Mark_CollMapLookupEntryArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_CollisionHeatmapEntry
==============
*/
__int64 Mark_CollisionHeatmapEntry()
{
  return 1i64;
}

/*
==============
Mark_CollisionHeatmapEntryArray
==============
*/
__int64 Mark_CollisionHeatmapEntryArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_CollisionTile
==============
*/
int Mark_CollisionTile()
{
  StaticModelCollisionCompressedModelList *v0; 
  int result; 

  if ( !marCollisionTile->staticModelCollision )
    return 1;
  v0 = marStaticModelCollisionCompressedModelList;
  marStaticModelCollisionCompressedModelList = marCollisionTile->staticModelCollision;
  result = Mark_StaticModelCollisionCompressedModelList();
  marStaticModelCollisionCompressedModelList = v0;
  if ( result )
    return 1;
  return result;
}

/*
==============
Mark_CollisionTileArray
==============
*/
__int64 Mark_CollisionTileArray(const unsigned __int64 count)
{
  CollisionTile *v1; 
  __int64 v2; 
  StaticModelCollisionCompressedModelList *v4; 
  int v5; 

  v1 = marCollisionTile;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marStaticModelCollisionCompressedModelList;
  while ( 1 )
  {
    marCollisionTile = v1;
    if ( v1->staticModelCollision )
    {
      marStaticModelCollisionCompressedModelList = v1->staticModelCollision;
      v5 = Mark_StaticModelCollisionCompressedModelList();
      marStaticModelCollisionCompressedModelList = v4;
      if ( !v5 )
        break;
    }
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_CollisionTilePtr
==============
*/
__int64 Mark_CollisionTilePtr()
{
  CollisionTile *v0; 
  CollisionTile *v1; 
  int v3; 

  v0 = *marCollisionTilePtr;
  if ( *marCollisionTilePtr )
  {
    v1 = marCollisionTile;
    marCollisionTile = *marCollisionTilePtr;
    if ( Mark_CollisionTileAsset(v0, 0) )
    {
      marCollisionTile = v1;
      return 1i64;
    }
    if ( !Mark_CollisionTile() )
    {
      marCollisionTile = v1;
      return 0i64;
    }
    v3 = Mark_CollisionTileAsset(marCollisionTile, 1);
    marCollisionTile = v1;
    if ( !v3 )
      return 0i64;
  }
  return 1i64;
}

/*
==============
Mark_CollisionTilePtrArray
==============
*/
__int64 Mark_CollisionTilePtrArray(const unsigned __int64 count)
{
  CollisionTile **v1; 
  __int64 v2; 
  CollisionTile *v4; 
  CollisionTile *v5; 
  CollisionTile *v6; 
  StaticModelCollisionCompressedModelList *v7; 
  int v8; 
  int v9; 

  v1 = marCollisionTilePtr;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marCollisionTile;
  while ( 1 )
  {
    marCollisionTilePtr = v1;
    v5 = *v1;
    if ( !*v1 )
      goto LABEL_10;
    marCollisionTile = *v1;
    if ( Mark_CollisionTileAsset(v5, 0) )
    {
      marCollisionTile = v4;
      goto LABEL_10;
    }
    v6 = marCollisionTile;
    if ( marCollisionTile->staticModelCollision )
      break;
LABEL_9:
    v9 = Mark_CollisionTileAsset(v6, 1);
    marCollisionTile = v4;
    if ( !v9 )
      return 0i64;
LABEL_10:
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  v7 = marStaticModelCollisionCompressedModelList;
  marStaticModelCollisionCompressedModelList = marCollisionTile->staticModelCollision;
  v8 = Mark_StaticModelCollisionCompressedModelList();
  marStaticModelCollisionCompressedModelList = v7;
  if ( v8 )
  {
    v6 = marCollisionTile;
    goto LABEL_9;
  }
  marCollisionTile = v4;
  return 0i64;
}

/*
==============
Mark_CreateFxAssetData
==============
*/
__int64 Mark_CreateFxAssetData()
{
  CreateFxPaletteDef *fxPalette; 
  CreateFxPaletteDef *v1; 
  __int64 v2; 
  unsigned __int64 fxPaletteCount; 
  scr_string_t *v4; 
  __int64 result; 

  fxPalette = marCreateFxAssetData->fxPalette;
  if ( !fxPalette )
    return 1i64;
  v1 = marCreateFxPaletteDef;
  v2 = 0i64;
  marCreateFxPaletteDef = marCreateFxAssetData->fxPalette;
  fxPaletteCount = marCreateFxAssetData->fxPaletteCount;
  if ( !marCreateFxAssetData->fxPaletteCount )
  {
LABEL_7:
    marCreateFxPaletteDef = v1;
    return 1i64;
  }
  v4 = marscr_string_t;
  while ( 1 )
  {
    marCreateFxPaletteDef = fxPalette;
    marscr_string_t = &fxPalette->aliasName;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marCreateFxPaletteDef->effectPath;
    if ( !Mark_scr_string_t() )
      break;
    ++fxPalette;
    marscr_string_t = v4;
    if ( ++v2 >= fxPaletteCount )
      goto LABEL_7;
  }
  marscr_string_t = v4;
  result = 0i64;
  marCreateFxPaletteDef = v1;
  return result;
}

/*
==============
Mark_CreateFxAssetDataArray
==============
*/
__int64 Mark_CreateFxAssetDataArray(const unsigned __int64 count)
{
  CreateFxAssetData *v1; 
  __int64 v2; 
  CreateFxPaletteDef *v4; 
  scr_string_t *v5; 
  CreateFxPaletteDef *fxPalette; 
  __int64 v7; 
  unsigned __int64 fxPaletteCount; 
  __int64 result; 

  v1 = marCreateFxAssetData;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marCreateFxPaletteDef;
  v5 = marscr_string_t;
  while ( 1 )
  {
    marCreateFxAssetData = v1;
    fxPalette = v1->fxPalette;
    if ( fxPalette )
      break;
LABEL_9:
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  marCreateFxPaletteDef = v1->fxPalette;
  v7 = 0i64;
  fxPaletteCount = v1->fxPaletteCount;
  if ( !v1->fxPaletteCount )
  {
LABEL_8:
    marCreateFxPaletteDef = v4;
    goto LABEL_9;
  }
  while ( 1 )
  {
    marCreateFxPaletteDef = fxPalette;
    marscr_string_t = &fxPalette->aliasName;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marCreateFxPaletteDef->effectPath;
    if ( !Mark_scr_string_t() )
      break;
    ++fxPalette;
    marscr_string_t = v5;
    if ( ++v7 >= fxPaletteCount )
      goto LABEL_8;
  }
  marscr_string_t = v5;
  result = 0i64;
  marCreateFxPaletteDef = v4;
  return result;
}

/*
==============
Mark_CreateFxPaletteDef
==============
*/
int Mark_CreateFxPaletteDef()
{
  scr_string_t *v0; 
  int result; 
  int v2; 

  v0 = marscr_string_t;
  marscr_string_t = &marCreateFxPaletteDef->aliasName;
  result = Mark_scr_string_t();
  if ( result )
  {
    marscr_string_t = &marCreateFxPaletteDef->effectPath;
    v2 = Mark_scr_string_t();
    marscr_string_t = v0;
    return v2 != 0;
  }
  else
  {
    marscr_string_t = v0;
  }
  return result;
}

/*
==============
Mark_CreateFxPaletteDefArray
==============
*/
__int64 Mark_CreateFxPaletteDefArray(const unsigned __int64 count)
{
  CreateFxPaletteDef *v1; 
  __int64 v2; 
  scr_string_t *v4; 

  v1 = marCreateFxPaletteDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marscr_string_t;
  while ( 1 )
  {
    marCreateFxPaletteDef = v1;
    marscr_string_t = &v1->aliasName;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marCreateFxPaletteDef->effectPath;
    if ( !Mark_scr_string_t() )
      break;
    ++v1;
    marscr_string_t = v4;
    if ( ++v2 >= count )
      return 1i64;
  }
  marscr_string_t = v4;
  return 0i64;
}

/*
==============
Mark_DynEntityList
==============
*/
__int64 Mark_DynEntityList()
{
  DynEntityList *v0; 
  DynEntityDef *v1; 
  int v2; 
  int v3; 

  v0 = marDynEntityList;
  v1 = marDynEntityDef;
  if ( marDynEntityList->dynEntDefList[0] )
  {
    marDynEntityDef = marDynEntityList->dynEntDefList[0];
    v2 = Mark_DynEntityDefArray(marDynEntityList->dynEntCount[0]);
    marDynEntityDef = v1;
    if ( !v2 )
      return 0i64;
    v0 = marDynEntityList;
  }
  if ( v0->dynEntDefList[1] )
  {
    marDynEntityDef = v0->dynEntDefList[1];
    v3 = Mark_DynEntityDefArray(v0->dynEntCount[1]);
    marDynEntityDef = v1;
    if ( !v3 )
      return 0i64;
  }
  return 1i64;
}

/*
==============
Mark_DynEntityListArray
==============
*/
__int64 Mark_DynEntityListArray(const unsigned __int64 count)
{
  DynEntityList *v1; 
  __int64 v2; 
  DynEntityDef *v4; 
  DynEntityList *v5; 
  int v6; 
  int v7; 

  v1 = marDynEntityList;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marDynEntityDef;
  while ( 1 )
  {
    marDynEntityList = v1;
    v5 = v1;
    if ( v1->dynEntDefList[0] )
    {
      marDynEntityDef = v1->dynEntDefList[0];
      v6 = Mark_DynEntityDefArray(v1->dynEntCount[0]);
      marDynEntityDef = v4;
      if ( !v6 )
        return 0i64;
      v5 = marDynEntityList;
    }
    if ( v5->dynEntDefList[1] )
    {
      marDynEntityDef = v5->dynEntDefList[1];
      v7 = Mark_DynEntityDefArray(v5->dynEntCount[1]);
      marDynEntityDef = v4;
      if ( !v7 )
        break;
    }
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_DynEntityListPtr
==============
*/
__int64 Mark_DynEntityListPtr()
{
  DynEntityList *v0; 
  DynEntityList *v1; 
  int v3; 

  v0 = *marDynEntityListPtr;
  if ( *marDynEntityListPtr )
  {
    v1 = marDynEntityList;
    marDynEntityList = *marDynEntityListPtr;
    if ( Mark_DynEntityListAsset(v0, 0) )
    {
      marDynEntityList = v1;
      return 1i64;
    }
    if ( !Mark_DynEntityList() )
    {
      marDynEntityList = v1;
      return 0i64;
    }
    v3 = Mark_DynEntityListAsset(marDynEntityList, 1);
    marDynEntityList = v1;
    if ( !v3 )
      return 0i64;
  }
  return 1i64;
}

/*
==============
Mark_DynEntityListPtrArray
==============
*/
__int64 Mark_DynEntityListPtrArray(const unsigned __int64 count)
{
  DynEntityList **v1; 
  __int64 v2; 
  DynEntityList *v4; 
  DynEntityList *v5; 
  int v6; 

  v1 = marDynEntityListPtr;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marDynEntityList;
  while ( 1 )
  {
    marDynEntityListPtr = v1;
    v5 = *v1;
    if ( !*v1 )
      goto LABEL_8;
    marDynEntityList = *v1;
    if ( Mark_DynEntityListAsset(v5, 0) )
    {
      marDynEntityList = v4;
      goto LABEL_8;
    }
    if ( !Mark_DynEntityList() )
      break;
    v6 = Mark_DynEntityListAsset(marDynEntityList, 1);
    marDynEntityList = v4;
    if ( !v6 )
      return 0i64;
LABEL_8:
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  marDynEntityList = v4;
  return 0i64;
}

/*
==============
Mark_MapEdgeList
==============
*/
__int64 Mark_MapEdgeList()
{
  return 1i64;
}

/*
==============
Mark_MapEdgeListArray
==============
*/
__int64 Mark_MapEdgeListArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_MapEdgeListPtr
==============
*/
int Mark_MapEdgeListPtr()
{
  MapEdgeList *v0; 
  MapEdgeList *v1; 
  int result; 

  v0 = *marMapEdgeListPtr;
  if ( !*marMapEdgeListPtr )
    return 1;
  v1 = marMapEdgeList;
  marMapEdgeList = *marMapEdgeListPtr;
  if ( Mark_MapEdgeListAsset(v0, 0) )
  {
    marMapEdgeList = v1;
    return 1;
  }
  result = Mark_MapEdgeListAsset(marMapEdgeList, 1);
  marMapEdgeList = v1;
  if ( result )
    return 1;
  return result;
}

/*
==============
Mark_MapEdgeListPtrArray
==============
*/
__int64 Mark_MapEdgeListPtrArray(const unsigned __int64 count)
{
  MapEdgeList **v1; 
  __int64 v2; 
  MapEdgeList *v4; 
  MapEdgeList *v5; 
  int v6; 

  v1 = marMapEdgeListPtr;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marMapEdgeList;
  while ( 1 )
  {
    marMapEdgeListPtr = v1;
    v5 = *v1;
    if ( *v1 )
      break;
LABEL_7:
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  marMapEdgeList = *v1;
  if ( Mark_MapEdgeListAsset(v5, 0) )
  {
    marMapEdgeList = v4;
    goto LABEL_7;
  }
  v6 = Mark_MapEdgeListAsset(marMapEdgeList, 1);
  marMapEdgeList = v4;
  if ( v6 )
    goto LABEL_7;
  return 0i64;
}

/*
==============
Mark_MapEnts
==============
*/
_BOOL8 Mark_MapEnts()
{
  MapTriggers *v0; 
  int v1; 
  MapEnts *v2; 
  ClientTriggers *v3; 
  SndBankTransient **v4; 
  int v5; 
  SpawnPointRecordList *v7; 
  int v8; 
  SplineRecordList *v9; 
  int v10; 
  MapEnts *v11; 
  cmodel_t *v12; 
  int v13; 
  MapEdgeList **edgeLists; 
  __int64 v15; 
  MapEdgeList **v16; 
  __int64 v17; 
  unsigned __int64 numEdgeLists; 
  MapEdgeList *v19; 
  MapEdgeList *v20; 
  int v21; 
  CM_ClientModel *v22; 
  int v23; 
  ClientEntAnchor *clientEntAnchors; 
  ClientEntAnchor *v25; 
  unsigned __int64 clientEntAnchorCount; 
  scr_string_t *v27; 
  int v28; 
  ScriptableMapEnts *v29; 
  int v30; 
  SpawnGroup *v31; 
  int v32; 
  ClientSideEffects *v33; 
  int v34; 
  CreateFxAssetData *v35; 
  int FxAssetData; 
  MapEnts *v37; 
  scr_string_t *v38; 
  int v39; 
  ServerSideEffects *v40; 
  int v41; 
  MapEnts *v42; 
  MayhemInstance *v43; 
  int v44; 
  SpawnerList *v45; 
  int v46; 

  v0 = marMapTriggers;
  marMapTriggers = &marMapEnts->trigger;
  v1 = Mark_MapTriggers();
  marMapTriggers = v0;
  if ( !v1 )
    return 0i64;
  v2 = marMapEnts;
  v3 = marClientTriggers;
  marClientTriggers = &marMapEnts->clientTrigger;
  if ( marMapEnts->clientTrigger.detailSoundBank )
  {
    v4 = marSndBankTransientPtr;
    marSndBankTransientPtr = marMapEnts->clientTrigger.detailSoundBank;
    v5 = Mark_SndBankTransientPtrArray(marMapEnts->clientTrigger.trigger.count);
    marSndBankTransientPtr = v4;
    if ( !v5 )
    {
      marClientTriggers = v3;
      return 0i64;
    }
    v2 = marMapEnts;
  }
  v7 = marSpawnPointRecordList;
  marSpawnPointRecordList = &v2->spawnList;
  marClientTriggers = v3;
  v8 = Mark_SpawnPointRecordList();
  marSpawnPointRecordList = v7;
  if ( !v8 )
    return 0i64;
  v9 = marSplineRecordList;
  marSplineRecordList = &marMapEnts->splineList;
  v10 = Mark_SplineRecordList();
  marSplineRecordList = v9;
  if ( !v10 )
    return 0i64;
  v11 = marMapEnts;
  if ( marMapEnts->cmodels )
  {
    v12 = marcmodel_t;
    marcmodel_t = marMapEnts->cmodels;
    v13 = Mark_cmodel_tArray(marMapEnts->numSubModels);
    marcmodel_t = v12;
    if ( !v13 )
      return 0i64;
    v11 = marMapEnts;
  }
  edgeLists = v11->edgeLists;
  v15 = 0i64;
  if ( edgeLists )
  {
    v16 = marMapEdgeListPtr;
    v17 = 0i64;
    marMapEdgeListPtr = v11->edgeLists;
    numEdgeLists = v11->numEdgeLists;
    if ( v11->numEdgeLists )
    {
      v19 = marMapEdgeList;
      while ( 1 )
      {
        marMapEdgeListPtr = edgeLists;
        v20 = *edgeLists;
        if ( *edgeLists )
        {
          marMapEdgeList = *edgeLists;
          if ( Mark_MapEdgeListAsset(v20, 0) )
          {
            marMapEdgeList = v19;
          }
          else
          {
            v21 = Mark_MapEdgeListAsset(marMapEdgeList, 1);
            marMapEdgeList = v19;
            if ( !v21 )
            {
              marMapEdgeListPtr = v16;
              return 0i64;
            }
          }
        }
        ++edgeLists;
        if ( ++v17 >= numEdgeLists )
        {
          v11 = marMapEnts;
          break;
        }
      }
    }
    marMapEdgeListPtr = v16;
  }
  if ( v11->clientModels )
  {
    v22 = marCM_ClientModel;
    marCM_ClientModel = v11->clientModels;
    v23 = Mark_CM_ClientModelArray(v11->numClientModels);
    marCM_ClientModel = v22;
    if ( !v23 )
      return 0i64;
    v11 = marMapEnts;
  }
  clientEntAnchors = v11->clientEntAnchors;
  if ( clientEntAnchors )
  {
    v25 = marClientEntAnchor;
    marClientEntAnchor = v11->clientEntAnchors;
    clientEntAnchorCount = v11->clientEntAnchorCount;
    if ( v11->clientEntAnchorCount )
    {
      v27 = marscr_string_t;
      while ( 1 )
      {
        marClientEntAnchor = clientEntAnchors;
        marscr_string_t = (scr_string_t *)clientEntAnchors;
        v28 = Mark_scr_string_t();
        marscr_string_t = v27;
        if ( !v28 )
          break;
        ++clientEntAnchors;
        if ( ++v15 >= clientEntAnchorCount )
        {
          v11 = marMapEnts;
          goto LABEL_31;
        }
      }
      marClientEntAnchor = v25;
      return 0i64;
    }
LABEL_31:
    marClientEntAnchor = v25;
  }
  v29 = marScriptableMapEnts;
  marScriptableMapEnts = &v11->scriptableMapEnts;
  v30 = Mark_ScriptableMapEnts();
  marScriptableMapEnts = v29;
  if ( !v30 )
    return 0i64;
  v31 = marSpawnGroup;
  marSpawnGroup = &marMapEnts->spawnGroupLoot;
  v32 = Mark_SpawnGroup();
  marSpawnGroup = v31;
  if ( !v32 )
    return 0i64;
  v33 = marClientSideEffects;
  marClientSideEffects = &marMapEnts->clientSideEffects;
  v34 = Mark_ClientSideEffects();
  marClientSideEffects = v33;
  if ( !v34 )
    return 0i64;
  v35 = marCreateFxAssetData;
  marCreateFxAssetData = &marMapEnts->createFxAssetData;
  FxAssetData = Mark_CreateFxAssetData();
  marCreateFxAssetData = v35;
  if ( !FxAssetData )
    return 0i64;
  v37 = marMapEnts;
  if ( marMapEnts->exploderNames )
  {
    v38 = marscr_string_t;
    marscr_string_t = marMapEnts->exploderNames;
    v39 = Mark_scr_string_tArray(marMapEnts->exploderNameTotal);
    marscr_string_t = v38;
    if ( !v39 )
      return 0i64;
    v37 = marMapEnts;
  }
  v40 = marServerSideEffects;
  marServerSideEffects = &v37->serverSideEffects;
  v41 = Mark_ServerSideEffects();
  marServerSideEffects = v40;
  if ( !v41 )
    return 0i64;
  v42 = marMapEnts;
  if ( marMapEnts->mayhemScenes )
  {
    v43 = marMayhemInstance;
    marMayhemInstance = marMapEnts->mayhemScenes;
    v44 = Mark_MayhemInstanceArray(marMapEnts->numMayhemScenes);
    marMayhemInstance = v43;
    if ( !v44 )
      return 0i64;
    v42 = marMapEnts;
  }
  v45 = marSpawnerList;
  marSpawnerList = &v42->spawners;
  v46 = Mark_SpawnerList();
  marSpawnerList = v45;
  return v46 != 0;
}

/*
==============
Mark_MapEntsArray
==============
*/
__int64 Mark_MapEntsArray(const unsigned __int64 count)
{
  MapEnts *v1; 
  __int64 v2; 

  v1 = marMapEnts;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  while ( 1 )
  {
    marMapEnts = v1;
    if ( !Mark_MapEnts() )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_MapEntsPtr
==============
*/
__int64 Mark_MapEntsPtr()
{
  MapEnts *v0; 
  MapEnts *v1; 
  int v3; 

  v0 = *marMapEntsPtr;
  if ( *marMapEntsPtr )
  {
    v1 = marMapEnts;
    marMapEnts = *marMapEntsPtr;
    if ( Mark_MapEntsAsset(v0, 0) )
    {
      marMapEnts = v1;
      return 1i64;
    }
    if ( !Mark_MapEnts() )
    {
      marMapEnts = v1;
      return 0i64;
    }
    v3 = Mark_MapEntsAsset(marMapEnts, 1);
    marMapEnts = v1;
    if ( !v3 )
      return 0i64;
  }
  return 1i64;
}

/*
==============
Mark_MapEntsPtrArray
==============
*/
__int64 Mark_MapEntsPtrArray(const unsigned __int64 count)
{
  MapEnts **v1; 
  __int64 v2; 
  MapEnts *v4; 
  MapEnts *v5; 
  int v6; 

  v1 = marMapEntsPtr;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marMapEnts;
  while ( 1 )
  {
    marMapEntsPtr = v1;
    v5 = *v1;
    if ( !*v1 )
      goto LABEL_8;
    marMapEnts = *v1;
    if ( Mark_MapEntsAsset(v5, 0) )
    {
      marMapEnts = v4;
      goto LABEL_8;
    }
    if ( !Mark_MapEnts() )
      break;
    v6 = Mark_MapEntsAsset(marMapEnts, 1);
    marMapEnts = v4;
    if ( !v6 )
      return 0i64;
LABEL_8:
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  marMapEnts = v4;
  return 0i64;
}

/*
==============
Mark_MapTriggers
==============
*/
__int64 Mark_MapTriggers()
{
  TriggerModel *models; 
  TriggerModel *v1; 
  __int64 v2; 
  unsigned __int64 count; 
  PhysicsAsset **v4; 
  int v5; 

  models = marMapTriggers->models;
  if ( !models )
    return 1i64;
  v1 = marTriggerModel;
  v2 = 0i64;
  marTriggerModel = marMapTriggers->models;
  count = marMapTriggers->count;
  if ( !marMapTriggers->count )
  {
LABEL_6:
    marTriggerModel = v1;
    return 1i64;
  }
  v4 = marPhysicsAssetPtr;
  while ( 1 )
  {
    marTriggerModel = models;
    marPhysicsAssetPtr = &models->physicsAsset;
    v5 = Mark_PhysicsAssetPtr();
    marPhysicsAssetPtr = v4;
    if ( !v5 )
      break;
    ++models;
    if ( ++v2 >= count )
      goto LABEL_6;
  }
  marTriggerModel = v1;
  return 0i64;
}

/*
==============
Mark_MapTriggersArray
==============
*/
__int64 Mark_MapTriggersArray(const unsigned __int64 count)
{
  MapTriggers *v1; 
  __int64 v2; 
  TriggerModel *v4; 
  PhysicsAsset **v5; 
  TriggerModel *models; 
  __int64 v7; 
  unsigned __int64 v8; 
  int v9; 

  v1 = marMapTriggers;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marTriggerModel;
  v5 = marPhysicsAssetPtr;
  while ( 1 )
  {
    marMapTriggers = v1;
    models = v1->models;
    if ( models )
      break;
LABEL_8:
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  marTriggerModel = v1->models;
  v7 = 0i64;
  v8 = v1->count;
  if ( !v1->count )
  {
LABEL_7:
    marTriggerModel = v4;
    goto LABEL_8;
  }
  while ( 1 )
  {
    marTriggerModel = models;
    marPhysicsAssetPtr = &models->physicsAsset;
    v9 = Mark_PhysicsAssetPtr();
    marPhysicsAssetPtr = v5;
    if ( !v9 )
      break;
    ++models;
    if ( ++v7 >= v8 )
      goto LABEL_7;
  }
  marTriggerModel = v4;
  return 0i64;
}

/*
==============
Mark_PhysicsCapacities
==============
*/
__int64 Mark_PhysicsCapacities()
{
  return 1i64;
}

/*
==============
Mark_PhysicsCapacitiesArray
==============
*/
__int64 Mark_PhysicsCapacitiesArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ServerExploderDef
==============
*/
_BOOL8 Mark_ServerExploderDef()
{
  scr_string_t *v0; 
  int v1; 
  _BOOL8 result; 

  v0 = marscr_string_t;
  marscr_string_t = &marServerExploderDef->name;
  if ( Mark_scr_string_t() && (marscr_string_t = &marServerExploderDef->earthquakeName, Mark_scr_string_t()) )
  {
    marscr_string_t = &marServerExploderDef->rumbleName;
    v1 = Mark_scr_string_t();
    marscr_string_t = v0;
    return v1 != 0;
  }
  else
  {
    result = 0i64;
    marscr_string_t = v0;
  }
  return result;
}

/*
==============
Mark_ServerExploderDefArray
==============
*/
__int64 Mark_ServerExploderDefArray(const unsigned __int64 count)
{
  ServerExploderDef *v1; 
  __int64 v2; 
  scr_string_t *v4; 

  v1 = marServerExploderDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marscr_string_t;
  while ( 1 )
  {
    marServerExploderDef = v1;
    marscr_string_t = &v1->name;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marServerExploderDef->earthquakeName;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marServerExploderDef->rumbleName;
    if ( !Mark_scr_string_t() )
      break;
    ++v1;
    marscr_string_t = v4;
    if ( ++v2 >= count )
      return 1i64;
  }
  marscr_string_t = v4;
  return 0i64;
}

/*
==============
Mark_ServerSideEffects
==============
*/
__int64 Mark_ServerSideEffects()
{
  ServerExploderDef *exploders; 
  ServerExploderDef *v1; 
  __int64 v2; 
  unsigned __int64 exploderCount; 
  scr_string_t *v4; 
  __int64 result; 

  exploders = marServerSideEffects->exploders;
  if ( !exploders )
    return 1i64;
  v1 = marServerExploderDef;
  v2 = 0i64;
  marServerExploderDef = marServerSideEffects->exploders;
  exploderCount = marServerSideEffects->exploderCount;
  if ( !marServerSideEffects->exploderCount )
  {
LABEL_8:
    marServerExploderDef = v1;
    return 1i64;
  }
  v4 = marscr_string_t;
  while ( 1 )
  {
    marServerExploderDef = exploders;
    marscr_string_t = &exploders->name;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marServerExploderDef->earthquakeName;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marServerExploderDef->rumbleName;
    if ( !Mark_scr_string_t() )
      break;
    ++exploders;
    marscr_string_t = v4;
    if ( ++v2 >= exploderCount )
      goto LABEL_8;
  }
  marscr_string_t = v4;
  result = 0i64;
  marServerExploderDef = v1;
  return result;
}

/*
==============
Mark_ServerSideEffectsArray
==============
*/
__int64 Mark_ServerSideEffectsArray(const unsigned __int64 count)
{
  ServerSideEffects *v1; 
  __int64 v2; 
  ServerExploderDef *v4; 
  scr_string_t *v5; 
  ServerExploderDef *exploders; 
  __int64 v7; 
  unsigned __int64 exploderCount; 
  __int64 result; 

  v1 = marServerSideEffects;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marServerExploderDef;
  v5 = marscr_string_t;
  while ( 1 )
  {
    marServerSideEffects = v1;
    exploders = v1->exploders;
    if ( exploders )
      break;
LABEL_10:
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  marServerExploderDef = v1->exploders;
  v7 = 0i64;
  exploderCount = v1->exploderCount;
  if ( !v1->exploderCount )
  {
LABEL_9:
    marServerExploderDef = v4;
    goto LABEL_10;
  }
  while ( 1 )
  {
    marServerExploderDef = exploders;
    marscr_string_t = &exploders->name;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marServerExploderDef->earthquakeName;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marServerExploderDef->rumbleName;
    if ( !Mark_scr_string_t() )
      break;
    ++exploders;
    marscr_string_t = v5;
    if ( ++v7 >= exploderCount )
      goto LABEL_9;
  }
  marscr_string_t = v5;
  result = 0i64;
  marServerExploderDef = v4;
  return result;
}

/*
==============
Mark_SpawnGroup
==============
*/
__int64 Mark_SpawnGroup()
{
  SpawnGroupZone *zones; 
  SpawnGroupZone *v1; 
  __int64 v2; 
  unsigned __int64 zoneCount; 
  scr_string_t *v4; 
  int v5; 

  zones = marSpawnGroup->zones;
  if ( !zones )
    return 1i64;
  v1 = marSpawnGroupZone;
  v2 = 0i64;
  marSpawnGroupZone = marSpawnGroup->zones;
  zoneCount = marSpawnGroup->zoneCount;
  if ( !marSpawnGroup->zoneCount )
  {
LABEL_6:
    marSpawnGroupZone = v1;
    return 1i64;
  }
  v4 = marscr_string_t;
  while ( 1 )
  {
    marSpawnGroupZone = zones;
    marscr_string_t = &zones->name;
    v5 = Mark_scr_string_t();
    marscr_string_t = v4;
    if ( !v5 )
      break;
    ++zones;
    if ( ++v2 >= zoneCount )
      goto LABEL_6;
  }
  marSpawnGroupZone = v1;
  return 0i64;
}

/*
==============
Mark_SpawnGroupArray
==============
*/
__int64 Mark_SpawnGroupArray(const unsigned __int64 count)
{
  SpawnGroup *v1; 
  __int64 v2; 
  SpawnGroupZone *v4; 
  scr_string_t *v5; 
  SpawnGroupZone *zones; 
  __int64 v7; 
  unsigned __int64 zoneCount; 
  int v9; 

  v1 = marSpawnGroup;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marSpawnGroupZone;
  v5 = marscr_string_t;
  while ( 1 )
  {
    marSpawnGroup = v1;
    zones = v1->zones;
    if ( zones )
      break;
LABEL_8:
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  marSpawnGroupZone = v1->zones;
  v7 = 0i64;
  zoneCount = v1->zoneCount;
  if ( !v1->zoneCount )
  {
LABEL_7:
    marSpawnGroupZone = v4;
    goto LABEL_8;
  }
  while ( 1 )
  {
    marSpawnGroupZone = zones;
    marscr_string_t = &zones->name;
    v9 = Mark_scr_string_t();
    marscr_string_t = v5;
    if ( !v9 )
      break;
    ++zones;
    if ( ++v7 >= zoneCount )
      goto LABEL_7;
  }
  marSpawnGroupZone = v4;
  return 0i64;
}

/*
==============
Mark_SpawnGroupCluster
==============
*/
__int64 Mark_SpawnGroupCluster()
{
  return 1i64;
}

/*
==============
Mark_SpawnGroupClusterArray
==============
*/
__int64 Mark_SpawnGroupClusterArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_SpawnGroupPoint
==============
*/
__int64 Mark_SpawnGroupPoint()
{
  return 1i64;
}

/*
==============
Mark_SpawnGroupPointArray
==============
*/
__int64 Mark_SpawnGroupPointArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_SpawnGroupZone
==============
*/
_BOOL8 Mark_SpawnGroupZone()
{
  scr_string_t *v0; 
  int v1; 

  v0 = marscr_string_t;
  marscr_string_t = &marSpawnGroupZone->name;
  v1 = Mark_scr_string_t();
  marscr_string_t = v0;
  return v1 != 0;
}

/*
==============
Mark_SpawnGroupZoneArray
==============
*/
__int64 Mark_SpawnGroupZoneArray(const unsigned __int64 count)
{
  SpawnGroupZone *v1; 
  __int64 v2; 
  scr_string_t *v4; 
  int v5; 

  v1 = marSpawnGroupZone;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marscr_string_t;
  while ( 1 )
  {
    marSpawnGroupZone = v1;
    marscr_string_t = &v1->name;
    v5 = Mark_scr_string_t();
    marscr_string_t = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_SpawnPointEntityRecord
==============
*/
_BOOL8 Mark_SpawnPointEntityRecord()
{
  scr_string_t *v0; 
  int v1; 
  _BOOL8 result; 

  v0 = marscr_string_t;
  marscr_string_t = &marSpawnPointEntityRecord->name;
  if ( Mark_scr_string_t() && (marscr_string_t = &marSpawnPointEntityRecord->target, Mark_scr_string_t()) )
  {
    marscr_string_t = &marSpawnPointEntityRecord->script_noteworthy;
    v1 = Mark_scr_string_t();
    marscr_string_t = v0;
    return v1 != 0;
  }
  else
  {
    result = 0i64;
    marscr_string_t = v0;
  }
  return result;
}

/*
==============
Mark_SpawnPointEntityRecordArray
==============
*/
__int64 Mark_SpawnPointEntityRecordArray(const unsigned __int64 count)
{
  SpawnPointEntityRecord *v1; 
  __int64 v2; 
  scr_string_t *v4; 

  v1 = marSpawnPointEntityRecord;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marscr_string_t;
  while ( 1 )
  {
    marSpawnPointEntityRecord = v1;
    marscr_string_t = &v1->name;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marSpawnPointEntityRecord->target;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marSpawnPointEntityRecord->script_noteworthy;
    if ( !Mark_scr_string_t() )
      break;
    ++v1;
    marscr_string_t = v4;
    if ( ++v2 >= count )
      return 1i64;
  }
  marscr_string_t = v4;
  return 0i64;
}

/*
==============
Mark_SpawnPointRecordList
==============
*/
__int64 Mark_SpawnPointRecordList()
{
  SpawnPointEntityRecord *spawns; 
  SpawnPointEntityRecord *v1; 
  __int64 v2; 
  unsigned __int64 spawnsCount; 
  scr_string_t *v4; 
  __int64 result; 

  spawns = marSpawnPointRecordList->spawns;
  if ( !spawns )
    return 1i64;
  v1 = marSpawnPointEntityRecord;
  v2 = 0i64;
  marSpawnPointEntityRecord = marSpawnPointRecordList->spawns;
  spawnsCount = marSpawnPointRecordList->spawnsCount;
  if ( !marSpawnPointRecordList->spawnsCount )
  {
LABEL_8:
    marSpawnPointEntityRecord = v1;
    return 1i64;
  }
  v4 = marscr_string_t;
  while ( 1 )
  {
    marSpawnPointEntityRecord = spawns;
    marscr_string_t = &spawns->name;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marSpawnPointEntityRecord->target;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marSpawnPointEntityRecord->script_noteworthy;
    if ( !Mark_scr_string_t() )
      break;
    ++spawns;
    marscr_string_t = v4;
    if ( ++v2 >= spawnsCount )
      goto LABEL_8;
  }
  marscr_string_t = v4;
  result = 0i64;
  marSpawnPointEntityRecord = v1;
  return result;
}

/*
==============
Mark_SpawnPointRecordListArray
==============
*/
__int64 Mark_SpawnPointRecordListArray(const unsigned __int64 count)
{
  SpawnPointRecordList *v1; 
  __int64 v2; 
  SpawnPointEntityRecord *v4; 
  scr_string_t *v5; 
  SpawnPointEntityRecord *spawns; 
  __int64 v7; 
  unsigned __int64 spawnsCount; 
  __int64 result; 

  v1 = marSpawnPointRecordList;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marSpawnPointEntityRecord;
  v5 = marscr_string_t;
  while ( 1 )
  {
    marSpawnPointRecordList = v1;
    spawns = v1->spawns;
    if ( spawns )
      break;
LABEL_10:
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  marSpawnPointEntityRecord = v1->spawns;
  v7 = 0i64;
  spawnsCount = v1->spawnsCount;
  if ( !v1->spawnsCount )
  {
LABEL_9:
    marSpawnPointEntityRecord = v4;
    goto LABEL_10;
  }
  while ( 1 )
  {
    marSpawnPointEntityRecord = spawns;
    marscr_string_t = &spawns->name;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marSpawnPointEntityRecord->target;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marSpawnPointEntityRecord->script_noteworthy;
    if ( !Mark_scr_string_t() )
      break;
    ++spawns;
    marscr_string_t = v5;
    if ( ++v7 >= spawnsCount )
      goto LABEL_9;
  }
  marscr_string_t = v5;
  result = 0i64;
  marSpawnPointEntityRecord = v4;
  return result;
}

/*
==============
Mark_Spawner
==============
*/
__int64 Mark_Spawner()
{
  Spawner *v0; 
  scr_string_t *v1; 
  SpawnerField *fields; 
  SpawnerField *v3; 
  __int64 v4; 
  unsigned __int64 numFields; 
  __int64 result; 
  int v7; 

  v0 = marSpawner;
  v1 = marscr_string_t;
  fields = marSpawner->fields;
  if ( !fields )
  {
LABEL_8:
    marscr_string_t = &v0->targetname;
    if ( Mark_scr_string_t() )
    {
      marscr_string_t = &marSpawner->classname;
      v7 = Mark_scr_string_t();
      marscr_string_t = v1;
      if ( v7 )
        return 1i64;
    }
    else
    {
      marscr_string_t = v1;
    }
    return 0i64;
  }
  v3 = marSpawnerField;
  v4 = 0i64;
  marSpawnerField = marSpawner->fields;
  numFields = marSpawner->numFields;
  if ( !marSpawner->numFields )
  {
LABEL_7:
    marSpawnerField = v3;
    goto LABEL_8;
  }
  while ( 1 )
  {
    marSpawnerField = fields;
    marscr_string_t = &fields->key;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marSpawnerField->value;
    if ( !Mark_scr_string_t() )
      break;
    ++fields;
    if ( ++v4 >= numFields )
    {
      v0 = marSpawner;
      goto LABEL_7;
    }
  }
  marSpawnerField = v3;
  result = 0i64;
  marscr_string_t = v1;
  return result;
}

/*
==============
Mark_SpawnerArray
==============
*/
__int64 Mark_SpawnerArray(const unsigned __int64 count)
{
  Spawner *v1; 
  __int64 v2; 
  scr_string_t *v4; 
  Spawner *v5; 
  SpawnerField *fields; 
  SpawnerField *v7; 
  __int64 v8; 
  unsigned __int64 numFields; 
  int v10; 

  v1 = marSpawner;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marscr_string_t;
  while ( 1 )
  {
    v5 = v1;
    marSpawner = v1;
    fields = v1->fields;
    if ( !fields )
      goto LABEL_10;
    v7 = marSpawnerField;
    v8 = 0i64;
    marSpawnerField = v1->fields;
    numFields = v1->numFields;
    if ( v1->numFields )
      break;
LABEL_9:
    marSpawnerField = v7;
LABEL_10:
    marscr_string_t = &v5->targetname;
    if ( !Mark_scr_string_t() )
      goto LABEL_15;
    marscr_string_t = &marSpawner->classname;
    v10 = Mark_scr_string_t();
    marscr_string_t = v4;
    if ( !v10 )
      return 0i64;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  while ( 1 )
  {
    marSpawnerField = fields;
    marscr_string_t = &fields->key;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marSpawnerField->value;
    if ( !Mark_scr_string_t() )
      break;
    ++fields;
    if ( ++v8 >= numFields )
    {
      v5 = marSpawner;
      goto LABEL_9;
    }
  }
  marSpawnerField = v7;
LABEL_15:
  marscr_string_t = v4;
  return 0i64;
}

/*
==============
Mark_SpawnerField
==============
*/
int Mark_SpawnerField()
{
  scr_string_t *v0; 
  int result; 
  int v2; 

  v0 = marscr_string_t;
  marscr_string_t = &marSpawnerField->key;
  result = Mark_scr_string_t();
  if ( result )
  {
    marscr_string_t = &marSpawnerField->value;
    v2 = Mark_scr_string_t();
    marscr_string_t = v0;
    return v2 != 0;
  }
  else
  {
    marscr_string_t = v0;
  }
  return result;
}

/*
==============
Mark_SpawnerFieldArray
==============
*/
__int64 Mark_SpawnerFieldArray(const unsigned __int64 count)
{
  SpawnerField *v1; 
  __int64 v2; 
  scr_string_t *v4; 

  v1 = marSpawnerField;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marscr_string_t;
  while ( 1 )
  {
    marSpawnerField = v1;
    marscr_string_t = &v1->key;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marSpawnerField->value;
    if ( !Mark_scr_string_t() )
      break;
    ++v1;
    marscr_string_t = v4;
    if ( ++v2 >= count )
      return 1i64;
  }
  marscr_string_t = v4;
  return 0i64;
}

/*
==============
Mark_SpawnerList
==============
*/
__int64 Mark_SpawnerList()
{
  Spawner *spanwerList; 
  Spawner *v1; 
  __int64 v2; 
  unsigned __int64 spawnerCount; 
  scr_string_t *v4; 
  Spawner *v5; 
  SpawnerField *fields; 
  SpawnerField *v7; 
  __int64 v8; 
  unsigned __int64 numFields; 
  int v10; 
  Spawner *v12; 

  spanwerList = marSpawnerList->spanwerList;
  if ( !spanwerList )
    return 1i64;
  v1 = marSpawner;
  v2 = 0i64;
  marSpawner = marSpawnerList->spanwerList;
  spawnerCount = marSpawnerList->spawnerCount;
  v12 = v1;
  if ( !marSpawnerList->spawnerCount )
  {
LABEL_15:
    marSpawner = v1;
    return 1i64;
  }
  v4 = marscr_string_t;
  while ( 1 )
  {
    v5 = spanwerList;
    marSpawner = spanwerList;
    fields = spanwerList->fields;
    if ( !fields )
      goto LABEL_11;
    v7 = marSpawnerField;
    v8 = 0i64;
    marSpawnerField = spanwerList->fields;
    numFields = spanwerList->numFields;
    if ( spanwerList->numFields )
      break;
LABEL_10:
    marSpawnerField = v7;
LABEL_11:
    marscr_string_t = &v5->targetname;
    if ( !Mark_scr_string_t() )
      goto LABEL_18;
    marscr_string_t = &marSpawner->classname;
    v10 = Mark_scr_string_t();
    marscr_string_t = v4;
    if ( !v10 )
      goto LABEL_19;
    ++spanwerList;
    if ( ++v2 >= spawnerCount )
    {
      v1 = v12;
      goto LABEL_15;
    }
  }
  while ( 1 )
  {
    marSpawnerField = fields;
    marscr_string_t = &fields->key;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marSpawnerField->value;
    if ( !Mark_scr_string_t() )
      break;
    ++fields;
    if ( ++v8 >= numFields )
    {
      v5 = marSpawner;
      goto LABEL_10;
    }
  }
  marSpawnerField = v7;
LABEL_18:
  marscr_string_t = v4;
LABEL_19:
  marSpawner = v12;
  return 0i64;
}

/*
==============
Mark_SpawnerListArray
==============
*/
__int64 Mark_SpawnerListArray(const unsigned __int64 count)
{
  SpawnerList *v1; 
  unsigned __int64 v2; 
  unsigned __int64 v3; 
  Spawner *v4; 
  scr_string_t *v5; 
  Spawner *spanwerList; 
  __int64 v7; 
  unsigned __int64 spawnerCount; 
  Spawner *v9; 
  SpawnerField *fields; 
  SpawnerField *v11; 
  __int64 v12; 
  unsigned __int64 numFields; 
  int v14; 
  SpawnerList *v17; 
  unsigned __int64 v18; 
  Spawner *v19; 

  v1 = marSpawnerList;
  v2 = count;
  v3 = 0i64;
  v17 = marSpawnerList;
  v18 = 0i64;
  if ( !v2 )
    return 1i64;
  v4 = marSpawner;
  v5 = marscr_string_t;
  while ( 1 )
  {
    marSpawnerList = v1;
    spanwerList = v1->spanwerList;
    if ( spanwerList )
      break;
LABEL_17:
    ++v1;
    ++v3;
    v17 = v1;
    v18 = v3;
    if ( v3 >= v2 )
      return 1i64;
  }
  marSpawner = v1->spanwerList;
  v7 = 0i64;
  spawnerCount = v1->spawnerCount;
  v19 = v4;
  if ( !v1->spawnerCount )
  {
LABEL_16:
    marSpawner = v4;
    goto LABEL_17;
  }
  while ( 1 )
  {
    v9 = spanwerList;
    marSpawner = spanwerList;
    fields = spanwerList->fields;
    if ( !fields )
      goto LABEL_12;
    v11 = marSpawnerField;
    v12 = 0i64;
    marSpawnerField = spanwerList->fields;
    numFields = spanwerList->numFields;
    if ( spanwerList->numFields )
      break;
LABEL_11:
    marSpawnerField = v11;
LABEL_12:
    marscr_string_t = &v9->targetname;
    if ( !Mark_scr_string_t() )
      goto LABEL_20;
    marscr_string_t = &marSpawner->classname;
    v14 = Mark_scr_string_t();
    marscr_string_t = v5;
    if ( !v14 )
      goto LABEL_21;
    ++spanwerList;
    if ( ++v7 >= spawnerCount )
    {
      v1 = v17;
      v3 = v18;
      v4 = v19;
      v2 = count;
      goto LABEL_16;
    }
  }
  while ( 1 )
  {
    marSpawnerField = fields;
    marscr_string_t = &fields->key;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marSpawnerField->value;
    if ( !Mark_scr_string_t() )
      break;
    ++fields;
    if ( ++v12 >= numFields )
    {
      v9 = marSpawner;
      goto LABEL_11;
    }
  }
  marSpawnerField = v11;
LABEL_20:
  marscr_string_t = v5;
LABEL_21:
  marSpawner = v19;
  return 0i64;
}

/*
==============
Mark_SplinePointEntityRecord
==============
*/
_BOOL8 Mark_SplinePointEntityRecord()
{
  scr_string_t *v0; 
  int v1; 
  _BOOL8 result; 

  v0 = marscr_string_t;
  marscr_string_t = &marSplinePointEntityRecord->splineNodeLabel;
  if ( Mark_scr_string_t() && (marscr_string_t = &marSplinePointEntityRecord->targetname, Mark_scr_string_t()) && (marscr_string_t = &marSplinePointEntityRecord->target, Mark_scr_string_t()) )
  {
    marscr_string_t = &marSplinePointEntityRecord->string;
    v1 = Mark_scr_string_t();
    marscr_string_t = v0;
    return v1 != 0;
  }
  else
  {
    result = 0i64;
    marscr_string_t = v0;
  }
  return result;
}

/*
==============
Mark_SplinePointEntityRecordArray
==============
*/
__int64 Mark_SplinePointEntityRecordArray(const unsigned __int64 count)
{
  SplinePointEntityRecord *v1; 
  __int64 v2; 
  scr_string_t *v4; 

  v1 = marSplinePointEntityRecord;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marscr_string_t;
  while ( 1 )
  {
    marSplinePointEntityRecord = v1;
    marscr_string_t = &v1->splineNodeLabel;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marSplinePointEntityRecord->targetname;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marSplinePointEntityRecord->target;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marSplinePointEntityRecord->string;
    if ( !Mark_scr_string_t() )
      break;
    ++v1;
    marscr_string_t = v4;
    if ( ++v2 >= count )
      return 1i64;
  }
  marscr_string_t = v4;
  return 0i64;
}

/*
==============
Mark_SplinePointRecordList
==============
*/
__int64 Mark_SplinePointRecordList()
{
  SplinePointEntityRecord *splinePoints; 
  SplinePointEntityRecord *v1; 
  __int64 v2; 
  unsigned __int64 splinePointCount; 
  scr_string_t *v4; 
  __int64 result; 

  splinePoints = marSplinePointRecordList->splinePoints;
  if ( !splinePoints )
    return 1i64;
  v1 = marSplinePointEntityRecord;
  v2 = 0i64;
  marSplinePointEntityRecord = marSplinePointRecordList->splinePoints;
  splinePointCount = marSplinePointRecordList->splinePointCount;
  if ( !marSplinePointRecordList->splinePointCount )
  {
LABEL_9:
    marSplinePointEntityRecord = v1;
    return 1i64;
  }
  v4 = marscr_string_t;
  while ( 1 )
  {
    marSplinePointEntityRecord = splinePoints;
    marscr_string_t = &splinePoints->splineNodeLabel;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marSplinePointEntityRecord->targetname;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marSplinePointEntityRecord->target;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marSplinePointEntityRecord->string;
    if ( !Mark_scr_string_t() )
      break;
    ++splinePoints;
    marscr_string_t = v4;
    if ( ++v2 >= splinePointCount )
      goto LABEL_9;
  }
  marscr_string_t = v4;
  result = 0i64;
  marSplinePointEntityRecord = v1;
  return result;
}

/*
==============
Mark_SplinePointRecordListArray
==============
*/
__int64 Mark_SplinePointRecordListArray(const unsigned __int64 count)
{
  SplinePointRecordList *v1; 
  __int64 v2; 
  SplinePointEntityRecord *v4; 
  scr_string_t *v5; 
  SplinePointEntityRecord *splinePoints; 
  __int64 v7; 
  unsigned __int64 splinePointCount; 
  __int64 result; 

  v1 = marSplinePointRecordList;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marSplinePointEntityRecord;
  v5 = marscr_string_t;
  while ( 1 )
  {
    marSplinePointRecordList = v1;
    splinePoints = v1->splinePoints;
    if ( splinePoints )
      break;
LABEL_11:
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  marSplinePointEntityRecord = v1->splinePoints;
  v7 = 0i64;
  splinePointCount = v1->splinePointCount;
  if ( !v1->splinePointCount )
  {
LABEL_10:
    marSplinePointEntityRecord = v4;
    goto LABEL_11;
  }
  while ( 1 )
  {
    marSplinePointEntityRecord = splinePoints;
    marscr_string_t = &splinePoints->splineNodeLabel;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marSplinePointEntityRecord->targetname;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marSplinePointEntityRecord->target;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marSplinePointEntityRecord->string;
    if ( !Mark_scr_string_t() )
      break;
    ++splinePoints;
    marscr_string_t = v5;
    if ( ++v7 >= splinePointCount )
      goto LABEL_10;
  }
  marscr_string_t = v5;
  result = 0i64;
  marSplinePointEntityRecord = v4;
  return result;
}

/*
==============
Mark_SplineRecordList
==============
*/
__int64 Mark_SplineRecordList()
{
  SplinePointRecordList *splines; 
  SplinePointRecordList *v1; 
  __int64 v2; 
  unsigned __int64 splineCount; 
  SplinePointEntityRecord *v4; 
  scr_string_t *v5; 
  SplinePointEntityRecord *splinePoints; 
  __int64 v7; 
  unsigned __int64 splinePointCount; 
  __int64 result; 
  SplinePointRecordList *v10; 

  splines = marSplineRecordList->splines;
  if ( !splines )
    return 1i64;
  v1 = marSplinePointRecordList;
  v2 = 0i64;
  marSplinePointRecordList = marSplineRecordList->splines;
  splineCount = marSplineRecordList->splineCount;
  v10 = v1;
  if ( !marSplineRecordList->splineCount )
  {
LABEL_14:
    marSplinePointRecordList = v1;
    return 1i64;
  }
  v4 = marSplinePointEntityRecord;
  v5 = marscr_string_t;
  while ( 1 )
  {
    marSplinePointRecordList = splines;
    splinePoints = splines->splinePoints;
    if ( splinePoints )
      break;
LABEL_12:
    ++splines;
    if ( ++v2 >= splineCount )
    {
      v1 = v10;
      goto LABEL_14;
    }
  }
  marSplinePointEntityRecord = splines->splinePoints;
  v7 = 0i64;
  splinePointCount = splines->splinePointCount;
  if ( !splines->splinePointCount )
  {
LABEL_11:
    marSplinePointEntityRecord = v4;
    goto LABEL_12;
  }
  while ( 1 )
  {
    marSplinePointEntityRecord = splinePoints;
    marscr_string_t = &splinePoints->splineNodeLabel;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marSplinePointEntityRecord->targetname;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marSplinePointEntityRecord->target;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marSplinePointEntityRecord->string;
    if ( !Mark_scr_string_t() )
      break;
    ++splinePoints;
    marscr_string_t = v5;
    if ( ++v7 >= splinePointCount )
      goto LABEL_11;
  }
  marSplinePointRecordList = v10;
  result = 0i64;
  marscr_string_t = v5;
  marSplinePointEntityRecord = v4;
  return result;
}

/*
==============
Mark_SplineRecordListArray
==============
*/
__int64 Mark_SplineRecordListArray(const unsigned __int64 count)
{
  SplineRecordList *v1; 
  unsigned __int64 v2; 
  unsigned __int64 v3; 
  SplinePointRecordList *v4; 
  SplinePointEntityRecord *v5; 
  scr_string_t *v6; 
  SplinePointRecordList *splines; 
  __int64 v8; 
  unsigned __int64 splineCount; 
  SplinePointEntityRecord *splinePoints; 
  __int64 v11; 
  unsigned __int64 splinePointCount; 
  __int64 result; 
  SplineRecordList *v15; 
  unsigned __int64 v16; 
  SplinePointRecordList *v17; 

  v1 = marSplineRecordList;
  v2 = count;
  v3 = 0i64;
  v15 = marSplineRecordList;
  v16 = 0i64;
  if ( !v2 )
    return 1i64;
  v4 = marSplinePointRecordList;
  v5 = marSplinePointEntityRecord;
  v6 = marscr_string_t;
  while ( 1 )
  {
    marSplineRecordList = v1;
    splines = v1->splines;
    if ( splines )
      break;
LABEL_16:
    ++v1;
    ++v3;
    v15 = v1;
    v16 = v3;
    if ( v3 >= v2 )
      return 1i64;
  }
  marSplinePointRecordList = v1->splines;
  v8 = 0i64;
  splineCount = v1->splineCount;
  v17 = v4;
  if ( !v1->splineCount )
  {
LABEL_15:
    marSplinePointRecordList = v4;
    goto LABEL_16;
  }
  while ( 1 )
  {
    marSplinePointRecordList = splines;
    splinePoints = splines->splinePoints;
    if ( splinePoints )
      break;
LABEL_13:
    ++splines;
    if ( ++v8 >= splineCount )
    {
      v1 = v15;
      v3 = v16;
      v4 = v17;
      v2 = count;
      goto LABEL_15;
    }
  }
  marSplinePointEntityRecord = splines->splinePoints;
  v11 = 0i64;
  splinePointCount = splines->splinePointCount;
  if ( !splines->splinePointCount )
  {
LABEL_12:
    marSplinePointEntityRecord = v5;
    goto LABEL_13;
  }
  while ( 1 )
  {
    marSplinePointEntityRecord = splinePoints;
    marscr_string_t = &splinePoints->splineNodeLabel;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marSplinePointEntityRecord->targetname;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marSplinePointEntityRecord->target;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marSplinePointEntityRecord->string;
    if ( !Mark_scr_string_t() )
      break;
    ++splinePoints;
    marscr_string_t = v6;
    if ( ++v11 >= splinePointCount )
      goto LABEL_12;
  }
  marSplinePointRecordList = v17;
  result = 0i64;
  marscr_string_t = v6;
  marSplinePointEntityRecord = v5;
  return result;
}

/*
==============
Mark_StaticModelCollisionCompressedInstance
==============
*/
__int64 Mark_StaticModelCollisionCompressedInstance()
{
  return 1i64;
}

/*
==============
Mark_StaticModelCollisionCompressedInstanceArray
==============
*/
__int64 Mark_StaticModelCollisionCompressedInstanceArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_StaticModelCollisionCompressedModel
==============
*/
_BOOL8 Mark_StaticModelCollisionCompressedModel()
{
  scr_string_t *v0; 
  int v1; 
  PhysicsAsset **v2; 
  int v3; 
  XModelDetailCollision **v4; 
  int v5; 

  v0 = marscr_string_t;
  marscr_string_t = &marStaticModelCollisionCompressedModel->name;
  v1 = Mark_scr_string_t();
  marscr_string_t = v0;
  if ( !v1 )
    return 0i64;
  v2 = marPhysicsAssetPtr;
  marPhysicsAssetPtr = &marStaticModelCollisionCompressedModel->physicsAsset;
  v3 = Mark_PhysicsAssetPtr();
  marPhysicsAssetPtr = v2;
  if ( !v3 )
    return 0i64;
  v4 = marXModelDetailCollisionPtr;
  marXModelDetailCollisionPtr = &marStaticModelCollisionCompressedModel->detailCollision;
  v5 = Mark_XModelDetailCollisionPtr();
  marXModelDetailCollisionPtr = v4;
  return v5 != 0;
}

/*
==============
Mark_StaticModelCollisionCompressedModelArray
==============
*/
__int64 Mark_StaticModelCollisionCompressedModelArray(const unsigned __int64 count)
{
  StaticModelCollisionCompressedModel *v1; 
  __int64 v2; 
  scr_string_t *v4; 
  int v5; 
  PhysicsAsset **v6; 
  int v7; 
  XModelDetailCollision **v8; 
  int v9; 

  v1 = marStaticModelCollisionCompressedModel;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  while ( 1 )
  {
    v4 = marscr_string_t;
    marscr_string_t = &v1->name;
    marStaticModelCollisionCompressedModel = v1;
    v5 = Mark_scr_string_t();
    marscr_string_t = v4;
    if ( !v5 )
      break;
    v6 = marPhysicsAssetPtr;
    marPhysicsAssetPtr = &marStaticModelCollisionCompressedModel->physicsAsset;
    v7 = Mark_PhysicsAssetPtr();
    marPhysicsAssetPtr = v6;
    if ( !v7 )
      break;
    v8 = marXModelDetailCollisionPtr;
    marXModelDetailCollisionPtr = &marStaticModelCollisionCompressedModel->detailCollision;
    v9 = Mark_XModelDetailCollisionPtr();
    marXModelDetailCollisionPtr = v8;
    if ( !v9 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_StaticModelCollisionCompressedModelList
==============
*/
__int64 Mark_StaticModelCollisionCompressedModelList()
{
  StaticModelCollisionCompressedModel *models; 
  StaticModelCollisionCompressedModel *v1; 
  __int64 v2; 
  unsigned __int64 numModels; 
  scr_string_t *v4; 
  int v5; 
  PhysicsAsset **v6; 
  int v7; 
  XModelDetailCollision **v8; 
  int v9; 

  models = marStaticModelCollisionCompressedModelList->models;
  if ( !models )
    return 1i64;
  v1 = marStaticModelCollisionCompressedModel;
  v2 = 0i64;
  marStaticModelCollisionCompressedModel = marStaticModelCollisionCompressedModelList->models;
  numModels = marStaticModelCollisionCompressedModelList->numModels;
  if ( !marStaticModelCollisionCompressedModelList->numModels )
  {
LABEL_7:
    marStaticModelCollisionCompressedModel = v1;
    return 1i64;
  }
  while ( 1 )
  {
    v4 = marscr_string_t;
    marscr_string_t = &models->name;
    marStaticModelCollisionCompressedModel = models;
    v5 = Mark_scr_string_t();
    marscr_string_t = v4;
    if ( !v5 )
      break;
    v6 = marPhysicsAssetPtr;
    marPhysicsAssetPtr = &marStaticModelCollisionCompressedModel->physicsAsset;
    v7 = Mark_PhysicsAssetPtr();
    marPhysicsAssetPtr = v6;
    if ( !v7 )
      break;
    v8 = marXModelDetailCollisionPtr;
    marXModelDetailCollisionPtr = &marStaticModelCollisionCompressedModel->detailCollision;
    v9 = Mark_XModelDetailCollisionPtr();
    marXModelDetailCollisionPtr = v8;
    if ( !v9 )
      break;
    ++models;
    if ( ++v2 >= numModels )
      goto LABEL_7;
  }
  marStaticModelCollisionCompressedModel = v1;
  return 0i64;
}

/*
==============
Mark_StaticModelCollisionCompressedModelListArray
==============
*/
__int64 Mark_StaticModelCollisionCompressedModelListArray(const unsigned __int64 count)
{
  StaticModelCollisionCompressedModelList *v1; 
  __int64 v2; 
  StaticModelCollisionCompressedModel *v4; 
  StaticModelCollisionCompressedModel *models; 
  __int64 v6; 
  unsigned __int64 numModels; 
  scr_string_t *v8; 
  int v9; 
  PhysicsAsset **v10; 
  int v11; 
  XModelDetailCollision **v12; 
  int v13; 

  v1 = marStaticModelCollisionCompressedModelList;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marStaticModelCollisionCompressedModel;
  while ( 1 )
  {
    marStaticModelCollisionCompressedModelList = v1;
    models = v1->models;
    if ( models )
      break;
LABEL_10:
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  marStaticModelCollisionCompressedModel = v1->models;
  v6 = 0i64;
  numModels = v1->numModels;
  if ( !v1->numModels )
  {
LABEL_9:
    marStaticModelCollisionCompressedModel = v4;
    goto LABEL_10;
  }
  while ( 1 )
  {
    v8 = marscr_string_t;
    marscr_string_t = &models->name;
    marStaticModelCollisionCompressedModel = models;
    v9 = Mark_scr_string_t();
    marscr_string_t = v8;
    if ( !v9 )
      break;
    v10 = marPhysicsAssetPtr;
    marPhysicsAssetPtr = &marStaticModelCollisionCompressedModel->physicsAsset;
    v11 = Mark_PhysicsAssetPtr();
    marPhysicsAssetPtr = v10;
    if ( !v11 )
      break;
    v12 = marXModelDetailCollisionPtr;
    marXModelDetailCollisionPtr = &marStaticModelCollisionCompressedModel->detailCollision;
    v13 = Mark_XModelDetailCollisionPtr();
    marXModelDetailCollisionPtr = v12;
    if ( !v13 )
      break;
    ++models;
    if ( ++v6 >= numModels )
      goto LABEL_9;
  }
  marStaticModelCollisionCompressedModel = v4;
  return 0i64;
}

/*
==============
Mark_StaticModelCollisionInstance
==============
*/
__int64 Mark_StaticModelCollisionInstance()
{
  return 1i64;
}

/*
==============
Mark_StaticModelCollisionInstanceArray
==============
*/
__int64 Mark_StaticModelCollisionInstanceArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_StaticModelCollisionModel
==============
*/
_BOOL8 Mark_StaticModelCollisionModel()
{
  scr_string_t *v0; 
  int v1; 
  PhysicsAsset **v2; 
  int v3; 
  XModelDetailCollision **v4; 
  int v5; 

  v0 = marscr_string_t;
  marscr_string_t = &marStaticModelCollisionModel->name;
  v1 = Mark_scr_string_t();
  marscr_string_t = v0;
  if ( !v1 )
    return 0i64;
  v2 = marPhysicsAssetPtr;
  marPhysicsAssetPtr = &marStaticModelCollisionModel->physicsAsset;
  v3 = Mark_PhysicsAssetPtr();
  marPhysicsAssetPtr = v2;
  if ( !v3 )
    return 0i64;
  v4 = marXModelDetailCollisionPtr;
  marXModelDetailCollisionPtr = &marStaticModelCollisionModel->detailCollision;
  v5 = Mark_XModelDetailCollisionPtr();
  marXModelDetailCollisionPtr = v4;
  return v5 != 0;
}

/*
==============
Mark_StaticModelCollisionModelArray
==============
*/
__int64 Mark_StaticModelCollisionModelArray(const unsigned __int64 count)
{
  StaticModelCollisionModel *v1; 
  __int64 v2; 
  scr_string_t *v4; 
  int v5; 
  PhysicsAsset **v6; 
  int v7; 
  XModelDetailCollision **v8; 
  int v9; 

  v1 = marStaticModelCollisionModel;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  while ( 1 )
  {
    v4 = marscr_string_t;
    marscr_string_t = &v1->name;
    marStaticModelCollisionModel = v1;
    v5 = Mark_scr_string_t();
    marscr_string_t = v4;
    if ( !v5 )
      break;
    v6 = marPhysicsAssetPtr;
    marPhysicsAssetPtr = &marStaticModelCollisionModel->physicsAsset;
    v7 = Mark_PhysicsAssetPtr();
    marPhysicsAssetPtr = v6;
    if ( !v7 )
      break;
    v8 = marXModelDetailCollisionPtr;
    marXModelDetailCollisionPtr = &marStaticModelCollisionModel->detailCollision;
    v9 = Mark_XModelDetailCollisionPtr();
    marXModelDetailCollisionPtr = v8;
    if ( !v9 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_StaticModelCollisionModelList
==============
*/
__int64 Mark_StaticModelCollisionModelList()
{
  StaticModelCollisionModel *models; 
  StaticModelCollisionModel *v1; 
  __int64 v2; 
  unsigned __int64 numModels; 
  scr_string_t *v4; 
  int v5; 
  PhysicsAsset **v6; 
  int v7; 
  XModelDetailCollision **v8; 
  int v9; 

  models = marStaticModelCollisionModelList->models;
  if ( !models )
    return 1i64;
  v1 = marStaticModelCollisionModel;
  v2 = 0i64;
  marStaticModelCollisionModel = marStaticModelCollisionModelList->models;
  numModels = marStaticModelCollisionModelList->numModels;
  if ( !marStaticModelCollisionModelList->numModels )
  {
LABEL_7:
    marStaticModelCollisionModel = v1;
    return 1i64;
  }
  while ( 1 )
  {
    v4 = marscr_string_t;
    marscr_string_t = &models->name;
    marStaticModelCollisionModel = models;
    v5 = Mark_scr_string_t();
    marscr_string_t = v4;
    if ( !v5 )
      break;
    v6 = marPhysicsAssetPtr;
    marPhysicsAssetPtr = &marStaticModelCollisionModel->physicsAsset;
    v7 = Mark_PhysicsAssetPtr();
    marPhysicsAssetPtr = v6;
    if ( !v7 )
      break;
    v8 = marXModelDetailCollisionPtr;
    marXModelDetailCollisionPtr = &marStaticModelCollisionModel->detailCollision;
    v9 = Mark_XModelDetailCollisionPtr();
    marXModelDetailCollisionPtr = v8;
    if ( !v9 )
      break;
    ++models;
    if ( ++v2 >= numModels )
      goto LABEL_7;
  }
  marStaticModelCollisionModel = v1;
  return 0i64;
}

/*
==============
Mark_StaticModelCollisionModelListArray
==============
*/
__int64 Mark_StaticModelCollisionModelListArray(const unsigned __int64 count)
{
  StaticModelCollisionModelList *v1; 
  __int64 v2; 
  StaticModelCollisionModel *v4; 
  StaticModelCollisionModel *models; 
  __int64 v6; 
  unsigned __int64 numModels; 
  scr_string_t *v8; 
  int v9; 
  PhysicsAsset **v10; 
  int v11; 
  XModelDetailCollision **v12; 
  int v13; 

  v1 = marStaticModelCollisionModelList;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marStaticModelCollisionModel;
  while ( 1 )
  {
    marStaticModelCollisionModelList = v1;
    models = v1->models;
    if ( models )
      break;
LABEL_10:
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  marStaticModelCollisionModel = v1->models;
  v6 = 0i64;
  numModels = v1->numModels;
  if ( !v1->numModels )
  {
LABEL_9:
    marStaticModelCollisionModel = v4;
    goto LABEL_10;
  }
  while ( 1 )
  {
    v8 = marscr_string_t;
    marscr_string_t = &models->name;
    marStaticModelCollisionModel = models;
    v9 = Mark_scr_string_t();
    marscr_string_t = v8;
    if ( !v9 )
      break;
    v10 = marPhysicsAssetPtr;
    marPhysicsAssetPtr = &marStaticModelCollisionModel->physicsAsset;
    v11 = Mark_PhysicsAssetPtr();
    marPhysicsAssetPtr = v10;
    if ( !v11 )
      break;
    v12 = marXModelDetailCollisionPtr;
    marXModelDetailCollisionPtr = &marStaticModelCollisionModel->detailCollision;
    v13 = Mark_XModelDetailCollisionPtr();
    marXModelDetailCollisionPtr = v12;
    if ( !v13 )
      break;
    ++models;
    if ( ++v6 >= numModels )
      goto LABEL_9;
  }
  marStaticModelCollisionModel = v4;
  return 0i64;
}

/*
==============
Mark_TriggerHull
==============
*/
__int64 Mark_TriggerHull()
{
  return 1i64;
}

/*
==============
Mark_TriggerHullArray
==============
*/
__int64 Mark_TriggerHullArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_TriggerModel
==============
*/
_BOOL8 Mark_TriggerModel()
{
  PhysicsAsset **v0; 
  int v1; 

  v0 = marPhysicsAssetPtr;
  marPhysicsAssetPtr = &marTriggerModel->physicsAsset;
  v1 = Mark_PhysicsAssetPtr();
  marPhysicsAssetPtr = v0;
  return v1 != 0;
}

/*
==============
Mark_TriggerModelArray
==============
*/
__int64 Mark_TriggerModelArray(const unsigned __int64 count)
{
  TriggerModel *v1; 
  __int64 v2; 
  PhysicsAsset **v4; 
  int v5; 

  v1 = marTriggerModel;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marPhysicsAssetPtr;
  while ( 1 )
  {
    marTriggerModel = v1;
    marPhysicsAssetPtr = &v1->physicsAsset;
    v5 = Mark_PhysicsAssetPtr();
    marPhysicsAssetPtr = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_TriggerSlab
==============
*/
__int64 Mark_TriggerSlab()
{
  return 1i64;
}

/*
==============
Mark_TriggerSlabArray
==============
*/
__int64 Mark_TriggerSlabArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_TriggerWinding
==============
*/
__int64 Mark_TriggerWinding()
{
  return 1i64;
}

/*
==============
Mark_TriggerWindingArray
==============
*/
__int64 Mark_TriggerWindingArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_TriggerWindingPoint
==============
*/
__int64 Mark_TriggerWindingPoint()
{
  return 1i64;
}

/*
==============
Mark_TriggerWindingPointArray
==============
*/
__int64 Mark_TriggerWindingPointArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_VariableType
==============
*/
__int64 Mark_VariableType()
{
  return 1i64;
}

/*
==============
Mark_VariableTypeArray
==============
*/
__int64 Mark_VariableTypeArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_alignHavokShapeData_t
==============
*/
__int64 Mark_alignHavokShapeData_t()
{
  return 1i64;
}

/*
==============
Mark_alignHavokShapeData_tArray
==============
*/
__int64 Mark_alignHavokShapeData_tArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_clipMap_ptr
==============
*/
__int64 Mark_clipMap_ptr()
{
  clipMap_t *v0; 
  clipMap_t *v1; 
  int v3; 

  v0 = *marclipMap_ptr;
  if ( *marclipMap_ptr )
  {
    v1 = marclipMap_t;
    marclipMap_t = *marclipMap_ptr;
    if ( Mark_ClipMapAsset(v0, 0) )
    {
      marclipMap_t = v1;
      return 1i64;
    }
    if ( !Mark_clipMap_t() )
    {
      marclipMap_t = v1;
      return 0i64;
    }
    v3 = Mark_ClipMapAsset(marclipMap_t, 1);
    marclipMap_t = v1;
    if ( !v3 )
      return 0i64;
  }
  return 1i64;
}

/*
==============
Mark_clipMap_ptrArray
==============
*/
__int64 Mark_clipMap_ptrArray(const unsigned __int64 count)
{
  clipMap_t **v1; 
  __int64 v2; 
  clipMap_t *v4; 
  clipMap_t *v5; 
  int v6; 

  v1 = marclipMap_ptr;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marclipMap_t;
  while ( 1 )
  {
    marclipMap_ptr = v1;
    v5 = *v1;
    if ( !*v1 )
      goto LABEL_8;
    marclipMap_t = *v1;
    if ( Mark_ClipMapAsset(v5, 0) )
    {
      marclipMap_t = v4;
      goto LABEL_8;
    }
    if ( !Mark_clipMap_t() )
      break;
    v6 = Mark_ClipMapAsset(marclipMap_t, 1);
    marclipMap_t = v4;
    if ( !v6 )
      return 0i64;
LABEL_8:
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  marclipMap_t = v4;
  return 0i64;
}

/*
==============
Mark_clipMap_t
==============
*/
_BOOL8 Mark_clipMap_t()
{
  clipMap_t *v0; 
  StaticModelCollisionModelList *staticModelCollisionModelLists; 
  StaticModelCollisionModelList *v2; 
  __int64 v3; 
  unsigned __int64 numStaticModelCollisionModelLists; 
  StaticModelCollisionModel *v5; 
  StaticModelCollisionModel *models; 
  __int64 v7; 
  unsigned __int64 numModels; 
  scr_string_t *v9; 
  int v10; 
  PhysicsAsset **v11; 
  int v12; 
  XModelDetailCollision **v13; 
  int v14; 
  MapEnts **v15; 
  int v16; 
  MapTriggers *v17; 
  int v18; 
  StaticModelCollisionModelList *v20; 

  v0 = marclipMap_t;
  staticModelCollisionModelLists = marclipMap_t->staticModelCollisionModelLists;
  if ( staticModelCollisionModelLists )
  {
    v2 = marStaticModelCollisionModelList;
    v3 = 0i64;
    marStaticModelCollisionModelList = marclipMap_t->staticModelCollisionModelLists;
    numStaticModelCollisionModelLists = marclipMap_t->numStaticModelCollisionModelLists;
    v20 = v2;
    if ( marclipMap_t->numStaticModelCollisionModelLists )
    {
      v5 = marStaticModelCollisionModel;
      while ( 1 )
      {
        marStaticModelCollisionModelList = staticModelCollisionModelLists;
        models = staticModelCollisionModelLists->models;
        if ( models )
        {
          marStaticModelCollisionModel = staticModelCollisionModelLists->models;
          v7 = 0i64;
          numModels = staticModelCollisionModelLists->numModels;
          if ( staticModelCollisionModelLists->numModels )
          {
            while ( 1 )
            {
              v9 = marscr_string_t;
              marscr_string_t = &models->name;
              marStaticModelCollisionModel = models;
              v10 = Mark_scr_string_t();
              marscr_string_t = v9;
              if ( !v10 )
                break;
              v11 = marPhysicsAssetPtr;
              marPhysicsAssetPtr = &marStaticModelCollisionModel->physicsAsset;
              v12 = Mark_PhysicsAssetPtr();
              marPhysicsAssetPtr = v11;
              if ( !v12 )
                break;
              v13 = marXModelDetailCollisionPtr;
              marXModelDetailCollisionPtr = &marStaticModelCollisionModel->detailCollision;
              v14 = Mark_XModelDetailCollisionPtr();
              marXModelDetailCollisionPtr = v13;
              if ( !v14 )
                break;
              ++models;
              if ( ++v7 >= numModels )
                goto LABEL_10;
            }
            marStaticModelCollisionModelList = v20;
            marStaticModelCollisionModel = v5;
            return 0i64;
          }
LABEL_10:
          marStaticModelCollisionModel = v5;
        }
        ++staticModelCollisionModelLists;
        if ( ++v3 >= numStaticModelCollisionModelLists )
        {
          v0 = marclipMap_t;
          v2 = v20;
          break;
        }
      }
    }
    marStaticModelCollisionModelList = v2;
  }
  v15 = marMapEntsPtr;
  marMapEntsPtr = &v0->mapEnts;
  v16 = Mark_MapEntsPtr();
  marMapEntsPtr = v15;
  if ( !v16 )
    return 0i64;
  v17 = marMapTriggers;
  marMapTriggers = &marclipMap_t->stageTrigger;
  v18 = Mark_MapTriggers();
  marMapTriggers = v17;
  return v18 != 0;
}

/*
==============
Mark_clipMap_tArray
==============
*/
__int64 Mark_clipMap_tArray(const unsigned __int64 count)
{
  clipMap_t *v1; 
  unsigned __int64 v2; 
  unsigned __int64 v3; 
  clipMap_t *v4; 
  StaticModelCollisionModelList *staticModelCollisionModelLists; 
  StaticModelCollisionModelList *v6; 
  __int64 v7; 
  unsigned __int64 numStaticModelCollisionModelLists; 
  StaticModelCollisionModel *v9; 
  StaticModelCollisionModel *models; 
  __int64 v11; 
  unsigned __int64 numModels; 
  scr_string_t *v13; 
  int v14; 
  PhysicsAsset **v15; 
  int v16; 
  XModelDetailCollision **v17; 
  int v18; 
  MapEnts **v19; 
  int v20; 
  MapTriggers *v21; 
  int v22; 
  clipMap_t *v25; 
  unsigned __int64 v26; 
  StaticModelCollisionModelList *v27; 

  v1 = marclipMap_t;
  v2 = 0i64;
  v25 = marclipMap_t;
  v3 = count;
  v26 = 0i64;
  if ( !count )
    return 1i64;
  while ( 1 )
  {
    v4 = v1;
    marclipMap_t = v1;
    staticModelCollisionModelLists = v1->staticModelCollisionModelLists;
    if ( !staticModelCollisionModelLists )
      goto LABEL_15;
    v6 = marStaticModelCollisionModelList;
    v7 = 0i64;
    marStaticModelCollisionModelList = v1->staticModelCollisionModelLists;
    numStaticModelCollisionModelLists = v1->numStaticModelCollisionModelLists;
    v27 = v6;
    if ( v1->numStaticModelCollisionModelLists )
      break;
LABEL_14:
    marStaticModelCollisionModelList = v6;
LABEL_15:
    v19 = marMapEntsPtr;
    marMapEntsPtr = &v4->mapEnts;
    v20 = Mark_MapEntsPtr();
    marMapEntsPtr = v19;
    if ( !v20 )
      return 0i64;
    v21 = marMapTriggers;
    marMapTriggers = &marclipMap_t->stageTrigger;
    v22 = Mark_MapTriggers();
    marMapTriggers = v21;
    if ( !v22 )
      return 0i64;
    ++v1;
    ++v2;
    v25 = v1;
    v26 = v2;
    if ( v2 >= v3 )
      return 1i64;
  }
  v9 = marStaticModelCollisionModel;
  while ( 1 )
  {
    marStaticModelCollisionModelList = staticModelCollisionModelLists;
    models = staticModelCollisionModelLists->models;
    if ( models )
      break;
LABEL_12:
    ++staticModelCollisionModelLists;
    if ( ++v7 >= numStaticModelCollisionModelLists )
    {
      v4 = marclipMap_t;
      v1 = v25;
      v2 = v26;
      v6 = v27;
      v3 = count;
      goto LABEL_14;
    }
  }
  marStaticModelCollisionModel = staticModelCollisionModelLists->models;
  v11 = 0i64;
  numModels = staticModelCollisionModelLists->numModels;
  if ( !staticModelCollisionModelLists->numModels )
  {
LABEL_11:
    marStaticModelCollisionModel = v9;
    goto LABEL_12;
  }
  while ( 1 )
  {
    v13 = marscr_string_t;
    marscr_string_t = &models->name;
    marStaticModelCollisionModel = models;
    v14 = Mark_scr_string_t();
    marscr_string_t = v13;
    if ( !v14 )
      break;
    v15 = marPhysicsAssetPtr;
    marPhysicsAssetPtr = &marStaticModelCollisionModel->physicsAsset;
    v16 = Mark_PhysicsAssetPtr();
    marPhysicsAssetPtr = v15;
    if ( !v16 )
      break;
    v17 = marXModelDetailCollisionPtr;
    marXModelDetailCollisionPtr = &marStaticModelCollisionModel->detailCollision;
    v18 = Mark_XModelDetailCollisionPtr();
    marXModelDetailCollisionPtr = v17;
    if ( !v18 )
      break;
    ++models;
    if ( ++v11 >= numModels )
      goto LABEL_11;
  }
  marStaticModelCollisionModelList = v27;
  marStaticModelCollisionModel = v9;
  return 0i64;
}

/*
==============
Mark_cmodel_t
==============
*/
_BOOL8 Mark_cmodel_t()
{
  PhysicsAsset **v0; 
  int v1; 

  v0 = marPhysicsAssetPtr;
  marPhysicsAssetPtr = &marcmodel_t->physicsAsset;
  v1 = Mark_PhysicsAssetPtr();
  marPhysicsAssetPtr = v0;
  return v1 != 0;
}

/*
==============
Mark_cmodel_tArray
==============
*/
__int64 Mark_cmodel_tArray(const unsigned __int64 count)
{
  cmodel_t *v1; 
  __int64 v2; 
  PhysicsAsset **v4; 
  int v5; 

  v1 = marcmodel_t;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marPhysicsAssetPtr;
  while ( 1 )
  {
    marcmodel_t = v1;
    marPhysicsAssetPtr = &v1->physicsAsset;
    v5 = Mark_PhysicsAssetPtr();
    marPhysicsAssetPtr = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Postload_AddonMapEnts
==============
*/
void Postload_AddonMapEnts(const DBStreamStart streamStart)
{
  const char **v2; 
  AddonMapEnts *v3; 
  char *v4; 
  char *v5; 
  MapTriggers *v6; 
  AddonMapEnts *v7; 
  cmodel_t *v8; 
  GfxBrushModel *v9; 
  GfxBrushModel *v10; 

  DB_PatchMem_PostLoad_PushAsset(56, varAddonMapEnts);
  if ( streamStart != (varAddonMapEnts != (AddonMapEnts *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varAddonMapEnts, 0x80ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x80ui64);
  DB_PushStreamPos(8u);
  v2 = varXString;
  varXString = &varAddonMapEnts->name;
  Postload_XString(NotAtStart);
  v3 = varAddonMapEnts;
  varXString = v2;
  if ( varAddonMapEnts->entityString )
  {
    v4 = varchar;
    v5 = AllocPostload_char();
    v3->entityString = v5;
    varchar = v5;
    Postload_charArray(AtStart, varAddonMapEnts->numEntityChars);
    v3 = varAddonMapEnts;
    varchar = v4;
  }
  v6 = varMapTriggers;
  varMapTriggers = &v3->trigger;
  Postload_MapTriggers(NotAtStart);
  v7 = varAddonMapEnts;
  varMapTriggers = v6;
  if ( varAddonMapEnts->cmodels )
  {
    v8 = varcmodel_t;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v7->cmodels = (cmodel_t *)g_streamPosGlob.pos;
    varcmodel_t = (cmodel_t *)g_streamPosGlob.pos;
    Postload_cmodel_tArray(AtStart, varAddonMapEnts->numSubModels);
    v7 = varAddonMapEnts;
    varcmodel_t = v8;
  }
  if ( v7->models )
  {
    v9 = varGfxBrushModel;
    v10 = AllocPostload_GfxBrushModel();
    v7->models = v10;
    varGfxBrushModel = v10;
    Postload_GfxBrushModelArray(AtStart, varAddonMapEnts->numSubModels);
    varGfxBrushModel = v9;
  }
  DB_PopStreamPos();
  DB_PatchMem_PopAsset();
}

/*
==============
Postload_AddonMapEntsArray
==============
*/
void Postload_AddonMapEntsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  AddonMapEnts *i; 

  v2 = count;
  Postload_Stream_7(streamStart, varAddonMapEnts, count << 7);
  for ( i = varAddonMapEnts; v2; --v2 )
  {
    varAddonMapEnts = i;
    Postload_AddonMapEnts(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_AddonMapEntsPtr
==============
*/
void Postload_AddonMapEntsPtr(const DBStreamStart streamStart)
{
  unsigned __int8 *inserted; 
  AddonMapEnts **v3; 
  __int64 v4; 
  AddonMapEnts *v5; 

  inserted = NULL;
  if ( streamStart != (varAddonMapEntsPtr != (AddonMapEnts **)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varAddonMapEntsPtr, 8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(8ui64);
  DB_PushStreamPos(2u);
  v3 = varAddonMapEntsPtr;
  v4 = (__int64)*varAddonMapEntsPtr;
  if ( *varAddonMapEntsPtr )
  {
    if ( v4 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v4 != -2 && v4 != -3 )
    {
      DB_ConvertOffsetToAlias((unsigned __int64 *)varAddonMapEntsPtr);
      goto LABEL_17;
    }
    v5 = varAddonMapEnts;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    *v3 = (AddonMapEnts *)g_streamPosGlob.pos;
    varAddonMapEnts = (AddonMapEnts *)g_streamPosGlob.pos;
    if ( v4 == -3 )
      inserted = DB_InsertPointer();
    Postload_AddonMapEnts(AtStart);
    Load_AddonMapEntsAsset(v3);
    varAddonMapEnts = v5;
    if ( inserted )
      *(_QWORD *)inserted = *v3;
    if ( v4 == -1 )
      DB_PopSharedData();
  }
LABEL_17:
  DB_PopStreamPos();
}

/*
==============
Postload_AddonMapEntsPtrArray
==============
*/
void Postload_AddonMapEntsPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  AddonMapEnts **i; 

  v2 = count;
  Postload_Stream_7(streamStart, varAddonMapEntsPtr, 8 * count);
  for ( i = varAddonMapEntsPtr; v2; --v2 )
  {
    varAddonMapEntsPtr = i;
    Postload_AddonMapEntsPtr(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_AddonMapEntsPtrStream
==============
*/
void Postload_AddonMapEntsPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  AddonMapEnts **v5; 
  __int64 v6; 
  AddonMapEnts *v7; 
  unsigned __int8 *inserted; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 32725, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varAddonMapEntsPtr;
    pos = g_streamPosGlob.pos;
    while ( 1 )
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 8ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(8ui64);
      g_streamPosGlob.pos += 8;
      DB_PushStreamPos(2u);
      v5 = varAddonMapEntsPtr;
      v6 = (__int64)*varAddonMapEntsPtr;
      if ( !*varAddonMapEntsPtr )
        goto LABEL_23;
      if ( v6 == -1 )
        break;
      if ( v6 == -2 || v6 == -3 )
        goto LABEL_17;
      DB_ConvertOffsetToAlias((unsigned __int64 *)varAddonMapEntsPtr);
LABEL_23:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varAddonMapEntsPtr = (AddonMapEnts **)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_17:
    v7 = varAddonMapEnts;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    inserted = NULL;
    *v5 = (AddonMapEnts *)g_streamPosGlob.pos;
    varAddonMapEnts = (AddonMapEnts *)g_streamPosGlob.pos;
    if ( v6 == -3 )
      inserted = DB_InsertPointer();
    Postload_AddonMapEnts(AtStart);
    Load_AddonMapEntsAsset(v5);
    varAddonMapEnts = v7;
    if ( inserted )
      *(_QWORD *)inserted = *v5;
    if ( v6 == -1 )
      DB_PopSharedData();
    goto LABEL_23;
  }
}

/*
==============
Postload_AddonMapEntsStream
==============
*/
void Postload_AddonMapEntsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  const char **v5; 
  AddonMapEnts *v6; 
  char *v7; 
  char *v8; 
  MapTriggers *v9; 
  AddonMapEnts *v10; 
  cmodel_t *v11; 
  GfxBrushModel *v12; 
  GfxBrushModel *v13; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 32598, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varAddonMapEnts;
    do
    {
      DB_PatchMem_PostLoad_PushAsset(56, v3);
      pos = g_streamPosGlob.pos;
      if ( varAddonMapEnts != (AddonMapEnts *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, varAddonMapEnts, 0x80ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x80ui64);
      g_streamPosGlob.pos += 128;
      DB_PushStreamPos(8u);
      v5 = varXString;
      varXString = &varAddonMapEnts->name;
      Postload_XString(NotAtStart);
      v6 = varAddonMapEnts;
      varXString = v5;
      if ( varAddonMapEnts->entityString )
      {
        v7 = varchar;
        v8 = AllocPostload_char();
        v6->entityString = v8;
        varchar = v8;
        Postload_charArray(AtStart, varAddonMapEnts->numEntityChars);
        v6 = varAddonMapEnts;
        varchar = v7;
      }
      v9 = varMapTriggers;
      varMapTriggers = &v6->trigger;
      Postload_MapTriggers(NotAtStart);
      v10 = varAddonMapEnts;
      varMapTriggers = v9;
      if ( varAddonMapEnts->cmodels )
      {
        v11 = varcmodel_t;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v10->cmodels = (cmodel_t *)g_streamPosGlob.pos;
        varcmodel_t = (cmodel_t *)g_streamPosGlob.pos;
        Postload_cmodel_tArray(AtStart, varAddonMapEnts->numSubModels);
        v10 = varAddonMapEnts;
        varcmodel_t = v11;
      }
      if ( v10->models )
      {
        v12 = varGfxBrushModel;
        v13 = AllocPostload_GfxBrushModel();
        v10->models = v13;
        varGfxBrushModel = v13;
        Postload_GfxBrushModelArray(AtStart, varAddonMapEnts->numSubModels);
        varGfxBrushModel = v12;
      }
      DB_PopStreamPos();
      DB_PatchMem_PopAsset();
      v3 = g_streamPosGlob.pos;
      varAddonMapEnts = (AddonMapEnts *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_AudioPASpeaker
==============
*/
void Postload_AudioPASpeaker(const DBStreamStart streamStart)
{
  if ( streamStart != (varAudioPASpeaker != (AudioPASpeaker *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varAudioPASpeaker, 0x14ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x14ui64);
}

/*
==============
Postload_AudioPASpeakerArray
==============
*/
void Postload_AudioPASpeakerArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_7(streamStart, varAudioPASpeaker, 20 * count);
}

/*
==============
Postload_AudioPASpeakerStream
==============
*/
void Postload_AudioPASpeakerStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  AudioPASpeaker *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 27124, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varAudioPASpeaker;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (AudioPASpeaker *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x14ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x14ui64);
      pos = g_streamPosGlob.pos + 20;
      g_streamPosGlob.pos = pos;
      v3 = (AudioPASpeaker *)pos;
      varAudioPASpeaker = (AudioPASpeaker *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_AudioPropagationEdge
==============
*/
void Postload_AudioPropagationEdge(const DBStreamStart streamStart)
{
  if ( streamStart != (varAudioPropagationEdge != (AudioPropagationEdge *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varAudioPropagationEdge, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_AudioPropagationEdgeArray
==============
*/
void Postload_AudioPropagationEdgeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_7(streamStart, varAudioPropagationEdge, 4 * count);
}

/*
==============
Postload_AudioPropagationEdgeStream
==============
*/
void Postload_AudioPropagationEdgeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  AudioPropagationEdge *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 27345, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varAudioPropagationEdge;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (AudioPropagationEdge *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (AudioPropagationEdge *)pos;
      varAudioPropagationEdge = (AudioPropagationEdge *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_AudioPropagationNode
==============
*/
void Postload_AudioPropagationNode(const DBStreamStart streamStart)
{
  if ( streamStart != (varAudioPropagationNode != (AudioPropagationNode *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varAudioPropagationNode, 0x14ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x14ui64);
}

/*
==============
Postload_AudioPropagationNodeArray
==============
*/
void Postload_AudioPropagationNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_7(streamStart, varAudioPropagationNode, 20 * count);
}

/*
==============
Postload_AudioPropagationNodeStream
==============
*/
void Postload_AudioPropagationNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  AudioPropagationNode *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 27246, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varAudioPropagationNode;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (AudioPropagationNode *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x14ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x14ui64);
      pos = g_streamPosGlob.pos + 20;
      g_streamPosGlob.pos = pos;
      v3 = (AudioPropagationNode *)pos;
      varAudioPropagationNode = (AudioPropagationNode *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_CTAudRvbPanInfo
==============
*/
void Postload_CTAudRvbPanInfo(const DBStreamStart streamStart)
{
  if ( streamStart != (varCTAudRvbPanInfo != (CTAudRvbPanInfo *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varCTAudRvbPanInfo, 0x18ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x18ui64);
}

/*
==============
Postload_CTAudRvbPanInfoArray
==============
*/
void Postload_CTAudRvbPanInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_7(streamStart, varCTAudRvbPanInfo, 24 * count);
}

/*
==============
Postload_CTAudRvbPanInfoStream
==============
*/
void Postload_CTAudRvbPanInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  CTAudRvbPanInfo *v3; 
  CTAudRvbPanInfo *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 23273, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varCTAudRvbPanInfo;
    pos = (CTAudRvbPanInfo *)g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x18ui64);
        pos = (CTAudRvbPanInfo *)g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x18ui64);
      pos = (CTAudRvbPanInfo *)(g_streamPosGlob.pos + 24);
      g_streamPosGlob.pos = (unsigned __int8 *)pos;
      v3 = pos;
      varCTAudRvbPanInfo = pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ClientEntAnchor
==============
*/
void Postload_ClientEntAnchor(const DBStreamStart streamStart)
{
  scr_string_t *v2; 

  if ( streamStart != (varClientEntAnchor != (ClientEntAnchor *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varClientEntAnchor, 8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(8ui64);
  v2 = varscr_string_t;
  varscr_string_t = (scr_string_t *)varClientEntAnchor;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = v2;
}

/*
==============
Postload_ClientEntAnchorArray
==============
*/
void Postload_ClientEntAnchorArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientEntAnchor *i; 
  ClientEntAnchor *v4; 
  scr_string_t *v5; 

  v2 = count;
  Postload_Stream_7(streamStart, varClientEntAnchor, 8 * count);
  for ( i = varClientEntAnchor; v2; --v2 )
  {
    v4 = i;
    varClientEntAnchor = i;
    if ( i == (ClientEntAnchor *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 8ui64);
      v4 = varClientEntAnchor;
    }
    v5 = varscr_string_t;
    varscr_string_t = (scr_string_t *)v4;
    Postload_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v5;
  }
}

/*
==============
Postload_ClientEntAnchorStream
==============
*/
void Postload_ClientEntAnchorStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  scr_string_t *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 26240, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varClientEntAnchor;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 8ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(8ui64);
      v5 = varscr_string_t;
      g_streamPosGlob.pos += 8;
      varscr_string_t = (scr_string_t *)varClientEntAnchor;
      Postload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varClientEntAnchor = (ClientEntAnchor *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varscr_string_t = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ClientEntityLinkToDefPtr
==============
*/
void Postload_ClientEntityLinkToDefPtr(const DBStreamStart streamStart)
{
  ClientEntityLinkToDef **v2; 
  __int64 v3; 
  ClientEntityLinkToDef *v4; 
  ClientEntityLinkToDef *v5; 

  if ( streamStart != (varClientEntityLinkToDefPtr != (ClientEntityLinkToDef **)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varClientEntityLinkToDefPtr, 8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(8ui64);
  v2 = varClientEntityLinkToDefPtr;
  v3 = (__int64)*varClientEntityLinkToDefPtr;
  if ( *varClientEntityLinkToDefPtr )
  {
    if ( v3 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v3 != -2 )
    {
      *v2 = (ClientEntityLinkToDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)*varClientEntityLinkToDefPtr);
      return;
    }
    v4 = varClientEntityLinkToDef;
    v5 = AllocPostload_ClientEntityLinkToDef();
    *v2 = v5;
    varClientEntityLinkToDef = v5;
    Postload_ClientEntityLinkToDef(AtStart);
    varClientEntityLinkToDef = v4;
    if ( v3 == -1 )
      DB_PopSharedData();
  }
}

/*
==============
Postload_ClientEntityLinkToDefPtrArray
==============
*/
void Postload_ClientEntityLinkToDefPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientEntityLinkToDef **v3; 
  unsigned __int64 *v4; 
  unsigned __int64 v5; 
  ClientEntityLinkToDef *v6; 
  ClientEntityLinkToDef *v7; 

  v2 = count;
  Postload_Stream_7(streamStart, varClientEntityLinkToDefPtr, 8 * count);
  v3 = varClientEntityLinkToDefPtr;
  if ( v2 )
  {
    while ( 1 )
    {
      v4 = (unsigned __int64 *)v3;
      varClientEntityLinkToDefPtr = v3;
      if ( v3 == (ClientEntityLinkToDef **)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, v3, 8ui64);
        v4 = (unsigned __int64 *)varClientEntityLinkToDefPtr;
      }
      v5 = *v4;
      if ( !*v4 )
        goto LABEL_11;
      if ( v5 == -1i64 )
        break;
      if ( v5 == -2i64 )
        goto LABEL_9;
      *v4 = (unsigned __int64)DB_ResolvePackedOffsetAddress(*v4);
LABEL_11:
      ++v3;
      if ( !--v2 )
        return;
    }
    DB_PushSharedData();
LABEL_9:
    v6 = varClientEntityLinkToDef;
    v7 = AllocPostload_ClientEntityLinkToDef();
    *v4 = (unsigned __int64)v7;
    varClientEntityLinkToDef = v7;
    Postload_ClientEntityLinkToDef(AtStart);
    varClientEntityLinkToDef = v6;
    if ( v5 == -1i64 )
      DB_PopSharedData();
    goto LABEL_11;
  }
}

/*
==============
Postload_ClientEntityLinkToDefPtrStream
==============
*/
void Postload_ClientEntityLinkToDefPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ClientEntityLinkToDef **v4; 
  __int64 v5; 
  ClientEntityLinkToDef *v6; 
  ClientEntityLinkToDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 23381, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varClientEntityLinkToDefPtr;
    while ( 1 )
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 8ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(8ui64);
      g_streamPosGlob.pos += 8;
      v4 = varClientEntityLinkToDefPtr;
      v5 = (__int64)*varClientEntityLinkToDefPtr;
      if ( !*varClientEntityLinkToDefPtr )
        goto LABEL_18;
      if ( v5 == -1 )
        break;
      if ( v5 == -2 )
        goto LABEL_16;
      *v4 = (ClientEntityLinkToDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)*varClientEntityLinkToDefPtr);
LABEL_18:
      pos = g_streamPosGlob.pos;
      varClientEntityLinkToDefPtr = (ClientEntityLinkToDef **)g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v6 = varClientEntityLinkToDef;
    v7 = AllocPostload_ClientEntityLinkToDef();
    *v4 = v7;
    varClientEntityLinkToDef = v7;
    Postload_ClientEntityLinkToDef(AtStart);
    varClientEntityLinkToDef = v6;
    if ( v5 == -1 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ClientExploderDef
==============
*/
void Postload_ClientExploderDef(const DBStreamStart streamStart)
{
  FxCombinedDef *v2; 
  SndAliasLookup *v3; 
  ClientExploderDef *v4; 
  SndAliasList *v5; 
  SndAliasList *v6; 
  scr_string_t *v7; 

  if ( streamStart != (varClientExploderDef != (ClientExploderDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varClientExploderDef, 0x40ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x40ui64);
  v2 = varFxCombinedDef;
  varFxCombinedDef = &varClientExploderDef->effect;
  Postload_FxCombinedDef(NotAtStart);
  varFxCombinedDef = v2;
  v3 = varSndAliasLookup;
  varSndAliasLookup = &varClientExploderDef->effectSound;
  Postload_SndAliasLookup(NotAtStart);
  v4 = varClientExploderDef;
  varSndAliasLookup = v3;
  if ( varClientExploderDef->aliasList )
  {
    v5 = varSndAliasList;
    v6 = AllocPostload_SndAliasList();
    v4->aliasList = v6;
    varSndAliasList = v6;
    Postload_SndAliasList(AtStart);
    v4 = varClientExploderDef;
    varSndAliasList = v5;
  }
  v7 = varscr_string_t;
  varscr_string_t = &v4->name;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = v7;
}

/*
==============
Postload_ClientExploderDefArray
==============
*/
void Postload_ClientExploderDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientExploderDef *i; 

  v2 = count;
  Postload_Stream_7(streamStart, varClientExploderDef, count << 6);
  for ( i = varClientExploderDef; v2; --v2 )
  {
    varClientExploderDef = i;
    Postload_ClientExploderDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ClientExploderDefStream
==============
*/
void Postload_ClientExploderDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  FxCombinedDef *v5; 
  SndAliasLookup *v6; 
  ClientExploderDef *v7; 
  SndAliasList *v8; 
  SndAliasList *v9; 
  scr_string_t *v10; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 28499, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varClientExploderDef;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x40ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x40ui64);
      v5 = varFxCombinedDef;
      g_streamPosGlob.pos += 64;
      varFxCombinedDef = &varClientExploderDef->effect;
      Postload_FxCombinedDef(NotAtStart);
      varFxCombinedDef = v5;
      v6 = varSndAliasLookup;
      varSndAliasLookup = &varClientExploderDef->effectSound;
      Postload_SndAliasLookup(NotAtStart);
      v7 = varClientExploderDef;
      varSndAliasLookup = v6;
      if ( varClientExploderDef->aliasList )
      {
        v8 = varSndAliasList;
        v9 = AllocPostload_SndAliasList();
        v7->aliasList = v9;
        varSndAliasList = v9;
        Postload_SndAliasList(AtStart);
        v7 = varClientExploderDef;
        varSndAliasList = v8;
      }
      v10 = varscr_string_t;
      varscr_string_t = &v7->name;
      Postload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varClientExploderDef = (ClientExploderDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varscr_string_t = v10;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ClientIntervalSoundDef
==============
*/
void Postload_ClientIntervalSoundDef(const DBStreamStart streamStart)
{
  SndAliasLookup *v2; 
  ClientIntervalSoundDef *v3; 
  SndAliasList *v4; 
  SndAliasList *v5; 

  if ( streamStart != (varClientIntervalSoundDef != (ClientIntervalSoundDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varClientIntervalSoundDef, 0x30ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x30ui64);
  v2 = varSndAliasLookup;
  varSndAliasLookup = &varClientIntervalSoundDef->effectSound;
  Postload_SndAliasLookup(NotAtStart);
  v3 = varClientIntervalSoundDef;
  varSndAliasLookup = v2;
  if ( varClientIntervalSoundDef->aliasList )
  {
    v4 = varSndAliasList;
    v5 = AllocPostload_SndAliasList();
    v3->aliasList = v5;
    varSndAliasList = v5;
    Postload_SndAliasList(AtStart);
    varSndAliasList = v4;
  }
}

/*
==============
Postload_ClientIntervalSoundDefArray
==============
*/
void Postload_ClientIntervalSoundDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientIntervalSoundDef *i; 
  ClientIntervalSoundDef *v4; 
  SndAliasLookup *v5; 
  ClientIntervalSoundDef *v6; 
  SndAliasList *v7; 
  SndAliasList *v8; 

  v2 = count;
  Postload_Stream_7(streamStart, varClientIntervalSoundDef, 48 * count);
  for ( i = varClientIntervalSoundDef; v2; --v2 )
  {
    v4 = i;
    varClientIntervalSoundDef = i;
    if ( i == (ClientIntervalSoundDef *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x30ui64);
      v4 = varClientIntervalSoundDef;
    }
    v5 = varSndAliasLookup;
    varSndAliasLookup = &v4->effectSound;
    Postload_SndAliasLookup(NotAtStart);
    v6 = varClientIntervalSoundDef;
    varSndAliasLookup = v5;
    if ( varClientIntervalSoundDef->aliasList )
    {
      v7 = varSndAliasList;
      v8 = AllocPostload_SndAliasList();
      v6->aliasList = v8;
      varSndAliasList = v8;
      Postload_SndAliasList(AtStart);
      varSndAliasList = v7;
    }
    ++i;
  }
}

/*
==============
Postload_ClientIntervalSoundDefStream
==============
*/
void Postload_ClientIntervalSoundDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  SndAliasLookup *v5; 
  ClientIntervalSoundDef *v6; 
  SndAliasList *v7; 
  SndAliasList *v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 28272, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varClientIntervalSoundDef;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x30ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x30ui64);
      v5 = varSndAliasLookup;
      g_streamPosGlob.pos += 48;
      varSndAliasLookup = &varClientIntervalSoundDef->effectSound;
      Postload_SndAliasLookup(NotAtStart);
      v6 = varClientIntervalSoundDef;
      varSndAliasLookup = v5;
      if ( varClientIntervalSoundDef->aliasList )
      {
        v7 = varSndAliasList;
        v8 = AllocPostload_SndAliasList();
        v6->aliasList = v8;
        varSndAliasList = v8;
        Postload_SndAliasList(AtStart);
        varSndAliasList = v7;
      }
      pos = g_streamPosGlob.pos;
      varClientIntervalSoundDef = (ClientIntervalSoundDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ClientLoopSoundDef
==============
*/
void Postload_ClientLoopSoundDef(const DBStreamStart streamStart)
{
  SndAliasLookup *v2; 
  ClientLoopSoundDef *v3; 
  SndAliasList *v4; 
  SndAliasList *v5; 

  if ( streamStart != (varClientLoopSoundDef != (ClientLoopSoundDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varClientLoopSoundDef, 0x28ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x28ui64);
  v2 = varSndAliasLookup;
  varSndAliasLookup = &varClientLoopSoundDef->effectSound;
  Postload_SndAliasLookup(NotAtStart);
  v3 = varClientLoopSoundDef;
  varSndAliasLookup = v2;
  if ( varClientLoopSoundDef->aliasList )
  {
    v4 = varSndAliasList;
    v5 = AllocPostload_SndAliasList();
    v3->aliasList = v5;
    varSndAliasList = v5;
    Postload_SndAliasList(AtStart);
    varSndAliasList = v4;
  }
}

/*
==============
Postload_ClientLoopSoundDefArray
==============
*/
void Postload_ClientLoopSoundDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientLoopSoundDef *i; 
  ClientLoopSoundDef *v4; 
  SndAliasLookup *v5; 
  ClientLoopSoundDef *v6; 
  SndAliasList *v7; 
  SndAliasList *v8; 

  v2 = count;
  Postload_Stream_7(streamStart, varClientLoopSoundDef, 40 * count);
  for ( i = varClientLoopSoundDef; v2; --v2 )
  {
    v4 = i;
    varClientLoopSoundDef = i;
    if ( i == (ClientLoopSoundDef *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x28ui64);
      v4 = varClientLoopSoundDef;
    }
    v5 = varSndAliasLookup;
    varSndAliasLookup = &v4->effectSound;
    Postload_SndAliasLookup(NotAtStart);
    v6 = varClientLoopSoundDef;
    varSndAliasLookup = v5;
    if ( varClientLoopSoundDef->aliasList )
    {
      v7 = varSndAliasList;
      v8 = AllocPostload_SndAliasList();
      v6->aliasList = v8;
      varSndAliasList = v8;
      Postload_SndAliasList(AtStart);
      varSndAliasList = v7;
    }
    ++i;
  }
}

/*
==============
Postload_ClientLoopSoundDefStream
==============
*/
void Postload_ClientLoopSoundDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  SndAliasLookup *v5; 
  ClientLoopSoundDef *v6; 
  SndAliasList *v7; 
  SndAliasList *v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 27864, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varClientLoopSoundDef;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x28ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x28ui64);
      v5 = varSndAliasLookup;
      g_streamPosGlob.pos += 40;
      varSndAliasLookup = &varClientLoopSoundDef->effectSound;
      Postload_SndAliasLookup(NotAtStart);
      v6 = varClientLoopSoundDef;
      varSndAliasLookup = v5;
      if ( varClientLoopSoundDef->aliasList )
      {
        v7 = varSndAliasList;
        v8 = AllocPostload_SndAliasList();
        v6->aliasList = v8;
        varSndAliasList = v8;
        Postload_SndAliasList(AtStart);
        varSndAliasList = v7;
      }
      pos = g_streamPosGlob.pos;
      varClientLoopSoundDef = (ClientLoopSoundDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ClientMapTriggers
==============
*/
void Postload_ClientMapTriggers(const DBStreamStart streamStart)
{
  ClientMapTriggers *v2; 
  ClientTriggerModel *models; 
  ClientTriggerModel *v4; 
  unsigned __int64 v5; 
  ClientMapTriggers *v6; 
  ClientTriggerHull *hulls; 
  ClientTriggerHull *v8; 
  unsigned __int64 v9; 
  ClientMapTriggers *v10; 
  TriggerSlab *slabs; 
  TriggerSlab *v12; 
  unsigned __int64 v13; 

  if ( streamStart != (varClientMapTriggers != (ClientMapTriggers *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varClientMapTriggers, 0x30ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x30ui64);
  v2 = varClientMapTriggers;
  models = varClientMapTriggers->models;
  if ( models )
  {
    if ( models == (ClientTriggerModel *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( models != (ClientTriggerModel *)-2i64 )
    {
      v2->models = (ClientTriggerModel *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varClientMapTriggers->models);
      goto LABEL_17;
    }
    v4 = varClientTriggerModel;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->models = (ClientTriggerModel *)g_streamPosGlob.pos;
    varClientTriggerModel = (ClientTriggerModel *)g_streamPosGlob.pos;
    v5 = 12i64 * varClientMapTriggers->count;
    if ( v5 )
    {
      if ( v5 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v5);
    }
    varClientTriggerModel = v4;
    if ( models == (ClientTriggerModel *)-1i64 )
      DB_PopSharedData();
  }
LABEL_17:
  v6 = varClientMapTriggers;
  hulls = varClientMapTriggers->hulls;
  if ( !hulls )
    goto LABEL_29;
  if ( hulls == (ClientTriggerHull *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( hulls != (ClientTriggerHull *)-2i64 )
  {
    v6->hulls = (ClientTriggerHull *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varClientMapTriggers->hulls);
    goto LABEL_29;
  }
  v8 = varClientTriggerHull;
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  v6->hulls = (ClientTriggerHull *)g_streamPosGlob.pos;
  varClientTriggerHull = (ClientTriggerHull *)g_streamPosGlob.pos;
  v9 = 32i64 * varClientMapTriggers->hullCount;
  if ( v9 )
  {
    if ( v9 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
      __debugbreak();
    DB_IncStreamPos(v9);
  }
  varClientTriggerHull = v8;
  if ( hulls == (ClientTriggerHull *)-1i64 )
    DB_PopSharedData();
LABEL_29:
  v10 = varClientMapTriggers;
  slabs = varClientMapTriggers->slabs;
  if ( !slabs )
    return;
  if ( slabs == (TriggerSlab *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( slabs != (TriggerSlab *)-2i64 )
  {
    v10->slabs = (TriggerSlab *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varClientMapTriggers->slabs);
    return;
  }
  v12 = varTriggerSlab;
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  v10->slabs = (TriggerSlab *)g_streamPosGlob.pos;
  varTriggerSlab = (TriggerSlab *)g_streamPosGlob.pos;
  v13 = 20i64 * varClientMapTriggers->slabCount;
  if ( v13 )
  {
    if ( v13 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
      __debugbreak();
    DB_IncStreamPos(v13);
  }
  varTriggerSlab = v12;
  if ( slabs == (TriggerSlab *)-1i64 )
    DB_PopSharedData();
}

/*
==============
Postload_ClientMapTriggersArray
==============
*/
void Postload_ClientMapTriggersArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientMapTriggers *i; 

  v2 = count;
  Postload_Stream_7(streamStart, varClientMapTriggers, 48 * count);
  for ( i = varClientMapTriggers; v2; --v2 )
  {
    varClientMapTriggers = i;
    Postload_ClientMapTriggers(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ClientMapTriggersStream
==============
*/
void Postload_ClientMapTriggersStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ClientMapTriggers *v4; 
  ClientTriggerModel *models; 
  ClientTriggerModel *v6; 
  unsigned __int64 v7; 
  ClientMapTriggers *v8; 
  ClientTriggerHull *hulls; 
  ClientTriggerHull *v10; 
  unsigned __int64 v11; 
  ClientMapTriggers *v12; 
  TriggerSlab *slabs; 
  TriggerSlab *v14; 
  unsigned __int64 v15; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 23128, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varClientMapTriggers;
    do
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x30ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x30ui64);
      g_streamPosGlob.pos += 48;
      v4 = varClientMapTriggers;
      models = varClientMapTriggers->models;
      if ( models )
      {
        if ( models == (ClientTriggerModel *)-1i64 )
        {
          DB_PushSharedData();
        }
        else if ( models != (ClientTriggerModel *)-2i64 )
        {
          v4->models = (ClientTriggerModel *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varClientMapTriggers->models);
          goto LABEL_23;
        }
        v6 = varClientTriggerModel;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->models = (ClientTriggerModel *)g_streamPosGlob.pos;
        varClientTriggerModel = (ClientTriggerModel *)g_streamPosGlob.pos;
        v7 = 12i64 * varClientMapTriggers->count;
        if ( v7 )
        {
          if ( v7 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(v7);
        }
        varClientTriggerModel = v6;
        if ( models == (ClientTriggerModel *)-1i64 )
          DB_PopSharedData();
      }
LABEL_23:
      v8 = varClientMapTriggers;
      hulls = varClientMapTriggers->hulls;
      if ( !hulls )
        goto LABEL_35;
      if ( hulls == (ClientTriggerHull *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( hulls != (ClientTriggerHull *)-2i64 )
      {
        v8->hulls = (ClientTriggerHull *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varClientMapTriggers->hulls);
        goto LABEL_35;
      }
      v10 = varClientTriggerHull;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v8->hulls = (ClientTriggerHull *)g_streamPosGlob.pos;
      varClientTriggerHull = (ClientTriggerHull *)g_streamPosGlob.pos;
      v11 = 32i64 * varClientMapTriggers->hullCount;
      if ( v11 )
      {
        if ( v11 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
          __debugbreak();
        DB_IncStreamPos(v11);
      }
      varClientTriggerHull = v10;
      if ( hulls == (ClientTriggerHull *)-1i64 )
        DB_PopSharedData();
LABEL_35:
      v12 = varClientMapTriggers;
      slabs = varClientMapTriggers->slabs;
      if ( slabs )
      {
        if ( slabs == (TriggerSlab *)-1i64 )
        {
          DB_PushSharedData();
LABEL_40:
          v14 = varTriggerSlab;
          DB_PatchMem_FixStreamAlignment(3ui64);
          DB_CheckCanIncStreamPos(0i64);
          v12->slabs = (TriggerSlab *)g_streamPosGlob.pos;
          varTriggerSlab = (TriggerSlab *)g_streamPosGlob.pos;
          v15 = 20i64 * varClientMapTriggers->slabCount;
          if ( v15 )
          {
            if ( v15 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
              __debugbreak();
            DB_IncStreamPos(v15);
          }
          varTriggerSlab = v14;
          if ( slabs == (TriggerSlab *)-1i64 )
            DB_PopSharedData();
          goto LABEL_47;
        }
        if ( slabs == (TriggerSlab *)-2i64 )
          goto LABEL_40;
        v12->slabs = (TriggerSlab *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varClientMapTriggers->slabs);
      }
LABEL_47:
      pos = g_streamPosGlob.pos;
      varClientMapTriggers = (ClientMapTriggers *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ClientOneshotEffectDef
==============
*/
void Postload_ClientOneshotEffectDef(const DBStreamStart streamStart)
{
  FxCombinedDef *v2; 
  SndAliasLookup *v3; 

  if ( streamStart != (varClientOneshotEffectDef != (ClientOneshotEffectDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varClientOneshotEffectDef, 0x38ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x38ui64);
  v2 = varFxCombinedDef;
  varFxCombinedDef = &varClientOneshotEffectDef->effect;
  Postload_FxCombinedDef(NotAtStart);
  varFxCombinedDef = v2;
  v3 = varSndAliasLookup;
  varSndAliasLookup = &varClientOneshotEffectDef->effectSound;
  Postload_SndAliasLookup(NotAtStart);
  varSndAliasLookup = v3;
}

/*
==============
Postload_ClientOneshotEffectDefArray
==============
*/
void Postload_ClientOneshotEffectDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientOneshotEffectDef *i; 
  ClientOneshotEffectDef *v4; 
  FxCombinedDef *v5; 
  SndAliasLookup *v6; 

  v2 = count;
  Postload_Stream_7(streamStart, varClientOneshotEffectDef, 56 * count);
  for ( i = varClientOneshotEffectDef; v2; --v2 )
  {
    v4 = i;
    varClientOneshotEffectDef = i;
    if ( i == (ClientOneshotEffectDef *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x38ui64);
      v4 = varClientOneshotEffectDef;
    }
    v5 = varFxCombinedDef;
    varFxCombinedDef = &v4->effect;
    Postload_FxCombinedDef(NotAtStart);
    varFxCombinedDef = v5;
    v6 = varSndAliasLookup;
    varSndAliasLookup = &varClientOneshotEffectDef->effectSound;
    Postload_SndAliasLookup(NotAtStart);
    ++i;
    varSndAliasLookup = v6;
  }
}

/*
==============
Postload_ClientOneshotEffectDefStream
==============
*/
void Postload_ClientOneshotEffectDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  FxCombinedDef *v5; 
  SndAliasLookup *v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 28700, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varClientOneshotEffectDef;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x38ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x38ui64);
      v5 = varFxCombinedDef;
      g_streamPosGlob.pos += 56;
      varFxCombinedDef = &varClientOneshotEffectDef->effect;
      Postload_FxCombinedDef(NotAtStart);
      varFxCombinedDef = v5;
      v6 = varSndAliasLookup;
      varSndAliasLookup = &varClientOneshotEffectDef->effectSound;
      Postload_SndAliasLookup(NotAtStart);
      pos = g_streamPosGlob.pos;
      varClientOneshotEffectDef = (ClientOneshotEffectDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varSndAliasLookup = v6;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ClientReactiveEntDef
==============
*/
void Postload_ClientReactiveEntDef(const DBStreamStart streamStart)
{
  FxCombinedDef *v2; 
  SndAliasLookup *v3; 
  ClientReactiveEntDef *v4; 
  SndAliasList *v5; 
  SndAliasList *v6; 

  if ( streamStart != (varClientReactiveEntDef != (ClientReactiveEntDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varClientReactiveEntDef, 0x38ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x38ui64);
  v2 = varFxCombinedDef;
  varFxCombinedDef = &varClientReactiveEntDef->effect;
  Postload_FxCombinedDef(NotAtStart);
  varFxCombinedDef = v2;
  v3 = varSndAliasLookup;
  varSndAliasLookup = &varClientReactiveEntDef->effectSound;
  Postload_SndAliasLookup(NotAtStart);
  v4 = varClientReactiveEntDef;
  varSndAliasLookup = v3;
  if ( varClientReactiveEntDef->aliasList )
  {
    v5 = varSndAliasList;
    v6 = AllocPostload_SndAliasList();
    v4->aliasList = v6;
    varSndAliasList = v6;
    Postload_SndAliasList(AtStart);
    varSndAliasList = v5;
  }
}

/*
==============
Postload_ClientReactiveEntDefArray
==============
*/
void Postload_ClientReactiveEntDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientReactiveEntDef *i; 

  v2 = count;
  Postload_Stream_7(streamStart, varClientReactiveEntDef, 56 * count);
  for ( i = varClientReactiveEntDef; v2; --v2 )
  {
    varClientReactiveEntDef = i;
    Postload_ClientReactiveEntDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ClientReactiveEntDefStream
==============
*/
void Postload_ClientReactiveEntDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  FxCombinedDef *v5; 
  SndAliasLookup *v6; 
  ClientReactiveEntDef *v7; 
  SndAliasList *v8; 
  SndAliasList *v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 28068, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varClientReactiveEntDef;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x38ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x38ui64);
      v5 = varFxCombinedDef;
      g_streamPosGlob.pos += 56;
      varFxCombinedDef = &varClientReactiveEntDef->effect;
      Postload_FxCombinedDef(NotAtStart);
      varFxCombinedDef = v5;
      v6 = varSndAliasLookup;
      varSndAliasLookup = &varClientReactiveEntDef->effectSound;
      Postload_SndAliasLookup(NotAtStart);
      v7 = varClientReactiveEntDef;
      varSndAliasLookup = v6;
      if ( varClientReactiveEntDef->aliasList )
      {
        v8 = varSndAliasList;
        v9 = AllocPostload_SndAliasList();
        v7->aliasList = v9;
        varSndAliasList = v9;
        Postload_SndAliasList(AtStart);
        varSndAliasList = v8;
      }
      pos = g_streamPosGlob.pos;
      varClientReactiveEntDef = (ClientReactiveEntDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ClientRootDef
==============
*/
void Postload_ClientRootDef(const DBStreamStart streamStart)
{
  scr_string_t *v2; 

  if ( streamStart != (varClientRootDef != (ClientRootDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varClientRootDef, 0x20ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x20ui64);
  v2 = varscr_string_t;
  varscr_string_t = &varClientRootDef->path;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = v2;
}

/*
==============
Postload_ClientRootDefArray
==============
*/
void Postload_ClientRootDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientRootDef *i; 
  ClientRootDef *v4; 
  scr_string_t *v5; 

  v2 = count;
  Postload_Stream_7(streamStart, varClientRootDef, 32 * count);
  for ( i = varClientRootDef; v2; --v2 )
  {
    v4 = i;
    varClientRootDef = i;
    if ( i == (ClientRootDef *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x20ui64);
      v4 = varClientRootDef;
    }
    v5 = varscr_string_t;
    varscr_string_t = &v4->path;
    Postload_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v5;
  }
}

/*
==============
Postload_ClientRootDefStream
==============
*/
void Postload_ClientRootDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  scr_string_t *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 28855, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varClientRootDef;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x20ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x20ui64);
      v5 = varscr_string_t;
      g_streamPosGlob.pos += 32;
      varscr_string_t = &varClientRootDef->path;
      Postload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varClientRootDef = (ClientRootDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varscr_string_t = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ClientSideEffects
==============
*/
void Postload_ClientSideEffects(const DBStreamStart streamStart)
{
  ClientSideEffects *v2; 
  ClientOneshotEffectDef *v3; 
  __int64 oneshotEffectCount; 
  ClientOneshotEffectDef *i; 
  ClientOneshotEffectDef *v6; 
  FxCombinedDef *v7; 
  SndAliasLookup *v8; 
  ClientSideEffects *v9; 
  SpatialPartition_Tree *v10; 
  SpatialPartition_Tree *v11; 
  ClientSideEffects *v12; 
  unsigned int *v13; 
  unsigned int *v14; 
  ClientSideEffects *v15; 
  ClientExploderDef *v16; 
  __int64 exploderCount; 
  unsigned __int64 v18; 
  ClientExploderDef *j; 
  ClientSideEffects *v20; 
  ClientIntervalSoundDef *v21; 
  __int64 intervalSoundCount; 
  ClientIntervalSoundDef *k; 
  ClientIntervalSoundDef *v24; 
  SndAliasLookup *v25; 
  ClientIntervalSoundDef *v26; 
  SndAliasList *v27; 
  SndAliasList *v28; 
  ClientSideEffects *v29; 
  ClientLoopSoundDef *v30; 
  __int64 loopSoundCount; 
  ClientLoopSoundDef *m; 
  ClientLoopSoundDef *v33; 
  SndAliasLookup *v34; 
  ClientLoopSoundDef *v35; 
  SndAliasList *v36; 
  SndAliasList *v37; 
  ClientSideEffects *v38; 
  SpatialPartition_Tree *v39; 
  SpatialPartition_Tree *v40; 
  ClientSideEffects *v41; 
  ClientReactiveEntDef *v42; 
  __int64 reactiveEntCount; 
  ClientReactiveEntDef *n; 
  ClientSideEffects *v45; 
  SpatialPartition_Tree *v46; 
  SpatialPartition_Tree *v47; 
  ClientSideEffects *v48; 
  ClientRootDef *v49; 
  __int64 rootCount; 
  unsigned __int64 v51; 
  ClientRootDef *ii; 
  ClientRootDef *v53; 
  scr_string_t *v54; 
  ClientSideEffects *v55; 
  unsigned __int16 *v56; 
  unsigned __int16 *v57; 

  if ( streamStart != (varClientSideEffects != (ClientSideEffects *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varClientSideEffects, 0x98ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x98ui64);
  v2 = varClientSideEffects;
  if ( varClientSideEffects->oneshotEffects )
  {
    v3 = varClientOneshotEffectDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->oneshotEffects = (ClientOneshotEffectDef *)g_streamPosGlob.pos;
    varClientOneshotEffectDef = (ClientOneshotEffectDef *)g_streamPosGlob.pos;
    oneshotEffectCount = varClientSideEffects->oneshotEffectCount;
    if ( 56 * oneshotEffectCount )
    {
      if ( (unsigned __int64)(56 * oneshotEffectCount) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(56 * oneshotEffectCount);
    }
    for ( i = varClientOneshotEffectDef; oneshotEffectCount; --oneshotEffectCount )
    {
      v6 = i;
      varClientOneshotEffectDef = i;
      if ( i == (ClientOneshotEffectDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x38ui64);
        v6 = varClientOneshotEffectDef;
      }
      v7 = varFxCombinedDef;
      varFxCombinedDef = &v6->effect;
      Postload_FxCombinedDef(NotAtStart);
      varFxCombinedDef = v7;
      v8 = varSndAliasLookup;
      varSndAliasLookup = &varClientOneshotEffectDef->effectSound;
      Postload_SndAliasLookup(NotAtStart);
      ++i;
      varSndAliasLookup = v8;
    }
    varClientOneshotEffectDef = v3;
  }
  v9 = varClientSideEffects;
  if ( varClientSideEffects->oneshotEffectsTree )
  {
    v10 = varSpatialPartition_Tree;
    v11 = AllocPostload_SpatialPartition_Tree();
    v9->oneshotEffectsTree = v11;
    varSpatialPartition_Tree = v11;
    Postload_SpatialPartition_Tree(AtStart);
    varSpatialPartition_Tree = v10;
  }
  v12 = varClientSideEffects;
  if ( varClientSideEffects->oneshotSoundIndices )
  {
    v13 = varuint;
    v14 = AllocPostload_uint();
    v12->oneshotSoundIndices = v14;
    varuint = v14;
    Postload_uintArray(AtStart, varClientSideEffects->oneshotSoundCount);
    varuint = v13;
  }
  v15 = varClientSideEffects;
  if ( varClientSideEffects->exploders )
  {
    v16 = varClientExploderDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v15->exploders = (ClientExploderDef *)g_streamPosGlob.pos;
    varClientExploderDef = (ClientExploderDef *)g_streamPosGlob.pos;
    exploderCount = varClientSideEffects->exploderCount;
    v18 = exploderCount << 6;
    if ( exploderCount << 6 )
    {
      if ( v18 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v18);
    }
    for ( j = varClientExploderDef; exploderCount; --exploderCount )
    {
      varClientExploderDef = j;
      Postload_ClientExploderDef(NotAtStart);
      ++j;
    }
    varClientExploderDef = v16;
  }
  v20 = varClientSideEffects;
  if ( varClientSideEffects->intervalSounds )
  {
    v21 = varClientIntervalSoundDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v20->intervalSounds = (ClientIntervalSoundDef *)g_streamPosGlob.pos;
    varClientIntervalSoundDef = (ClientIntervalSoundDef *)g_streamPosGlob.pos;
    intervalSoundCount = varClientSideEffects->intervalSoundCount;
    if ( 48 * intervalSoundCount )
    {
      if ( (unsigned __int64)(48 * intervalSoundCount) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(48 * intervalSoundCount);
    }
    for ( k = varClientIntervalSoundDef; intervalSoundCount; --intervalSoundCount )
    {
      v24 = k;
      varClientIntervalSoundDef = k;
      if ( k == (ClientIntervalSoundDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, k, 0x30ui64);
        v24 = varClientIntervalSoundDef;
      }
      v25 = varSndAliasLookup;
      varSndAliasLookup = &v24->effectSound;
      Postload_SndAliasLookup(NotAtStart);
      v26 = varClientIntervalSoundDef;
      varSndAliasLookup = v25;
      if ( varClientIntervalSoundDef->aliasList )
      {
        v27 = varSndAliasList;
        v28 = AllocPostload_SndAliasList();
        v26->aliasList = v28;
        varSndAliasList = v28;
        Postload_SndAliasList(AtStart);
        varSndAliasList = v27;
      }
      ++k;
    }
    varClientIntervalSoundDef = v21;
  }
  v29 = varClientSideEffects;
  if ( varClientSideEffects->loopSounds )
  {
    v30 = varClientLoopSoundDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v29->loopSounds = (ClientLoopSoundDef *)g_streamPosGlob.pos;
    varClientLoopSoundDef = (ClientLoopSoundDef *)g_streamPosGlob.pos;
    loopSoundCount = varClientSideEffects->loopSoundCount;
    if ( 40 * loopSoundCount )
    {
      if ( (unsigned __int64)(40 * loopSoundCount) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(40 * loopSoundCount);
    }
    for ( m = varClientLoopSoundDef; loopSoundCount; --loopSoundCount )
    {
      v33 = m;
      varClientLoopSoundDef = m;
      if ( m == (ClientLoopSoundDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, m, 0x28ui64);
        v33 = varClientLoopSoundDef;
      }
      v34 = varSndAliasLookup;
      varSndAliasLookup = &v33->effectSound;
      Postload_SndAliasLookup(NotAtStart);
      v35 = varClientLoopSoundDef;
      varSndAliasLookup = v34;
      if ( varClientLoopSoundDef->aliasList )
      {
        v36 = varSndAliasList;
        v37 = AllocPostload_SndAliasList();
        v35->aliasList = v37;
        varSndAliasList = v37;
        Postload_SndAliasList(AtStart);
        varSndAliasList = v36;
      }
      ++m;
    }
    varClientLoopSoundDef = v30;
  }
  v38 = varClientSideEffects;
  if ( varClientSideEffects->soundsSpatialTree )
  {
    v39 = varSpatialPartition_Tree;
    v40 = AllocPostload_SpatialPartition_Tree();
    v38->soundsSpatialTree = v40;
    varSpatialPartition_Tree = v40;
    Postload_SpatialPartition_Tree(AtStart);
    varSpatialPartition_Tree = v39;
  }
  v41 = varClientSideEffects;
  if ( varClientSideEffects->reactiveEnts )
  {
    v42 = varClientReactiveEntDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v41->reactiveEnts = (ClientReactiveEntDef *)g_streamPosGlob.pos;
    varClientReactiveEntDef = (ClientReactiveEntDef *)g_streamPosGlob.pos;
    reactiveEntCount = varClientSideEffects->reactiveEntCount;
    if ( 56 * reactiveEntCount )
    {
      if ( (unsigned __int64)(56 * reactiveEntCount) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(56 * reactiveEntCount);
    }
    for ( n = varClientReactiveEntDef; reactiveEntCount; --reactiveEntCount )
    {
      varClientReactiveEntDef = n;
      Postload_ClientReactiveEntDef(NotAtStart);
      ++n;
    }
    varClientReactiveEntDef = v42;
  }
  v45 = varClientSideEffects;
  if ( varClientSideEffects->reactiveSpatialTree )
  {
    v46 = varSpatialPartition_Tree;
    v47 = AllocPostload_SpatialPartition_Tree();
    v45->reactiveSpatialTree = v47;
    varSpatialPartition_Tree = v47;
    Postload_SpatialPartition_Tree(AtStart);
    varSpatialPartition_Tree = v46;
  }
  v48 = varClientSideEffects;
  if ( varClientSideEffects->roots )
  {
    v49 = varClientRootDef;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v48->roots = (ClientRootDef *)g_streamPosGlob.pos;
    varClientRootDef = (ClientRootDef *)g_streamPosGlob.pos;
    rootCount = varClientSideEffects->rootCount;
    v51 = 32 * rootCount;
    if ( 32 * rootCount )
    {
      if ( v51 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v51);
    }
    for ( ii = varClientRootDef; rootCount; --rootCount )
    {
      v53 = ii;
      varClientRootDef = ii;
      if ( ii == (ClientRootDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, ii, 0x20ui64);
        v53 = varClientRootDef;
      }
      v54 = varscr_string_t;
      varscr_string_t = &v53->path;
      Postload_scr_string_t(NotAtStart);
      ++ii;
      varscr_string_t = v54;
    }
    varClientRootDef = v49;
  }
  v55 = varClientSideEffects;
  if ( varClientSideEffects->parents )
  {
    v56 = varushort;
    v57 = AllocPostload_ushort();
    v55->parents = v57;
    varushort = v57;
    Postload_ushortArray(AtStart, varClientSideEffects->parentCount);
    varushort = v56;
  }
}

/*
==============
Postload_ClientSideEffectsArray
==============
*/
void Postload_ClientSideEffectsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientSideEffects *i; 

  v2 = count;
  Postload_Stream_7(streamStart, varClientSideEffects, 152 * count);
  for ( i = varClientSideEffects; v2; --v2 )
  {
    varClientSideEffects = i;
    Postload_ClientSideEffects(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ClientSideEffectsStream
==============
*/
void Postload_ClientSideEffectsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 29388, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Postload_ClientSideEffects(AtStart);
    varClientSideEffects = (ClientSideEffects *)g_streamPosGlob.pos;
  }
}

/*
==============
Postload_ClientTriggerBlend
==============
*/
void Postload_ClientTriggerBlend(const DBStreamStart streamStart)
{
  ClientTriggerBlend *v2; 
  ClientTriggerBlendNode *v3; 
  __int64 numClientTriggerBlendNodes; 

  if ( streamStart != (varClientTriggerBlend != (ClientTriggerBlend *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varClientTriggerBlend, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
  v2 = varClientTriggerBlend;
  if ( varClientTriggerBlend->blendNodes )
  {
    v3 = varClientTriggerBlendNode;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->blendNodes = (ClientTriggerBlendNode *)g_streamPosGlob.pos;
    varClientTriggerBlendNode = (ClientTriggerBlendNode *)g_streamPosGlob.pos;
    numClientTriggerBlendNodes = varClientTriggerBlend->numClientTriggerBlendNodes;
    if ( 28 * numClientTriggerBlendNodes )
      DB_IncStreamPos(28 * numClientTriggerBlendNodes);
    varClientTriggerBlendNode = v3;
  }
}

/*
==============
Postload_ClientTriggerBlendArray
==============
*/
void Postload_ClientTriggerBlendArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientTriggerBlend *i; 
  ClientTriggerBlend *v4; 
  ClientTriggerBlendNode *v5; 
  __int64 numClientTriggerBlendNodes; 

  v2 = count;
  Postload_Stream_7(streamStart, varClientTriggerBlend, 16 * count);
  for ( i = varClientTriggerBlend; v2; --v2 )
  {
    v4 = i;
    varClientTriggerBlend = i;
    if ( i == (ClientTriggerBlend *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x10ui64);
      v4 = varClientTriggerBlend;
    }
    if ( v4->blendNodes )
    {
      v5 = varClientTriggerBlendNode;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->blendNodes = (ClientTriggerBlendNode *)g_streamPosGlob.pos;
      varClientTriggerBlendNode = (ClientTriggerBlendNode *)g_streamPosGlob.pos;
      numClientTriggerBlendNodes = varClientTriggerBlend->numClientTriggerBlendNodes;
      if ( 28 * numClientTriggerBlendNodes )
        DB_IncStreamPos(28 * numClientTriggerBlendNodes);
      varClientTriggerBlendNode = v5;
    }
    ++i;
  }
}

/*
==============
Postload_ClientTriggerBlendNode
==============
*/
void Postload_ClientTriggerBlendNode(const DBStreamStart streamStart)
{
  if ( streamStart != (varClientTriggerBlendNode != (ClientTriggerBlendNode *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varClientTriggerBlendNode, 0x1Cui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x1Cui64);
}

/*
==============
Postload_ClientTriggerBlendNodeArray
==============
*/
void Postload_ClientTriggerBlendNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_7(streamStart, varClientTriggerBlendNode, 28 * count);
}

/*
==============
Postload_ClientTriggerBlendNodeStream
==============
*/
void Postload_ClientTriggerBlendNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ClientTriggerBlendNode *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 24043, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varClientTriggerBlendNode;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ClientTriggerBlendNode *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x1Cui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x1Cui64);
      pos = g_streamPosGlob.pos + 28;
      g_streamPosGlob.pos = pos;
      v3 = (ClientTriggerBlendNode *)pos;
      varClientTriggerBlendNode = (ClientTriggerBlendNode *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ClientTriggerBlendStream
==============
*/
void Postload_ClientTriggerBlendStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ClientTriggerBlend *v3; 
  unsigned __int8 *pos; 
  ClientTriggerBlend *v5; 
  ClientTriggerBlendNode *v6; 
  __int64 numClientTriggerBlendNodes; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 24145, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varClientTriggerBlend;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ClientTriggerBlend *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x10ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      v5 = varClientTriggerBlend;
      pos = g_streamPosGlob.pos + 16;
      g_streamPosGlob.pos += 16;
      if ( varClientTriggerBlend->blendNodes )
      {
        v6 = varClientTriggerBlendNode;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v5->blendNodes = (ClientTriggerBlendNode *)g_streamPosGlob.pos;
        pos = g_streamPosGlob.pos;
        varClientTriggerBlendNode = (ClientTriggerBlendNode *)g_streamPosGlob.pos;
        numClientTriggerBlendNodes = varClientTriggerBlend->numClientTriggerBlendNodes;
        if ( 28 * numClientTriggerBlendNodes )
        {
          DB_IncStreamPos(28 * numClientTriggerBlendNodes);
          pos = g_streamPosGlob.pos;
        }
        varClientTriggerBlendNode = v6;
      }
      varClientTriggerBlend = (ClientTriggerBlend *)pos;
      v3 = (ClientTriggerBlend *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ClientTriggerHull
==============
*/
void Postload_ClientTriggerHull(const DBStreamStart streamStart)
{
  if ( streamStart != (varClientTriggerHull != (ClientTriggerHull *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varClientTriggerHull, 0x20ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x20ui64);
}

/*
==============
Postload_ClientTriggerHullArray
==============
*/
void Postload_ClientTriggerHullArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_7(streamStart, varClientTriggerHull, 32 * count);
}

/*
==============
Postload_ClientTriggerHullStream
==============
*/
void Postload_ClientTriggerHullStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ClientTriggerHull *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 22272, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varClientTriggerHull;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ClientTriggerHull *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x20ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x20ui64);
      pos = g_streamPosGlob.pos + 32;
      g_streamPosGlob.pos = pos;
      v3 = (ClientTriggerHull *)pos;
      varClientTriggerHull = (ClientTriggerHull *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ClientTriggerModel
==============
*/
void Postload_ClientTriggerModel(const DBStreamStart streamStart)
{
  if ( streamStart != (varClientTriggerModel != (ClientTriggerModel *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varClientTriggerModel, 0xCui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0xCui64);
}

/*
==============
Postload_ClientTriggerModelArray
==============
*/
void Postload_ClientTriggerModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_7(streamStart, varClientTriggerModel, 12 * count);
}

/*
==============
Postload_ClientTriggerModelStream
==============
*/
void Postload_ClientTriggerModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ClientTriggerModel *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 22394, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varClientTriggerModel;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ClientTriggerModel *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0xCui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0xCui64);
      pos = g_streamPosGlob.pos + 12;
      g_streamPosGlob.pos = pos;
      v3 = (ClientTriggerModel *)pos;
      varClientTriggerModel = (ClientTriggerModel *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ClientTriggers
==============
*/
void Postload_ClientTriggers(const DBStreamStart streamStart)
{
  ClientMapTriggers *v2; 
  ClientTriggers *v3; 
  char *v4; 
  char *v5; 
  ClientTriggers *v6; 
  __int16 *v7; 
  __int16 *v8; 
  ClientTriggers *v9; 
  unsigned __int16 *v10; 
  unsigned __int16 *v11; 
  ClientTriggers *v12; 
  vec3_t *v13; 
  vec3_t *v14; 
  ClientTriggers *v15; 
  float *v16; 
  float *v17; 
  ClientTriggers *v18; 
  float *v19; 
  ClientTriggers *v20; 
  __int16 *v21; 
  __int16 *v22; 
  ClientTriggers *v23; 
  __int16 *v24; 
  __int16 *v25; 
  ClientTriggers *v26; 
  __int16 *v27; 
  __int16 *v28; 
  ClientTriggers *v29; 
  __int16 *v30; 
  __int16 *v31; 
  ClientTriggers *v32; 
  SndBankTransient **v33; 
  SndBankTransient **v34; 
  ClientTriggers *v35; 
  CTAudRvbPanInfo *v36; 
  unsigned __int64 v37; 
  ClientTriggers *v38; 
  __int16 *v39; 
  __int16 *v40; 
  ClientTriggers *v41; 
  ClientEntityLinkToDef **v42; 
  __int64 count; 
  ClientEntityLinkToDef **v44; 
  unsigned __int64 *v45; 
  unsigned __int64 v46; 
  ClientEntityLinkToDef *v47; 
  ClientEntityLinkToDef *v48; 
  ClientTriggers *v49; 
  SpatialPartition_Tree *v50; 
  SpatialPartition_Tree *v51; 

  if ( streamStart != (varClientTriggers != (ClientTriggers *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varClientTriggers, 0xB0ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0xB0ui64);
  v2 = varClientMapTriggers;
  varClientMapTriggers = &varClientTriggers->trigger;
  Postload_ClientMapTriggers(NotAtStart);
  v3 = varClientTriggers;
  varClientMapTriggers = v2;
  if ( varClientTriggers->triggerString )
  {
    v4 = varchar;
    v5 = AllocPostload_char();
    v3->triggerString = v5;
    varchar = v5;
    Postload_charArray(AtStart, varClientTriggers->triggerStringLength);
    varchar = v4;
  }
  v6 = varClientTriggers;
  if ( varClientTriggers->visionSetTriggers )
  {
    v7 = varshort;
    v8 = AllocPostload_short();
    v6->visionSetTriggers = v8;
    varshort = v8;
    Postload_shortArray(AtStart, varClientTriggers->trigger.count);
    varshort = v7;
  }
  v9 = varClientTriggers;
  if ( varClientTriggers->triggerType )
  {
    v10 = varuint16_t;
    v11 = AllocPostload_uint16_t();
    v9->triggerType = v11;
    varuint16_t = v11;
    Postload_uint16_tArray(AtStart, varClientTriggers->trigger.count);
    varuint16_t = v10;
  }
  v12 = varClientTriggers;
  if ( varClientTriggers->origins )
  {
    v13 = varvec3_t;
    v14 = AllocPostload_vec3_t();
    v12->origins = v14;
    varvec3_t = v14;
    Postload_vec3_tArray(AtStart, varClientTriggers->trigger.count);
    varvec3_t = v13;
  }
  v15 = varClientTriggers;
  v16 = varfloat;
  if ( varClientTriggers->scriptDelay )
  {
    v17 = AllocPostload_float();
    v15->scriptDelay = v17;
    varfloat = v17;
    Postload_floatArray(AtStart, varClientTriggers->trigger.count);
    varfloat = v16;
  }
  v18 = varClientTriggers;
  if ( varClientTriggers->priority )
  {
    v19 = AllocPostload_float();
    v18->priority = v19;
    varfloat = v19;
    Postload_floatArray(AtStart, varClientTriggers->trigger.count);
    varfloat = v16;
  }
  v20 = varClientTriggers;
  if ( varClientTriggers->audioTriggers )
  {
    v21 = varshort;
    v22 = AllocPostload_short();
    v20->audioTriggers = v22;
    varshort = v22;
    Postload_shortArray(AtStart, varClientTriggers->trigger.count);
    varshort = v21;
  }
  v23 = varClientTriggers;
  if ( varClientTriggers->blendLookup )
  {
    v24 = varshort;
    v25 = AllocPostload_short();
    v23->blendLookup = v25;
    varshort = v25;
    Postload_shortArray(AtStart, varClientTriggers->trigger.count);
    varshort = v24;
  }
  v26 = varClientTriggers;
  if ( varClientTriggers->npcTriggers )
  {
    v27 = varshort;
    v28 = AllocPostload_short();
    v26->npcTriggers = v28;
    varshort = v28;
    Postload_shortArray(AtStart, varClientTriggers->trigger.count);
    varshort = v27;
  }
  v29 = varClientTriggers;
  if ( varClientTriggers->audioStateIds )
  {
    v30 = varshort;
    v31 = AllocPostload_short();
    v29->audioStateIds = v31;
    varshort = v31;
    Postload_shortArray(AtStart, varClientTriggers->trigger.count);
    varshort = v30;
  }
  v32 = varClientTriggers;
  if ( varClientTriggers->detailSoundBank )
  {
    v33 = varSndBankTransientPtr;
    v34 = AllocPostload_SndBankTransientPtr();
    v32->detailSoundBank = v34;
    varSndBankTransientPtr = v34;
    Postload_SndBankTransientPtrArray(AtStart, varClientTriggers->trigger.count);
    varSndBankTransientPtr = v33;
  }
  v35 = varClientTriggers;
  if ( varClientTriggers->audioRvbPanInfo )
  {
    v36 = varCTAudRvbPanInfo;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v35->audioRvbPanInfo = (CTAudRvbPanInfo *)g_streamPosGlob.pos;
    varCTAudRvbPanInfo = (CTAudRvbPanInfo *)g_streamPosGlob.pos;
    v37 = 24i64 * varClientTriggers->trigger.count;
    if ( v37 )
    {
      if ( v37 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v37);
    }
    varCTAudRvbPanInfo = v36;
  }
  v38 = varClientTriggers;
  if ( varClientTriggers->parent )
  {
    v39 = varshort;
    v40 = AllocPostload_short();
    v38->parent = v40;
    varshort = v40;
    Postload_shortArray(AtStart, varClientTriggers->trigger.count);
    varshort = v39;
  }
  v41 = varClientTriggers;
  if ( varClientTriggers->linkTo )
  {
    v42 = varClientEntityLinkToDefPtr;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v41->linkTo = (ClientEntityLinkToDef **)g_streamPosGlob.pos;
    varClientEntityLinkToDefPtr = (ClientEntityLinkToDef **)g_streamPosGlob.pos;
    count = varClientTriggers->trigger.count;
    if ( 8 * count )
    {
      if ( (unsigned __int64)(8 * count) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(8 * count);
    }
    v44 = varClientEntityLinkToDefPtr;
    if ( count )
    {
      while ( 1 )
      {
        v45 = (unsigned __int64 *)v44;
        varClientEntityLinkToDefPtr = v44;
        if ( v44 == (ClientEntityLinkToDef **)g_streamPosGlob.pos )
        {
          DB_PatchMem_ValidatePostloadStream(NotAtStart, v44, 8ui64);
          v45 = (unsigned __int64 *)varClientEntityLinkToDefPtr;
        }
        v46 = *v45;
        if ( !*v45 )
          goto LABEL_52;
        if ( v46 == -1i64 )
          break;
        if ( v46 == -2i64 )
          goto LABEL_50;
        *v45 = (unsigned __int64)DB_ResolvePackedOffsetAddress(*v45);
LABEL_52:
        ++v44;
        if ( !--count )
          goto LABEL_53;
      }
      DB_PushSharedData();
LABEL_50:
      v47 = varClientEntityLinkToDef;
      v48 = AllocPostload_ClientEntityLinkToDef();
      *v45 = (unsigned __int64)v48;
      varClientEntityLinkToDef = v48;
      Postload_ClientEntityLinkToDef(AtStart);
      varClientEntityLinkToDef = v47;
      if ( v46 == -1i64 )
        DB_PopSharedData();
      goto LABEL_52;
    }
LABEL_53:
    varClientEntityLinkToDefPtr = v42;
  }
  v49 = varClientTriggers;
  if ( varClientTriggers->spatialTree )
  {
    v50 = varSpatialPartition_Tree;
    v51 = AllocPostload_SpatialPartition_Tree();
    v49->spatialTree = v51;
    varSpatialPartition_Tree = v51;
    Postload_SpatialPartition_Tree(AtStart);
    varSpatialPartition_Tree = v50;
  }
}

/*
==============
Postload_ClientTriggersArray
==============
*/
void Postload_ClientTriggersArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientTriggers *i; 

  v2 = count;
  Postload_Stream_7(streamStart, varClientTriggers, 176 * count);
  for ( i = varClientTriggers; v2; --v2 )
  {
    varClientTriggers = i;
    Postload_ClientTriggers(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ClientTriggersStream
==============
*/
void Postload_ClientTriggersStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 23898, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Postload_ClientTriggers(AtStart);
    varClientTriggers = (ClientTriggers *)g_streamPosGlob.pos;
  }
}

/*
==============
Postload_CollMapLookupEntry
==============
*/
void Postload_CollMapLookupEntry(const DBStreamStart streamStart)
{
  const char **v2; 

  if ( streamStart != (varCollMapLookupEntry != (CollMapLookupEntry *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varCollMapLookupEntry, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
  v2 = varXString;
  varXString = &varCollMapLookupEntry->targetName;
  Postload_XString(NotAtStart);
  varXString = v2;
}

/*
==============
Postload_CollMapLookupEntryArray
==============
*/
void Postload_CollMapLookupEntryArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  CollMapLookupEntry *i; 
  CollMapLookupEntry *v4; 
  const char **v5; 

  v2 = count;
  Postload_Stream_7(streamStart, varCollMapLookupEntry, 16 * count);
  for ( i = varCollMapLookupEntry; v2; --v2 )
  {
    v4 = i;
    varCollMapLookupEntry = i;
    if ( i == (CollMapLookupEntry *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x10ui64);
      v4 = varCollMapLookupEntry;
    }
    v5 = varXString;
    varXString = &v4->targetName;
    Postload_XString(NotAtStart);
    ++i;
    varXString = v5;
  }
}

/*
==============
Postload_CollMapLookupEntryStream
==============
*/
void Postload_CollMapLookupEntryStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  const char **v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 30875, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varCollMapLookupEntry;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x10ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      v5 = varXString;
      g_streamPosGlob.pos += 16;
      varXString = &varCollMapLookupEntry->targetName;
      Postload_XString(NotAtStart);
      pos = g_streamPosGlob.pos;
      varCollMapLookupEntry = (CollMapLookupEntry *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varXString = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_CollisionHeatmapEntry
==============
*/
void Postload_CollisionHeatmapEntry(const DBStreamStart streamStart)
{
  if ( streamStart != (varCollisionHeatmapEntry != (CollisionHeatmapEntry *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varCollisionHeatmapEntry, 0x20ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x20ui64);
}

/*
==============
Postload_CollisionHeatmapEntryArray
==============
*/
void Postload_CollisionHeatmapEntryArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_7(streamStart, varCollisionHeatmapEntry, 32 * count);
}

/*
==============
Postload_CollisionHeatmapEntryStream
==============
*/
void Postload_CollisionHeatmapEntryStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  CollisionHeatmapEntry *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 26461, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varCollisionHeatmapEntry;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (CollisionHeatmapEntry *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x20ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x20ui64);
      pos = g_streamPosGlob.pos + 32;
      g_streamPosGlob.pos = pos;
      v3 = (CollisionHeatmapEntry *)pos;
      varCollisionHeatmapEntry = (CollisionHeatmapEntry *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_CollisionTile
==============
*/
void Postload_CollisionTile(const DBStreamStart streamStart)
{
  const char **v2; 
  CollisionTile *v3; 
  StaticModelCollisionCompressedModelList *v4; 
  CollisionTile *v5; 
  char *v6; 
  unsigned __int64 havokTileShapeDataSize; 
  CollisionTile *v8; 
  char *v9; 
  char *v10; 

  DB_PatchMem_PostLoad_PushAsset(103, varCollisionTile);
  if ( streamStart != (varCollisionTile != (CollisionTile *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varCollisionTile, 0x48ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x48ui64);
  DB_PushStreamPos(8u);
  v2 = varXString;
  varXString = &varCollisionTile->name;
  Postload_XString(NotAtStart);
  v3 = varCollisionTile;
  varXString = v2;
  if ( varCollisionTile->staticModelCollision )
  {
    v4 = varStaticModelCollisionCompressedModelList;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v3->staticModelCollision = (StaticModelCollisionCompressedModelList *)g_streamPosGlob.pos;
    varStaticModelCollisionCompressedModelList = (StaticModelCollisionCompressedModelList *)g_streamPosGlob.pos;
    Postload_StaticModelCollisionCompressedModelList(AtStart);
    varStaticModelCollisionCompressedModelList = v4;
  }
  v5 = varCollisionTile;
  if ( varCollisionTile->havokTileShapeData )
  {
    v6 = varalignHavokShapeData_t;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->havokTileShapeData = (char *)g_streamPosGlob.pos;
    varalignHavokShapeData_t = (char *)g_streamPosGlob.pos;
    havokTileShapeDataSize = varCollisionTile->havokTileShapeDataSize;
    if ( varCollisionTile->havokTileShapeDataSize )
    {
      if ( havokTileShapeDataSize > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(havokTileShapeDataSize);
    }
    varalignHavokShapeData_t = v6;
  }
  v8 = varCollisionTile;
  if ( varCollisionTile->havokTileShapePointer )
  {
    v9 = varchar;
    v10 = AllocPostload_char();
    v8->havokTileShapePointer = v10;
    varchar = v10;
    Postload_char(AtStart);
    varchar = v9;
  }
  DB_PopStreamPos();
  DB_PatchMem_PopAsset();
}

/*
==============
Postload_CollisionTileArray
==============
*/
void Postload_CollisionTileArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  CollisionTile *i; 

  v2 = count;
  Postload_Stream_7(streamStart, varCollisionTile, 72 * count);
  for ( i = varCollisionTile; v2; --v2 )
  {
    varCollisionTile = i;
    Postload_CollisionTile(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_CollisionTilePtr
==============
*/
void Postload_CollisionTilePtr(const DBStreamStart streamStart)
{
  unsigned __int8 *inserted; 
  CollisionTile **v3; 
  __int64 v4; 
  CollisionTile *v5; 

  inserted = NULL;
  if ( streamStart != (varCollisionTilePtr != (CollisionTile **)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varCollisionTilePtr, 8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(8ui64);
  DB_PushStreamPos(2u);
  v3 = varCollisionTilePtr;
  v4 = (__int64)*varCollisionTilePtr;
  if ( *varCollisionTilePtr )
  {
    if ( v4 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v4 != -2 && v4 != -3 )
    {
      DB_ConvertOffsetToAlias((unsigned __int64 *)varCollisionTilePtr);
      goto LABEL_17;
    }
    v5 = varCollisionTile;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    *v3 = (CollisionTile *)g_streamPosGlob.pos;
    varCollisionTile = (CollisionTile *)g_streamPosGlob.pos;
    if ( v4 == -3 )
      inserted = DB_InsertPointer();
    Postload_CollisionTile(AtStart);
    Load_CollisionTile(v3);
    varCollisionTile = v5;
    if ( inserted )
      *(_QWORD *)inserted = *v3;
    if ( v4 == -1 )
      DB_PopSharedData();
  }
LABEL_17:
  DB_PopStreamPos();
}

/*
==============
Postload_CollisionTilePtrArray
==============
*/
void Postload_CollisionTilePtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  CollisionTile **i; 

  v2 = count;
  Postload_Stream_7(streamStart, varCollisionTilePtr, 8 * count);
  for ( i = varCollisionTilePtr; v2; --v2 )
  {
    varCollisionTilePtr = i;
    Postload_CollisionTilePtr(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_CollisionTilePtrStream
==============
*/
void Postload_CollisionTilePtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  CollisionTile **v5; 
  __int64 v6; 
  CollisionTile *v7; 
  unsigned __int8 *inserted; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 33366, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varCollisionTilePtr;
    pos = g_streamPosGlob.pos;
    while ( 1 )
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 8ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(8ui64);
      g_streamPosGlob.pos += 8;
      DB_PushStreamPos(2u);
      v5 = varCollisionTilePtr;
      v6 = (__int64)*varCollisionTilePtr;
      if ( !*varCollisionTilePtr )
        goto LABEL_23;
      if ( v6 == -1 )
        break;
      if ( v6 == -2 || v6 == -3 )
        goto LABEL_17;
      DB_ConvertOffsetToAlias((unsigned __int64 *)varCollisionTilePtr);
LABEL_23:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varCollisionTilePtr = (CollisionTile **)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_17:
    v7 = varCollisionTile;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    inserted = NULL;
    *v5 = (CollisionTile *)g_streamPosGlob.pos;
    varCollisionTile = (CollisionTile *)g_streamPosGlob.pos;
    if ( v6 == -3 )
      inserted = DB_InsertPointer();
    Postload_CollisionTile(AtStart);
    Load_CollisionTile(v5);
    varCollisionTile = v7;
    if ( inserted )
      *(_QWORD *)inserted = *v5;
    if ( v6 == -1 )
      DB_PopSharedData();
    goto LABEL_23;
  }
}

/*
==============
Postload_CollisionTileStream
==============
*/
void Postload_CollisionTileStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  const char **v5; 
  CollisionTile *v6; 
  StaticModelCollisionCompressedModelList *v7; 
  CollisionTile *v8; 
  char *v9; 
  unsigned __int64 havokTileShapeDataSize; 
  CollisionTile *v11; 
  char *v12; 
  char *v13; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 33239, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varCollisionTile;
    do
    {
      DB_PatchMem_PostLoad_PushAsset(103, v3);
      pos = g_streamPosGlob.pos;
      if ( varCollisionTile != (CollisionTile *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, varCollisionTile, 0x48ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x48ui64);
      g_streamPosGlob.pos += 72;
      DB_PushStreamPos(8u);
      v5 = varXString;
      varXString = &varCollisionTile->name;
      Postload_XString(NotAtStart);
      v6 = varCollisionTile;
      varXString = v5;
      if ( varCollisionTile->staticModelCollision )
      {
        v7 = varStaticModelCollisionCompressedModelList;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v6->staticModelCollision = (StaticModelCollisionCompressedModelList *)g_streamPosGlob.pos;
        varStaticModelCollisionCompressedModelList = (StaticModelCollisionCompressedModelList *)g_streamPosGlob.pos;
        Postload_StaticModelCollisionCompressedModelList(AtStart);
        varStaticModelCollisionCompressedModelList = v7;
      }
      v8 = varCollisionTile;
      if ( varCollisionTile->havokTileShapeData )
      {
        v9 = varalignHavokShapeData_t;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        v8->havokTileShapeData = (char *)g_streamPosGlob.pos;
        varalignHavokShapeData_t = (char *)g_streamPosGlob.pos;
        havokTileShapeDataSize = varCollisionTile->havokTileShapeDataSize;
        if ( varCollisionTile->havokTileShapeDataSize )
        {
          if ( havokTileShapeDataSize > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(havokTileShapeDataSize);
        }
        varalignHavokShapeData_t = v9;
      }
      v11 = varCollisionTile;
      if ( varCollisionTile->havokTileShapePointer )
      {
        v12 = varchar;
        v13 = AllocPostload_char();
        v11->havokTileShapePointer = v13;
        varchar = v13;
        Postload_char(AtStart);
        varchar = v12;
      }
      DB_PopStreamPos();
      DB_PatchMem_PopAsset();
      v3 = g_streamPosGlob.pos;
      varCollisionTile = (CollisionTile *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_CreateFxAssetData
==============
*/
void Postload_CreateFxAssetData(const DBStreamStart streamStart)
{
  CreateFxAssetData *v2; 
  CreateFxPaletteDef *v3; 
  __int64 fxPaletteCount; 
  CreateFxPaletteDef *i; 
  CreateFxPaletteDef *v6; 
  scr_string_t *v7; 

  if ( streamStart != (varCreateFxAssetData != (CreateFxAssetData *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varCreateFxAssetData, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
  v2 = varCreateFxAssetData;
  if ( varCreateFxAssetData->fxPalette )
  {
    v3 = varCreateFxPaletteDef;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->fxPalette = (CreateFxPaletteDef *)g_streamPosGlob.pos;
    varCreateFxPaletteDef = (CreateFxPaletteDef *)g_streamPosGlob.pos;
    fxPaletteCount = varCreateFxAssetData->fxPaletteCount;
    if ( 12 * fxPaletteCount )
      DB_IncStreamPos(12 * fxPaletteCount);
    for ( i = varCreateFxPaletteDef; fxPaletteCount; --fxPaletteCount )
    {
      v6 = i;
      varCreateFxPaletteDef = i;
      if ( i == (CreateFxPaletteDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0xCui64);
        v6 = varCreateFxPaletteDef;
      }
      v7 = varscr_string_t;
      varscr_string_t = &v6->aliasName;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = &varCreateFxPaletteDef->effectPath;
      Postload_scr_string_t(NotAtStart);
      ++i;
      varscr_string_t = v7;
    }
    varCreateFxPaletteDef = v3;
  }
}

/*
==============
Postload_CreateFxAssetDataArray
==============
*/
void Postload_CreateFxAssetDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  CreateFxAssetData *i; 

  v2 = count;
  Postload_Stream_7(streamStart, varCreateFxAssetData, 16 * count);
  for ( i = varCreateFxAssetData; v2; --v2 )
  {
    varCreateFxAssetData = i;
    Postload_CreateFxAssetData(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_CreateFxAssetDataStream
==============
*/
void Postload_CreateFxAssetDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  CreateFxAssetData *v4; 
  CreateFxPaletteDef *v5; 
  __int64 fxPaletteCount; 
  CreateFxPaletteDef *i; 
  CreateFxPaletteDef *v8; 
  scr_string_t *v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 29632, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varCreateFxAssetData;
    do
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x10ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      v4 = varCreateFxAssetData;
      g_streamPosGlob.pos += 16;
      if ( varCreateFxAssetData->fxPalette )
      {
        v5 = varCreateFxPaletteDef;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->fxPalette = (CreateFxPaletteDef *)g_streamPosGlob.pos;
        varCreateFxPaletteDef = (CreateFxPaletteDef *)g_streamPosGlob.pos;
        fxPaletteCount = varCreateFxAssetData->fxPaletteCount;
        if ( 12 * fxPaletteCount )
          DB_IncStreamPos(12 * fxPaletteCount);
        for ( i = varCreateFxPaletteDef; fxPaletteCount; --fxPaletteCount )
        {
          v8 = i;
          varCreateFxPaletteDef = i;
          if ( i == (CreateFxPaletteDef *)g_streamPosGlob.pos )
          {
            DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0xCui64);
            v8 = varCreateFxPaletteDef;
          }
          v9 = varscr_string_t;
          varscr_string_t = &v8->aliasName;
          Postload_scr_string_t(NotAtStart);
          varscr_string_t = &varCreateFxPaletteDef->effectPath;
          Postload_scr_string_t(NotAtStart);
          ++i;
          varscr_string_t = v9;
        }
        varCreateFxPaletteDef = v5;
      }
      pos = g_streamPosGlob.pos;
      varCreateFxAssetData = (CreateFxAssetData *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_CreateFxPaletteDef
==============
*/
void Postload_CreateFxPaletteDef(const DBStreamStart streamStart)
{
  scr_string_t *v2; 

  if ( streamStart != (varCreateFxPaletteDef != (CreateFxPaletteDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varCreateFxPaletteDef, 0xCui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0xCui64);
  v2 = varscr_string_t;
  varscr_string_t = &varCreateFxPaletteDef->aliasName;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = &varCreateFxPaletteDef->effectPath;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = v2;
}

/*
==============
Postload_CreateFxPaletteDefArray
==============
*/
void Postload_CreateFxPaletteDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  CreateFxPaletteDef *i; 
  CreateFxPaletteDef *v4; 
  scr_string_t *v5; 

  v2 = count;
  Postload_Stream_7(streamStart, varCreateFxPaletteDef, 12 * count);
  for ( i = varCreateFxPaletteDef; v2; --v2 )
  {
    v4 = i;
    varCreateFxPaletteDef = i;
    if ( i == (CreateFxPaletteDef *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0xCui64);
      v4 = varCreateFxPaletteDef;
    }
    v5 = varscr_string_t;
    varscr_string_t = &v4->aliasName;
    Postload_scr_string_t(NotAtStart);
    varscr_string_t = &varCreateFxPaletteDef->effectPath;
    Postload_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v5;
  }
}

/*
==============
Postload_CreateFxPaletteDefStream
==============
*/
void Postload_CreateFxPaletteDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  scr_string_t *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 29520, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varCreateFxPaletteDef;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0xCui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0xCui64);
      v5 = varscr_string_t;
      g_streamPosGlob.pos += 12;
      varscr_string_t = &varCreateFxPaletteDef->aliasName;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = &varCreateFxPaletteDef->effectPath;
      Postload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varCreateFxPaletteDef = (CreateFxPaletteDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varscr_string_t = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_DynEntityList
==============
*/
void Postload_DynEntityList(const DBStreamStart streamStart)
{
  const char **v2; 
  DynEntityList *v3; 
  DynEntityDef *v4; 
  DynEntityDef *v5; 
  DynEntityDef *v6; 
  SpatialPartition_TransientPopulation **v7; 

  DB_PatchMem_PostLoad_PushAsset(109, varDynEntityList);
  if ( streamStart != (varDynEntityList != (DynEntityList *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varDynEntityList, 0x40ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x40ui64);
  DB_PushStreamPos(8u);
  v2 = varXString;
  varXString = &varDynEntityList->name;
  Postload_XString(NotAtStart);
  v3 = varDynEntityList;
  varXString = v2;
  v4 = varDynEntityDef;
  if ( varDynEntityList->dynEntDefList[0] )
  {
    v5 = AllocPostload_DynEntityDef();
    v3->dynEntDefList[0] = v5;
    varDynEntityDef = v5;
    Postload_DynEntityDefArray(AtStart, varDynEntityList->dynEntCount[0]);
    v3 = varDynEntityList;
    varDynEntityDef = v4;
  }
  if ( v3->dynEntDefList[1] )
  {
    v6 = AllocPostload_DynEntityDef();
    v3->dynEntDefList[1] = v6;
    varDynEntityDef = v6;
    Postload_DynEntityDefArray(AtStart, varDynEntityList->dynEntCount[1]);
    v3 = varDynEntityList;
    varDynEntityDef = v4;
  }
  v7 = varSpatialPartition_TransientPopulationPtr;
  varSpatialPartition_TransientPopulationPtr = v3->dynEntSpatialPopulation;
  Postload_SpatialPartition_TransientPopulationPtrArray(NotAtStart, 2ui64);
  varSpatialPartition_TransientPopulationPtr = v7;
  DB_PopStreamPos();
  DB_PatchMem_PopAsset();
}

/*
==============
Postload_DynEntityListArray
==============
*/
void Postload_DynEntityListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  DynEntityList *i; 

  v2 = count;
  Postload_Stream_7(streamStart, varDynEntityList, count << 6);
  for ( i = varDynEntityList; v2; --v2 )
  {
    varDynEntityList = i;
    Postload_DynEntityList(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_DynEntityListPtr
==============
*/
void Postload_DynEntityListPtr(const DBStreamStart streamStart)
{
  unsigned __int8 *inserted; 
  DynEntityList **v3; 
  __int64 v4; 
  DynEntityList *v5; 

  inserted = NULL;
  if ( streamStart != (varDynEntityListPtr != (DynEntityList **)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varDynEntityListPtr, 8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(8ui64);
  DB_PushStreamPos(2u);
  v3 = varDynEntityListPtr;
  v4 = (__int64)*varDynEntityListPtr;
  if ( *varDynEntityListPtr )
  {
    if ( v4 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v4 != -2 && v4 != -3 )
    {
      DB_ConvertOffsetToAlias((unsigned __int64 *)varDynEntityListPtr);
      goto LABEL_17;
    }
    v5 = varDynEntityList;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    *v3 = (DynEntityList *)g_streamPosGlob.pos;
    varDynEntityList = (DynEntityList *)g_streamPosGlob.pos;
    if ( v4 == -3 )
      inserted = DB_InsertPointer();
    Postload_DynEntityList(AtStart);
    Load_DynEntityList(v3);
    varDynEntityList = v5;
    if ( inserted )
      *(_QWORD *)inserted = *v3;
    if ( v4 == -1 )
      DB_PopSharedData();
  }
LABEL_17:
  DB_PopStreamPos();
}

/*
==============
Postload_DynEntityListPtrArray
==============
*/
void Postload_DynEntityListPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  DynEntityList **i; 

  v2 = count;
  Postload_Stream_7(streamStart, varDynEntityListPtr, 8 * count);
  for ( i = varDynEntityListPtr; v2; --v2 )
  {
    varDynEntityListPtr = i;
    Postload_DynEntityListPtr(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_DynEntityListPtrStream
==============
*/
void Postload_DynEntityListPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  DynEntityList **v5; 
  __int64 v6; 
  DynEntityList *v7; 
  unsigned __int8 *inserted; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 30061, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varDynEntityListPtr;
    pos = g_streamPosGlob.pos;
    while ( 1 )
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 8ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(8ui64);
      g_streamPosGlob.pos += 8;
      DB_PushStreamPos(2u);
      v5 = varDynEntityListPtr;
      v6 = (__int64)*varDynEntityListPtr;
      if ( !*varDynEntityListPtr )
        goto LABEL_23;
      if ( v6 == -1 )
        break;
      if ( v6 == -2 || v6 == -3 )
        goto LABEL_17;
      DB_ConvertOffsetToAlias((unsigned __int64 *)varDynEntityListPtr);
LABEL_23:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varDynEntityListPtr = (DynEntityList **)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_17:
    v7 = varDynEntityList;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    inserted = NULL;
    *v5 = (DynEntityList *)g_streamPosGlob.pos;
    varDynEntityList = (DynEntityList *)g_streamPosGlob.pos;
    if ( v6 == -3 )
      inserted = DB_InsertPointer();
    Postload_DynEntityList(AtStart);
    Load_DynEntityList(v5);
    varDynEntityList = v7;
    if ( inserted )
      *(_QWORD *)inserted = *v5;
    if ( v6 == -1 )
      DB_PopSharedData();
    goto LABEL_23;
  }
}

/*
==============
Postload_DynEntityListStream
==============
*/
void Postload_DynEntityListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  const char **v5; 
  DynEntityList *v6; 
  DynEntityDef *v7; 
  DynEntityDef *v8; 
  DynEntityDef *v9; 
  SpatialPartition_TransientPopulation **v10; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 29934, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varDynEntityList;
    do
    {
      DB_PatchMem_PostLoad_PushAsset(109, v3);
      pos = g_streamPosGlob.pos;
      if ( varDynEntityList != (DynEntityList *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, varDynEntityList, 0x40ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x40ui64);
      g_streamPosGlob.pos += 64;
      DB_PushStreamPos(8u);
      v5 = varXString;
      varXString = &varDynEntityList->name;
      Postload_XString(NotAtStart);
      v6 = varDynEntityList;
      varXString = v5;
      v7 = varDynEntityDef;
      if ( varDynEntityList->dynEntDefList[0] )
      {
        v8 = AllocPostload_DynEntityDef();
        v6->dynEntDefList[0] = v8;
        varDynEntityDef = v8;
        Postload_DynEntityDefArray(AtStart, varDynEntityList->dynEntCount[0]);
        v6 = varDynEntityList;
        varDynEntityDef = v7;
      }
      if ( v6->dynEntDefList[1] )
      {
        v9 = AllocPostload_DynEntityDef();
        v6->dynEntDefList[1] = v9;
        varDynEntityDef = v9;
        Postload_DynEntityDefArray(AtStart, varDynEntityList->dynEntCount[1]);
        v6 = varDynEntityList;
        varDynEntityDef = v7;
      }
      v10 = varSpatialPartition_TransientPopulationPtr;
      varSpatialPartition_TransientPopulationPtr = v6->dynEntSpatialPopulation;
      Postload_SpatialPartition_TransientPopulationPtrArray(NotAtStart, 2ui64);
      varSpatialPartition_TransientPopulationPtr = v10;
      DB_PopStreamPos();
      DB_PatchMem_PopAsset();
      v3 = g_streamPosGlob.pos;
      varDynEntityList = (DynEntityList *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_MapEdgeList
==============
*/
void Postload_MapEdgeList(const DBStreamStart streamStart)
{
  const char **v2; 
  MapEdgeList *v3; 
  float4 (*v4)[2]; 
  float4 (*v5)[2]; 
  FlaggedEdgeMetadata *v6; 
  FlaggedEdgeMetadata *v7; 
  PMROctreeMetadata *v8; 
  PMROctreeMetadata *v9; 
  PMROctreeNodeSet *v10; 
  PMROctreeNodeSet *v11; 
  unsigned int *v12; 
  unsigned int *v13; 
  EdgeAdjacencyMetadata *v14; 
  EdgeAdjacencyMetadata *v15; 
  EdgeAdjacency *v16; 
  EdgeAdjacency *v17; 

  DB_PatchMem_PostLoad_PushAsset(112, varMapEdgeList);
  if ( streamStart != (varMapEdgeList != (MapEdgeList *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varMapEdgeList, 0xA0ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0xA0ui64);
  DB_PushStreamPos(8u);
  v2 = varXString;
  varXString = &varMapEdgeList->name;
  Postload_XString(NotAtStart);
  v3 = varMapEdgeList;
  varXString = v2;
  if ( varMapEdgeList->edges )
  {
    v4 = varlineSegmentFloat4_t;
    v5 = AllocPostload_lineSegmentFloat4_t();
    v3->edges = v5;
    varlineSegmentFloat4_t = v5;
    Postload_lineSegmentFloat4_tArray(AtStart, varMapEdgeList->numEdges);
    v3 = varMapEdgeList;
    varlineSegmentFloat4_t = v4;
  }
  if ( v3->edgeMetadata )
  {
    v6 = varFlaggedEdgeMetadata;
    v7 = AllocPostload_FlaggedEdgeMetadata();
    v3->edgeMetadata = v7;
    varFlaggedEdgeMetadata = v7;
    Postload_FlaggedEdgeMetadataArray(AtStart, varMapEdgeList->numEdges);
    v3 = varMapEdgeList;
    varFlaggedEdgeMetadata = v6;
  }
  if ( v3->edgeOctrees )
  {
    v8 = varPMROctreeMetadata;
    v9 = AllocPostload_PMROctreeMetadata();
    v3->edgeOctrees = v9;
    varPMROctreeMetadata = v9;
    Postload_PMROctreeMetadataArray(AtStart, varMapEdgeList->numEdgeOctrees);
    v3 = varMapEdgeList;
    varPMROctreeMetadata = v8;
  }
  if ( v3->edgeOctreeNodeSets )
  {
    v10 = varPMROctreeNodeSet;
    v11 = AllocPostload_PMROctreeNodeSet();
    v3->edgeOctreeNodeSets = v11;
    varPMROctreeNodeSet = v11;
    Postload_PMROctreeNodeSetArray(AtStart, varMapEdgeList->numEdgeOctreeNodeSet);
    v3 = varMapEdgeList;
    varPMROctreeNodeSet = v10;
  }
  if ( v3->edgeIndices )
  {
    v12 = varEdgeIndex;
    v13 = AllocPostload_EdgeIndex();
    v3->edgeIndices = v13;
    varEdgeIndex = v13;
    Postload_EdgeIndexArray(AtStart, varMapEdgeList->numEdgeIndices);
    v3 = varMapEdgeList;
    varEdgeIndex = v12;
  }
  if ( v3->edgeAdjacencyMetadata )
  {
    v14 = varEdgeAdjacencyMetadata;
    v15 = AllocPostload_EdgeAdjacencyMetadata();
    v3->edgeAdjacencyMetadata = v15;
    varEdgeAdjacencyMetadata = v15;
    Postload_EdgeAdjacencyMetadataArray(AtStart, varMapEdgeList->numEdgeAdjacencyMetadata);
    v3 = varMapEdgeList;
    varEdgeAdjacencyMetadata = v14;
  }
  if ( v3->edgeAdjacency )
  {
    v16 = varEdgeAdjacency;
    v17 = AllocPostload_EdgeAdjacency();
    v3->edgeAdjacency = v17;
    varEdgeAdjacency = v17;
    Postload_EdgeAdjacencyArray(AtStart, varMapEdgeList->numEdgeAdjacency);
    varEdgeAdjacency = v16;
  }
  DB_PopStreamPos();
  DB_PatchMem_PopAsset();
}

/*
==============
Postload_MapEdgeListArray
==============
*/
void Postload_MapEdgeListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  MapEdgeList *i; 

  v2 = count;
  Postload_Stream_7(streamStart, varMapEdgeList, 160 * count);
  for ( i = varMapEdgeList; v2; --v2 )
  {
    varMapEdgeList = i;
    Postload_MapEdgeList(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_MapEdgeListPtr
==============
*/
void Postload_MapEdgeListPtr(const DBStreamStart streamStart)
{
  unsigned __int8 *inserted; 
  MapEdgeList **v3; 
  __int64 v4; 
  MapEdgeList *v5; 

  inserted = NULL;
  if ( streamStart != (varMapEdgeListPtr != (MapEdgeList **)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varMapEdgeListPtr, 8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(8ui64);
  DB_PushStreamPos(2u);
  v3 = varMapEdgeListPtr;
  v4 = (__int64)*varMapEdgeListPtr;
  if ( *varMapEdgeListPtr )
  {
    if ( v4 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v4 != -2 && v4 != -3 )
    {
      DB_ConvertOffsetToAlias((unsigned __int64 *)varMapEdgeListPtr);
      goto LABEL_17;
    }
    v5 = varMapEdgeList;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    *v3 = (MapEdgeList *)g_streamPosGlob.pos;
    varMapEdgeList = (MapEdgeList *)g_streamPosGlob.pos;
    if ( v4 == -3 )
      inserted = DB_InsertPointer();
    Postload_MapEdgeList(AtStart);
    Load_MapEdgeList(v3);
    varMapEdgeList = v5;
    if ( inserted )
      *(_QWORD *)inserted = *v3;
    if ( v4 == -1 )
      DB_PopSharedData();
  }
LABEL_17:
  DB_PopStreamPos();
}

/*
==============
Postload_MapEdgeListPtrArray
==============
*/
void Postload_MapEdgeListPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  MapEdgeList **i; 

  v2 = count;
  Postload_Stream_7(streamStart, varMapEdgeListPtr, 8 * count);
  for ( i = varMapEdgeListPtr; v2; --v2 )
  {
    varMapEdgeListPtr = i;
    Postload_MapEdgeListPtr(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_MapEdgeListPtrStream
==============
*/
void Postload_MapEdgeListPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  MapEdgeList **v5; 
  __int64 v6; 
  MapEdgeList *v7; 
  unsigned __int8 *inserted; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 30776, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varMapEdgeListPtr;
    pos = g_streamPosGlob.pos;
    while ( 1 )
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 8ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(8ui64);
      g_streamPosGlob.pos += 8;
      DB_PushStreamPos(2u);
      v5 = varMapEdgeListPtr;
      v6 = (__int64)*varMapEdgeListPtr;
      if ( !*varMapEdgeListPtr )
        goto LABEL_23;
      if ( v6 == -1 )
        break;
      if ( v6 == -2 || v6 == -3 )
        goto LABEL_17;
      DB_ConvertOffsetToAlias((unsigned __int64 *)varMapEdgeListPtr);
LABEL_23:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varMapEdgeListPtr = (MapEdgeList **)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_17:
    v7 = varMapEdgeList;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    inserted = NULL;
    *v5 = (MapEdgeList *)g_streamPosGlob.pos;
    varMapEdgeList = (MapEdgeList *)g_streamPosGlob.pos;
    if ( v6 == -3 )
      inserted = DB_InsertPointer();
    Postload_MapEdgeList(AtStart);
    Load_MapEdgeList(v5);
    varMapEdgeList = v7;
    if ( inserted )
      *(_QWORD *)inserted = *v5;
    if ( v6 == -1 )
      DB_PopSharedData();
    goto LABEL_23;
  }
}

/*
==============
Postload_MapEdgeListStream
==============
*/
void Postload_MapEdgeListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  const char **v5; 
  MapEdgeList *v6; 
  float4 (*v7)[2]; 
  float4 (*v8)[2]; 
  FlaggedEdgeMetadata *v9; 
  FlaggedEdgeMetadata *v10; 
  PMROctreeMetadata *v11; 
  PMROctreeMetadata *v12; 
  PMROctreeNodeSet *v13; 
  PMROctreeNodeSet *v14; 
  unsigned int *v15; 
  unsigned int *v16; 
  EdgeAdjacencyMetadata *v17; 
  EdgeAdjacencyMetadata *v18; 
  EdgeAdjacency *v19; 
  EdgeAdjacency *v20; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 30649, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varMapEdgeList;
    do
    {
      DB_PatchMem_PostLoad_PushAsset(112, v3);
      pos = g_streamPosGlob.pos;
      if ( varMapEdgeList != (MapEdgeList *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, varMapEdgeList, 0xA0ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0xA0ui64);
      g_streamPosGlob.pos += 160;
      DB_PushStreamPos(8u);
      v5 = varXString;
      varXString = &varMapEdgeList->name;
      Postload_XString(NotAtStart);
      v6 = varMapEdgeList;
      varXString = v5;
      if ( varMapEdgeList->edges )
      {
        v7 = varlineSegmentFloat4_t;
        v8 = AllocPostload_lineSegmentFloat4_t();
        v6->edges = v8;
        varlineSegmentFloat4_t = v8;
        Postload_lineSegmentFloat4_tArray(AtStart, varMapEdgeList->numEdges);
        v6 = varMapEdgeList;
        varlineSegmentFloat4_t = v7;
      }
      if ( v6->edgeMetadata )
      {
        v9 = varFlaggedEdgeMetadata;
        v10 = AllocPostload_FlaggedEdgeMetadata();
        v6->edgeMetadata = v10;
        varFlaggedEdgeMetadata = v10;
        Postload_FlaggedEdgeMetadataArray(AtStart, varMapEdgeList->numEdges);
        v6 = varMapEdgeList;
        varFlaggedEdgeMetadata = v9;
      }
      if ( v6->edgeOctrees )
      {
        v11 = varPMROctreeMetadata;
        v12 = AllocPostload_PMROctreeMetadata();
        v6->edgeOctrees = v12;
        varPMROctreeMetadata = v12;
        Postload_PMROctreeMetadataArray(AtStart, varMapEdgeList->numEdgeOctrees);
        v6 = varMapEdgeList;
        varPMROctreeMetadata = v11;
      }
      if ( v6->edgeOctreeNodeSets )
      {
        v13 = varPMROctreeNodeSet;
        v14 = AllocPostload_PMROctreeNodeSet();
        v6->edgeOctreeNodeSets = v14;
        varPMROctreeNodeSet = v14;
        Postload_PMROctreeNodeSetArray(AtStart, varMapEdgeList->numEdgeOctreeNodeSet);
        v6 = varMapEdgeList;
        varPMROctreeNodeSet = v13;
      }
      if ( v6->edgeIndices )
      {
        v15 = varEdgeIndex;
        v16 = AllocPostload_EdgeIndex();
        v6->edgeIndices = v16;
        varEdgeIndex = v16;
        Postload_EdgeIndexArray(AtStart, varMapEdgeList->numEdgeIndices);
        v6 = varMapEdgeList;
        varEdgeIndex = v15;
      }
      if ( v6->edgeAdjacencyMetadata )
      {
        v17 = varEdgeAdjacencyMetadata;
        v18 = AllocPostload_EdgeAdjacencyMetadata();
        v6->edgeAdjacencyMetadata = v18;
        varEdgeAdjacencyMetadata = v18;
        Postload_EdgeAdjacencyMetadataArray(AtStart, varMapEdgeList->numEdgeAdjacencyMetadata);
        v6 = varMapEdgeList;
        varEdgeAdjacencyMetadata = v17;
      }
      if ( v6->edgeAdjacency )
      {
        v19 = varEdgeAdjacency;
        v20 = AllocPostload_EdgeAdjacency();
        v6->edgeAdjacency = v20;
        varEdgeAdjacency = v20;
        Postload_EdgeAdjacencyArray(AtStart, varMapEdgeList->numEdgeAdjacency);
        varEdgeAdjacency = v19;
      }
      DB_PopStreamPos();
      DB_PatchMem_PopAsset();
      v3 = g_streamPosGlob.pos;
      varMapEdgeList = (MapEdgeList *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_MapEnts
==============
*/
void Postload_MapEnts(const DBStreamStart streamStart)
{
  const char **v2; 
  MapEnts *v3; 
  char *v4; 
  char *v5; 
  MapTriggers *v6; 
  ClientTriggers *v7; 
  ClientTriggerBlend *v8; 
  SpawnPointRecordList *v9; 
  SplineRecordList *v10; 
  MapEnts *v11; 
  char *v12; 
  unsigned __int64 havokEntsShapeDataSize; 
  MapEnts *v14; 
  cmodel_t *v15; 
  MapEnts *v16; 
  MapEdgeList **v17; 
  __int64 numEdgeLists; 
  MapEdgeList **i; 
  MapEnts *v20; 
  SpatialPartition_Tree *v21; 
  SpatialPartition_Tree *v22; 
  MapEnts *v23; 
  CM_ClientModel *v24; 
  CM_ClientModel *v25; 
  MapEnts *v26; 
  DynEntityListId *v27; 
  DynEntityListId *v28; 
  SpatialPartition_Population **v29; 
  SpatialPartition_Population_TransientMap **v30; 
  MapEnts *v31; 
  ClientEntAnchor *v32; 
  __int64 clientEntAnchorCount; 
  ClientEntAnchor *j; 
  ClientEntAnchor *v35; 
  scr_string_t *v36; 
  ScriptableMapEnts *v37; 
  SpawnGroup *v38; 
  ClientSideEffects *v39; 
  CreateFxAssetData *v40; 
  MapEnts *v41; 
  scr_string_t *v42; 
  scr_string_t *v43; 
  ServerSideEffects *v44; 
  MapEnts *v45; 
  MayhemInstance *mayhemScenes; 
  MayhemInstance *v47; 
  MayhemInstance *v48; 
  SpawnerList *v49; 
  MapEnts *v50; 
  AudioPASpeaker *v51; 
  unsigned __int64 v52; 
  MapEnts *v53; 
  AudioPropagationNode *v54; 
  unsigned __int64 v55; 
  MapEnts *v56; 
  AudioPropagationEdge *v57; 
  unsigned __int64 v58; 
  MapEnts *v59; 
  CollMapLookupEntry *v60; 
  __int64 numCollmaps; 
  unsigned __int64 v62; 
  CollMapLookupEntry *k; 
  CollMapLookupEntry *v64; 
  const char **v65; 

  DB_PatchMem_PostLoad_PushAsset(25, varMapEnts);
  if ( streamStart != (varMapEnts != (MapEnts *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varMapEnts, 0x428ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x428ui64);
  DB_PushStreamPos(8u);
  v2 = varXString;
  varXString = &varMapEnts->name;
  Postload_XString(NotAtStart);
  v3 = varMapEnts;
  varXString = v2;
  if ( varMapEnts->entityString )
  {
    v4 = varchar;
    v5 = AllocPostload_char();
    v3->entityString = v5;
    varchar = v5;
    Postload_charArray(AtStart, varMapEnts->numEntityChars);
    v3 = varMapEnts;
    varchar = v4;
  }
  v6 = varMapTriggers;
  varMapTriggers = &v3->trigger;
  Postload_MapTriggers(NotAtStart);
  varMapTriggers = v6;
  v7 = varClientTriggers;
  varClientTriggers = &varMapEnts->clientTrigger;
  Postload_ClientTriggers(NotAtStart);
  varClientTriggers = v7;
  v8 = varClientTriggerBlend;
  varClientTriggerBlend = &varMapEnts->clientTriggerBlend;
  Postload_ClientTriggerBlend(NotAtStart);
  varClientTriggerBlend = v8;
  v9 = varSpawnPointRecordList;
  varSpawnPointRecordList = &varMapEnts->spawnList;
  Postload_SpawnPointRecordList(NotAtStart);
  varSpawnPointRecordList = v9;
  v10 = varSplineRecordList;
  varSplineRecordList = &varMapEnts->splineList;
  Postload_SplineRecordList(NotAtStart);
  varSplineRecordList = v10;
  v11 = varMapEnts;
  if ( varMapEnts->havokEntsShapeData )
  {
    v12 = varalignHavokShapeData_t;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    v11->havokEntsShapeData = (char *)g_streamPosGlob.pos;
    varalignHavokShapeData_t = (char *)g_streamPosGlob.pos;
    havokEntsShapeDataSize = varMapEnts->havokEntsShapeDataSize;
    if ( varMapEnts->havokEntsShapeDataSize )
    {
      if ( havokEntsShapeDataSize > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(havokEntsShapeDataSize);
    }
    varalignHavokShapeData_t = v12;
  }
  v14 = varMapEnts;
  if ( varMapEnts->cmodels )
  {
    v15 = varcmodel_t;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v14->cmodels = (cmodel_t *)g_streamPosGlob.pos;
    varcmodel_t = (cmodel_t *)g_streamPosGlob.pos;
    Postload_cmodel_tArray(AtStart, varMapEnts->numSubModels);
    varcmodel_t = v15;
  }
  v16 = varMapEnts;
  if ( varMapEnts->edgeLists )
  {
    v17 = varMapEdgeListPtr;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v16->edgeLists = (MapEdgeList **)g_streamPosGlob.pos;
    varMapEdgeListPtr = (MapEdgeList **)g_streamPosGlob.pos;
    numEdgeLists = varMapEnts->numEdgeLists;
    if ( 8 * numEdgeLists )
    {
      if ( (unsigned __int64)(8 * numEdgeLists) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(8 * numEdgeLists);
    }
    for ( i = varMapEdgeListPtr; numEdgeLists; --numEdgeLists )
    {
      varMapEdgeListPtr = i;
      Postload_MapEdgeListPtr(NotAtStart);
      ++i;
    }
    varMapEdgeListPtr = v17;
  }
  v20 = varMapEnts;
  if ( varMapEnts->edgeListSpatialTree )
  {
    v21 = varSpatialPartition_Tree;
    v22 = AllocPostload_SpatialPartition_Tree();
    v20->edgeListSpatialTree = v22;
    varSpatialPartition_Tree = v22;
    Postload_SpatialPartition_Tree(AtStart);
    varSpatialPartition_Tree = v21;
  }
  v23 = varMapEnts;
  if ( varMapEnts->clientModels )
  {
    v24 = varCM_ClientModel;
    v25 = AllocPostload_CM_ClientModel();
    v23->clientModels = v25;
    varCM_ClientModel = v25;
    Postload_CM_ClientModelArray(AtStart, varMapEnts->numClientModels);
    varCM_ClientModel = v24;
  }
  v26 = varMapEnts;
  if ( varMapEnts->dynEntListIds )
  {
    v27 = varDynEntityListId;
    v28 = AllocPostload_DynEntityListId();
    v26->dynEntListIds = v28;
    varDynEntityListId = v28;
    Postload_DynEntityListIdArray(AtStart, (unsigned __int16)varMapEnts->dynEntityListsCount);
    varDynEntityListId = v27;
  }
  v29 = varSpatialPartition_PopulationPtr;
  varSpatialPartition_PopulationPtr = varMapEnts->dynEntSpatialPopulation;
  Postload_SpatialPartition_PopulationPtrArray(NotAtStart, 2ui64);
  varSpatialPartition_PopulationPtr = v29;
  v30 = varSpatialPartition_Population_TransientMapPtr;
  varSpatialPartition_Population_TransientMapPtr = varMapEnts->dynEntSpatialTransientMap;
  Postload_SpatialPartition_Population_TransientMapPtrArray(NotAtStart, 2ui64);
  varSpatialPartition_Population_TransientMapPtr = v30;
  v31 = varMapEnts;
  if ( varMapEnts->clientEntAnchors )
  {
    v32 = varClientEntAnchor;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v31->clientEntAnchors = (ClientEntAnchor *)g_streamPosGlob.pos;
    varClientEntAnchor = (ClientEntAnchor *)g_streamPosGlob.pos;
    clientEntAnchorCount = varMapEnts->clientEntAnchorCount;
    if ( 8 * clientEntAnchorCount )
    {
      if ( (unsigned __int64)(8 * clientEntAnchorCount) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(8 * clientEntAnchorCount);
    }
    for ( j = varClientEntAnchor; clientEntAnchorCount; --clientEntAnchorCount )
    {
      v35 = j;
      varClientEntAnchor = j;
      if ( j == (ClientEntAnchor *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, j, 8ui64);
        v35 = varClientEntAnchor;
      }
      v36 = varscr_string_t;
      varscr_string_t = (scr_string_t *)v35;
      Postload_scr_string_t(NotAtStart);
      ++j;
      varscr_string_t = v36;
    }
    varClientEntAnchor = v32;
  }
  v37 = varScriptableMapEnts;
  varScriptableMapEnts = &varMapEnts->scriptableMapEnts;
  Postload_ScriptableMapEnts(NotAtStart);
  varScriptableMapEnts = v37;
  v38 = varSpawnGroup;
  varSpawnGroup = &varMapEnts->spawnGroupLoot;
  Postload_SpawnGroup(NotAtStart);
  varSpawnGroup = v38;
  v39 = varClientSideEffects;
  varClientSideEffects = &varMapEnts->clientSideEffects;
  Postload_ClientSideEffects(NotAtStart);
  varClientSideEffects = v39;
  v40 = varCreateFxAssetData;
  varCreateFxAssetData = &varMapEnts->createFxAssetData;
  Postload_CreateFxAssetData(NotAtStart);
  v41 = varMapEnts;
  varCreateFxAssetData = v40;
  if ( varMapEnts->exploderNames )
  {
    v42 = varscr_string_t;
    v43 = AllocPostload_scr_string_t();
    v41->exploderNames = v43;
    varscr_string_t = v43;
    Postload_scr_string_tArray(AtStart, varMapEnts->exploderNameTotal);
    v41 = varMapEnts;
    varscr_string_t = v42;
  }
  v44 = varServerSideEffects;
  varServerSideEffects = &v41->serverSideEffects;
  Postload_ServerSideEffects(NotAtStart);
  v45 = varMapEnts;
  varServerSideEffects = v44;
  mayhemScenes = varMapEnts->mayhemScenes;
  if ( mayhemScenes )
  {
    if ( mayhemScenes == (MayhemInstance *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( mayhemScenes != (MayhemInstance *)-2i64 )
    {
      v45->mayhemScenes = (MayhemInstance *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varMapEnts->mayhemScenes);
      goto LABEL_51;
    }
    v47 = varMayhemInstance;
    v48 = AllocPostload_MayhemInstance();
    v45->mayhemScenes = v48;
    varMayhemInstance = v48;
    Postload_MayhemInstanceArray(AtStart, varMapEnts->numMayhemScenes);
    varMayhemInstance = v47;
    if ( mayhemScenes == (MayhemInstance *)-1i64 )
      DB_PopSharedData();
  }
LABEL_51:
  v49 = varSpawnerList;
  varSpawnerList = &varMapEnts->spawners;
  Postload_SpawnerList(NotAtStart);
  varSpawnerList = v49;
  v50 = varMapEnts;
  if ( varMapEnts->audioPASpeakers )
  {
    v51 = varAudioPASpeaker;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v50->audioPASpeakers = (AudioPASpeaker *)g_streamPosGlob.pos;
    varAudioPASpeaker = (AudioPASpeaker *)g_streamPosGlob.pos;
    v52 = 20i64 * varMapEnts->audioPASpeakerCount;
    if ( v52 )
    {
      if ( v52 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v52);
    }
    varAudioPASpeaker = v51;
  }
  v53 = varMapEnts;
  if ( varMapEnts->audioPropNodes )
  {
    v54 = varAudioPropagationNode;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v53->audioPropNodes = (AudioPropagationNode *)g_streamPosGlob.pos;
    varAudioPropagationNode = (AudioPropagationNode *)g_streamPosGlob.pos;
    v55 = 20i64 * varMapEnts->numAudioPropNodes;
    if ( v55 )
    {
      if ( v55 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v55);
    }
    varAudioPropagationNode = v54;
  }
  v56 = varMapEnts;
  if ( varMapEnts->audioPropEdges )
  {
    v57 = varAudioPropagationEdge;
    DB_PatchMem_FixStreamAlignment(1ui64);
    DB_CheckCanIncStreamPos(0i64);
    v56->audioPropEdges = (AudioPropagationEdge *)g_streamPosGlob.pos;
    varAudioPropagationEdge = (AudioPropagationEdge *)g_streamPosGlob.pos;
    v58 = 4i64 * varMapEnts->numAudioPropEdges;
    if ( v58 )
    {
      if ( v58 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v58);
    }
    varAudioPropagationEdge = v57;
  }
  v59 = varMapEnts;
  if ( varMapEnts->collmapLookups )
  {
    v60 = varCollMapLookupEntry;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v59->collmapLookups = (CollMapLookupEntry *)g_streamPosGlob.pos;
    varCollMapLookupEntry = (CollMapLookupEntry *)g_streamPosGlob.pos;
    numCollmaps = varMapEnts->numCollmaps;
    v62 = 16 * numCollmaps;
    if ( 16 * numCollmaps )
    {
      if ( v62 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v62);
    }
    for ( k = varCollMapLookupEntry; numCollmaps; --numCollmaps )
    {
      v64 = k;
      varCollMapLookupEntry = k;
      if ( k == (CollMapLookupEntry *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, k, 0x10ui64);
        v64 = varCollMapLookupEntry;
      }
      v65 = varXString;
      varXString = &v64->targetName;
      Postload_XString(NotAtStart);
      ++k;
      varXString = v65;
    }
    varCollMapLookupEntry = v60;
  }
  DB_PopStreamPos();
  DB_PatchMem_PopAsset();
}

/*
==============
Postload_MapEntsArray
==============
*/
void Postload_MapEntsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  MapEnts *i; 

  v2 = count;
  Postload_Stream_7(streamStart, varMapEnts, 1064 * count);
  for ( i = varMapEnts; v2; --v2 )
  {
    varMapEnts = i;
    Postload_MapEnts(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_MapEntsPtr
==============
*/
void Postload_MapEntsPtr(const DBStreamStart streamStart)
{
  unsigned __int8 *inserted; 
  MapEnts **v3; 
  __int64 v4; 
  MapEnts *v5; 

  inserted = NULL;
  if ( streamStart != (varMapEntsPtr != (MapEnts **)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varMapEntsPtr, 8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(8ui64);
  DB_PushStreamPos(2u);
  v3 = varMapEntsPtr;
  v4 = (__int64)*varMapEntsPtr;
  if ( *varMapEntsPtr )
  {
    if ( v4 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v4 != -2 && v4 != -3 )
    {
      DB_ConvertOffsetToAlias((unsigned __int64 *)varMapEntsPtr);
      goto LABEL_17;
    }
    v5 = varMapEnts;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    *v3 = (MapEnts *)g_streamPosGlob.pos;
    varMapEnts = (MapEnts *)g_streamPosGlob.pos;
    if ( v4 == -3 )
      inserted = DB_InsertPointer();
    Postload_MapEnts(AtStart);
    Load_MapEntsAsset(v3);
    varMapEnts = v5;
    if ( inserted )
      *(_QWORD *)inserted = *v3;
    if ( v4 == -1 )
      DB_PopSharedData();
  }
LABEL_17:
  DB_PopStreamPos();
}

/*
==============
Postload_MapEntsPtrArray
==============
*/
void Postload_MapEntsPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  MapEnts **i; 

  v2 = count;
  Postload_Stream_7(streamStart, varMapEntsPtr, 8 * count);
  for ( i = varMapEntsPtr; v2; --v2 )
  {
    varMapEntsPtr = i;
    Postload_MapEntsPtr(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_MapEntsPtrStream
==============
*/
void Postload_MapEntsPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  MapEnts **v5; 
  __int64 v6; 
  MapEnts *v7; 
  unsigned __int8 *inserted; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 32365, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varMapEntsPtr;
    pos = g_streamPosGlob.pos;
    while ( 1 )
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 8ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(8ui64);
      g_streamPosGlob.pos += 8;
      DB_PushStreamPos(2u);
      v5 = varMapEntsPtr;
      v6 = (__int64)*varMapEntsPtr;
      if ( !*varMapEntsPtr )
        goto LABEL_23;
      if ( v6 == -1 )
        break;
      if ( v6 == -2 || v6 == -3 )
        goto LABEL_17;
      DB_ConvertOffsetToAlias((unsigned __int64 *)varMapEntsPtr);
LABEL_23:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varMapEntsPtr = (MapEnts **)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_17:
    v7 = varMapEnts;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    inserted = NULL;
    *v5 = (MapEnts *)g_streamPosGlob.pos;
    varMapEnts = (MapEnts *)g_streamPosGlob.pos;
    if ( v6 == -3 )
      inserted = DB_InsertPointer();
    Postload_MapEnts(AtStart);
    Load_MapEntsAsset(v5);
    varMapEnts = v7;
    if ( inserted )
      *(_QWORD *)inserted = *v5;
    if ( v6 == -1 )
      DB_PopSharedData();
    goto LABEL_23;
  }
}

/*
==============
Postload_MapEntsStream
==============
*/
void Postload_MapEntsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 32238, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Postload_MapEnts(AtStart);
    varMapEnts = (MapEnts *)g_streamPosGlob.pos;
  }
}

/*
==============
Postload_MapTriggers
==============
*/
void Postload_MapTriggers(const DBStreamStart streamStart)
{
  MapTriggers *v2; 
  TriggerModel *models; 
  TriggerModel *v4; 
  __int64 count; 
  unsigned __int64 v6; 
  TriggerModel *i; 
  TriggerModel *v8; 
  PhysicsAsset **v9; 
  MapTriggers *v10; 
  TriggerHull *hulls; 
  TriggerHull *v12; 
  unsigned __int64 v13; 
  MapTriggers *v14; 
  TriggerSlab *slabs; 
  TriggerSlab *v16; 
  unsigned __int64 v17; 
  MapTriggers *v18; 
  TriggerWinding *windings; 
  TriggerWinding *v20; 
  unsigned __int64 v21; 
  MapTriggers *v22; 
  TriggerWindingPoint *windingPoints; 
  TriggerWindingPoint *v24; 
  unsigned __int64 v25; 

  if ( streamStart != (varMapTriggers != (MapTriggers *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varMapTriggers, 0x50ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x50ui64);
  v2 = varMapTriggers;
  models = varMapTriggers->models;
  if ( models )
  {
    if ( models == (TriggerModel *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( models != (TriggerModel *)-2i64 )
    {
      v2->models = (TriggerModel *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varMapTriggers->models);
      goto LABEL_21;
    }
    v4 = varTriggerModel;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->models = (TriggerModel *)g_streamPosGlob.pos;
    varTriggerModel = (TriggerModel *)g_streamPosGlob.pos;
    count = varMapTriggers->count;
    v6 = 32 * count;
    if ( 32 * count )
    {
      if ( v6 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v6);
    }
    for ( i = varTriggerModel; count; --count )
    {
      v8 = i;
      varTriggerModel = i;
      if ( i == (TriggerModel *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x20ui64);
        v8 = varTriggerModel;
      }
      v9 = varPhysicsAssetPtr;
      varPhysicsAssetPtr = &v8->physicsAsset;
      Postload_PhysicsAssetPtr(NotAtStart);
      ++i;
      varPhysicsAssetPtr = v9;
    }
    varTriggerModel = v4;
    if ( models == (TriggerModel *)-1i64 )
      DB_PopSharedData();
  }
LABEL_21:
  v10 = varMapTriggers;
  hulls = varMapTriggers->hulls;
  if ( !hulls )
    goto LABEL_33;
  if ( hulls == (TriggerHull *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( hulls != (TriggerHull *)-2i64 )
  {
    v10->hulls = (TriggerHull *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varMapTriggers->hulls);
    goto LABEL_33;
  }
  v12 = varTriggerHull;
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  v10->hulls = (TriggerHull *)g_streamPosGlob.pos;
  varTriggerHull = (TriggerHull *)g_streamPosGlob.pos;
  v13 = 32i64 * varMapTriggers->hullCount;
  if ( v13 )
  {
    if ( v13 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
      __debugbreak();
    DB_IncStreamPos(v13);
  }
  varTriggerHull = v12;
  if ( hulls == (TriggerHull *)-1i64 )
    DB_PopSharedData();
LABEL_33:
  v14 = varMapTriggers;
  slabs = varMapTriggers->slabs;
  if ( !slabs )
    goto LABEL_45;
  if ( slabs == (TriggerSlab *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( slabs != (TriggerSlab *)-2i64 )
  {
    v14->slabs = (TriggerSlab *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varMapTriggers->slabs);
    goto LABEL_45;
  }
  v16 = varTriggerSlab;
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  v14->slabs = (TriggerSlab *)g_streamPosGlob.pos;
  varTriggerSlab = (TriggerSlab *)g_streamPosGlob.pos;
  v17 = 20i64 * varMapTriggers->slabCount;
  if ( v17 )
  {
    if ( v17 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
      __debugbreak();
    DB_IncStreamPos(v17);
  }
  varTriggerSlab = v16;
  if ( slabs == (TriggerSlab *)-1i64 )
    DB_PopSharedData();
LABEL_45:
  v18 = varMapTriggers;
  windings = varMapTriggers->windings;
  if ( !windings )
    goto LABEL_57;
  if ( windings == (TriggerWinding *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( windings != (TriggerWinding *)-2i64 )
  {
    v18->windings = (TriggerWinding *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varMapTriggers->windings);
    goto LABEL_57;
  }
  v20 = varTriggerWinding;
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  v18->windings = (TriggerWinding *)g_streamPosGlob.pos;
  varTriggerWinding = (TriggerWinding *)g_streamPosGlob.pos;
  v21 = 20i64 * varMapTriggers->windingCount;
  if ( v21 )
  {
    if ( v21 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
      __debugbreak();
    DB_IncStreamPos(v21);
  }
  varTriggerWinding = v20;
  if ( windings == (TriggerWinding *)-1i64 )
    DB_PopSharedData();
LABEL_57:
  v22 = varMapTriggers;
  windingPoints = varMapTriggers->windingPoints;
  if ( !windingPoints )
    return;
  if ( windingPoints == (TriggerWindingPoint *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( windingPoints != (TriggerWindingPoint *)-2i64 )
  {
    v22->windingPoints = (TriggerWindingPoint *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varMapTriggers->windingPoints);
    return;
  }
  v24 = varTriggerWindingPoint;
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  v22->windingPoints = (TriggerWindingPoint *)g_streamPosGlob.pos;
  varTriggerWindingPoint = (TriggerWindingPoint *)g_streamPosGlob.pos;
  v25 = 12i64 * varMapTriggers->windingPointCount;
  if ( v25 )
  {
    if ( v25 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
      __debugbreak();
    DB_IncStreamPos(v25);
  }
  varTriggerWindingPoint = v24;
  if ( windingPoints == (TriggerWindingPoint *)-1i64 )
    DB_PopSharedData();
}

/*
==============
Postload_MapTriggersArray
==============
*/
void Postload_MapTriggersArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  MapTriggers *i; 

  v2 = count;
  Postload_Stream_7(streamStart, varMapTriggers, 80 * count);
  for ( i = varMapTriggers; v2; --v2 )
  {
    varMapTriggers = i;
    Postload_MapTriggers(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_MapTriggersStream
==============
*/
void Postload_MapTriggersStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 22839, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Postload_MapTriggers(AtStart);
    varMapTriggers = (MapTriggers *)g_streamPosGlob.pos;
  }
}

/*
==============
Postload_PhysicsCapacities
==============
*/
void Postload_PhysicsCapacities(const DBStreamStart streamStart)
{
  if ( streamStart != (varPhysicsCapacities != (PhysicsCapacities *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varPhysicsCapacities, 0x20ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x20ui64);
}

/*
==============
Postload_PhysicsCapacitiesArray
==============
*/
void Postload_PhysicsCapacitiesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_7(streamStart, varPhysicsCapacities, 32 * count);
}

/*
==============
Postload_PhysicsCapacitiesStream
==============
*/
void Postload_PhysicsCapacitiesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  PhysicsCapacities *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 32962, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varPhysicsCapacities;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (PhysicsCapacities *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x20ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x20ui64);
      pos = g_streamPosGlob.pos + 32;
      g_streamPosGlob.pos = pos;
      v3 = (PhysicsCapacities *)pos;
      varPhysicsCapacities = (PhysicsCapacities *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ServerExploderDef
==============
*/
void Postload_ServerExploderDef(const DBStreamStart streamStart)
{
  scr_string_t *v2; 

  if ( streamStart != (varServerExploderDef != (ServerExploderDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varServerExploderDef, 0x28ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x28ui64);
  v2 = varscr_string_t;
  varscr_string_t = &varServerExploderDef->name;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = &varServerExploderDef->earthquakeName;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = &varServerExploderDef->rumbleName;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = v2;
}

/*
==============
Postload_ServerExploderDefArray
==============
*/
void Postload_ServerExploderDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ServerExploderDef *i; 
  ServerExploderDef *v4; 
  scr_string_t *v5; 

  v2 = count;
  Postload_Stream_7(streamStart, varServerExploderDef, 40 * count);
  for ( i = varServerExploderDef; v2; --v2 )
  {
    v4 = i;
    varServerExploderDef = i;
    if ( i == (ServerExploderDef *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x28ui64);
      v4 = varServerExploderDef;
    }
    v5 = varscr_string_t;
    varscr_string_t = &v4->name;
    Postload_scr_string_t(NotAtStart);
    varscr_string_t = &varServerExploderDef->earthquakeName;
    Postload_scr_string_t(NotAtStart);
    varscr_string_t = &varServerExploderDef->rumbleName;
    Postload_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v5;
  }
}

/*
==============
Postload_ServerExploderDefStream
==============
*/
void Postload_ServerExploderDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  scr_string_t *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 27605, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varServerExploderDef;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x28ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x28ui64);
      v5 = varscr_string_t;
      g_streamPosGlob.pos += 40;
      varscr_string_t = &varServerExploderDef->name;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = &varServerExploderDef->earthquakeName;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = &varServerExploderDef->rumbleName;
      Postload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varServerExploderDef = (ServerExploderDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varscr_string_t = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ServerSideEffects
==============
*/
void Postload_ServerSideEffects(const DBStreamStart streamStart)
{
  ServerSideEffects *v2; 
  ServerExploderDef *v3; 
  __int64 exploderCount; 
  ServerExploderDef *i; 
  ServerExploderDef *v6; 
  scr_string_t *v7; 

  if ( streamStart != (varServerSideEffects != (ServerSideEffects *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varServerSideEffects, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
  v2 = varServerSideEffects;
  if ( varServerSideEffects->exploders )
  {
    v3 = varServerExploderDef;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->exploders = (ServerExploderDef *)g_streamPosGlob.pos;
    varServerExploderDef = (ServerExploderDef *)g_streamPosGlob.pos;
    exploderCount = varServerSideEffects->exploderCount;
    if ( 40 * exploderCount )
      DB_IncStreamPos(40 * exploderCount);
    for ( i = varServerExploderDef; exploderCount; --exploderCount )
    {
      v6 = i;
      varServerExploderDef = i;
      if ( i == (ServerExploderDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x28ui64);
        v6 = varServerExploderDef;
      }
      v7 = varscr_string_t;
      varscr_string_t = &v6->name;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = &varServerExploderDef->earthquakeName;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = &varServerExploderDef->rumbleName;
      Postload_scr_string_t(NotAtStart);
      ++i;
      varscr_string_t = v7;
    }
    varServerExploderDef = v3;
  }
}

/*
==============
Postload_ServerSideEffectsArray
==============
*/
void Postload_ServerSideEffectsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ServerSideEffects *i; 

  v2 = count;
  Postload_Stream_7(streamStart, varServerSideEffects, 16 * count);
  for ( i = varServerSideEffects; v2; --v2 )
  {
    varServerSideEffects = i;
    Postload_ServerSideEffects(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ServerSideEffectsStream
==============
*/
void Postload_ServerSideEffectsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ServerSideEffects *v4; 
  ServerExploderDef *v5; 
  __int64 exploderCount; 
  ServerExploderDef *i; 
  ServerExploderDef *v8; 
  scr_string_t *v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 27707, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varServerSideEffects;
    do
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x10ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      v4 = varServerSideEffects;
      g_streamPosGlob.pos += 16;
      if ( varServerSideEffects->exploders )
      {
        v5 = varServerExploderDef;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->exploders = (ServerExploderDef *)g_streamPosGlob.pos;
        varServerExploderDef = (ServerExploderDef *)g_streamPosGlob.pos;
        exploderCount = varServerSideEffects->exploderCount;
        if ( 40 * exploderCount )
          DB_IncStreamPos(40 * exploderCount);
        for ( i = varServerExploderDef; exploderCount; --exploderCount )
        {
          v8 = i;
          varServerExploderDef = i;
          if ( i == (ServerExploderDef *)g_streamPosGlob.pos )
          {
            DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x28ui64);
            v8 = varServerExploderDef;
          }
          v9 = varscr_string_t;
          varscr_string_t = &v8->name;
          Postload_scr_string_t(NotAtStart);
          varscr_string_t = &varServerExploderDef->earthquakeName;
          Postload_scr_string_t(NotAtStart);
          varscr_string_t = &varServerExploderDef->rumbleName;
          Postload_scr_string_t(NotAtStart);
          ++i;
          varscr_string_t = v9;
        }
        varServerExploderDef = v5;
      }
      pos = g_streamPosGlob.pos;
      varServerSideEffects = (ServerSideEffects *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_SpawnGroup
==============
*/
void Postload_SpawnGroup(const DBStreamStart streamStart)
{
  SpawnGroup *v2; 
  SpawnGroupPoint *v3; 
  __int64 pointCount; 
  SpawnGroup *v5; 
  SpawnGroupCluster *v6; 
  __int64 clusterCount; 
  SpawnGroupCluster *i; 
  SpawnGroupCluster *v9; 
  unsigned __int16 *v10; 
  unsigned __int16 *v11; 
  SpawnGroup *v12; 
  SpawnGroupZone *v13; 
  __int64 zoneCount; 
  SpawnGroupZone *j; 

  if ( streamStart != (varSpawnGroup != (SpawnGroup *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varSpawnGroup, 0x30ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x30ui64);
  v2 = varSpawnGroup;
  if ( varSpawnGroup->points )
  {
    v3 = varSpawnGroupPoint;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->points = (SpawnGroupPoint *)g_streamPosGlob.pos;
    varSpawnGroupPoint = (SpawnGroupPoint *)g_streamPosGlob.pos;
    pointCount = varSpawnGroup->pointCount;
    if ( 28 * pointCount )
      DB_IncStreamPos(28 * pointCount);
    varSpawnGroupPoint = v3;
  }
  v5 = varSpawnGroup;
  if ( varSpawnGroup->clusters )
  {
    v6 = varSpawnGroupCluster;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->clusters = (SpawnGroupCluster *)g_streamPosGlob.pos;
    varSpawnGroupCluster = (SpawnGroupCluster *)g_streamPosGlob.pos;
    clusterCount = varSpawnGroup->clusterCount;
    if ( 40 * clusterCount )
      DB_IncStreamPos(40 * clusterCount);
    for ( i = varSpawnGroupCluster; clusterCount; --clusterCount )
    {
      v9 = i;
      varSpawnGroupCluster = i;
      if ( i == (SpawnGroupCluster *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x28ui64);
        v9 = varSpawnGroupCluster;
      }
      if ( v9->points )
      {
        v10 = varushort;
        v11 = AllocPostload_ushort();
        v9->points = v11;
        varushort = v11;
        Postload_ushortArray(AtStart, varSpawnGroupCluster->pointCount);
        varushort = v10;
      }
      ++i;
    }
    varSpawnGroupCluster = v6;
  }
  v12 = varSpawnGroup;
  if ( varSpawnGroup->zones )
  {
    v13 = varSpawnGroupZone;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v12->zones = (SpawnGroupZone *)g_streamPosGlob.pos;
    varSpawnGroupZone = (SpawnGroupZone *)g_streamPosGlob.pos;
    zoneCount = varSpawnGroup->zoneCount;
    if ( 56 * zoneCount )
      DB_IncStreamPos(56 * zoneCount);
    for ( j = varSpawnGroupZone; zoneCount; --zoneCount )
    {
      varSpawnGroupZone = j;
      Postload_SpawnGroupZone(NotAtStart);
      ++j;
    }
    varSpawnGroupZone = v13;
  }
}

/*
==============
Postload_SpawnGroupArray
==============
*/
void Postload_SpawnGroupArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SpawnGroup *i; 

  v2 = count;
  Postload_Stream_7(streamStart, varSpawnGroup, 48 * count);
  for ( i = varSpawnGroup; v2; --v2 )
  {
    varSpawnGroup = i;
    Postload_SpawnGroup(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_SpawnGroupCluster
==============
*/
void Postload_SpawnGroupCluster(const DBStreamStart streamStart)
{
  SpawnGroupCluster *v2; 
  unsigned __int16 *v3; 
  unsigned __int16 *v4; 

  if ( streamStart != (varSpawnGroupCluster != (SpawnGroupCluster *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varSpawnGroupCluster, 0x28ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x28ui64);
  v2 = varSpawnGroupCluster;
  if ( varSpawnGroupCluster->points )
  {
    v3 = varushort;
    v4 = AllocPostload_ushort();
    v2->points = v4;
    varushort = v4;
    Postload_ushortArray(AtStart, varSpawnGroupCluster->pointCount);
    varushort = v3;
  }
}

/*
==============
Postload_SpawnGroupClusterArray
==============
*/
void Postload_SpawnGroupClusterArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SpawnGroupCluster *i; 
  SpawnGroupCluster *v4; 
  unsigned __int16 *v5; 
  unsigned __int16 *v6; 

  v2 = count;
  Postload_Stream_7(streamStart, varSpawnGroupCluster, 40 * count);
  for ( i = varSpawnGroupCluster; v2; --v2 )
  {
    v4 = i;
    varSpawnGroupCluster = i;
    if ( i == (SpawnGroupCluster *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x28ui64);
      v4 = varSpawnGroupCluster;
    }
    if ( v4->points )
    {
      v5 = varushort;
      v6 = AllocPostload_ushort();
      v4->points = v6;
      varushort = v6;
      Postload_ushortArray(AtStart, varSpawnGroupCluster->pointCount);
      varushort = v5;
    }
    ++i;
  }
}

/*
==============
Postload_SpawnGroupClusterStream
==============
*/
void Postload_SpawnGroupClusterStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  SpawnGroupCluster *v3; 
  unsigned __int8 *pos; 
  SpawnGroupCluster *v5; 
  unsigned __int16 *v6; 
  unsigned __int16 *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 25119, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varSpawnGroupCluster;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (SpawnGroupCluster *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x28ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x28ui64);
      v5 = varSpawnGroupCluster;
      pos = g_streamPosGlob.pos + 40;
      g_streamPosGlob.pos += 40;
      if ( varSpawnGroupCluster->points )
      {
        v6 = varushort;
        v7 = AllocPostload_ushort();
        v5->points = v7;
        varushort = v7;
        Postload_ushortArray(AtStart, varSpawnGroupCluster->pointCount);
        pos = g_streamPosGlob.pos;
        varushort = v6;
      }
      varSpawnGroupCluster = (SpawnGroupCluster *)pos;
      v3 = (SpawnGroupCluster *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_SpawnGroupPoint
==============
*/
void Postload_SpawnGroupPoint(const DBStreamStart streamStart)
{
  if ( streamStart != (varSpawnGroupPoint != (SpawnGroupPoint *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varSpawnGroupPoint, 0x1Cui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x1Cui64);
}

/*
==============
Postload_SpawnGroupPointArray
==============
*/
void Postload_SpawnGroupPointArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_7(streamStart, varSpawnGroupPoint, 28 * count);
}

/*
==============
Postload_SpawnGroupPointStream
==============
*/
void Postload_SpawnGroupPointStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  SpawnGroupPoint *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 24971, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varSpawnGroupPoint;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (SpawnGroupPoint *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x1Cui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x1Cui64);
      pos = g_streamPosGlob.pos + 28;
      g_streamPosGlob.pos = pos;
      v3 = (SpawnGroupPoint *)pos;
      varSpawnGroupPoint = (SpawnGroupPoint *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_SpawnGroupStream
==============
*/
void Postload_SpawnGroupStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  SpawnGroup *v4; 
  SpawnGroupPoint *v5; 
  __int64 pointCount; 
  SpawnGroup *v7; 
  SpawnGroupCluster *v8; 
  __int64 clusterCount; 
  SpawnGroupCluster *i; 
  SpawnGroupCluster *v11; 
  unsigned __int16 *v12; 
  unsigned __int16 *v13; 
  SpawnGroup *v14; 
  SpawnGroupZone *v15; 
  __int64 zoneCount; 
  SpawnGroupZone *j; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 25516, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varSpawnGroup;
    do
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x30ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x30ui64);
      v4 = varSpawnGroup;
      g_streamPosGlob.pos += 48;
      if ( varSpawnGroup->points )
      {
        v5 = varSpawnGroupPoint;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->points = (SpawnGroupPoint *)g_streamPosGlob.pos;
        varSpawnGroupPoint = (SpawnGroupPoint *)g_streamPosGlob.pos;
        pointCount = varSpawnGroup->pointCount;
        if ( 28 * pointCount )
          DB_IncStreamPos(28 * pointCount);
        varSpawnGroupPoint = v5;
      }
      v7 = varSpawnGroup;
      if ( varSpawnGroup->clusters )
      {
        v8 = varSpawnGroupCluster;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v7->clusters = (SpawnGroupCluster *)g_streamPosGlob.pos;
        varSpawnGroupCluster = (SpawnGroupCluster *)g_streamPosGlob.pos;
        clusterCount = varSpawnGroup->clusterCount;
        if ( 40 * clusterCount )
          DB_IncStreamPos(40 * clusterCount);
        for ( i = varSpawnGroupCluster; clusterCount; --clusterCount )
        {
          v11 = i;
          varSpawnGroupCluster = i;
          if ( i == (SpawnGroupCluster *)g_streamPosGlob.pos )
          {
            DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x28ui64);
            v11 = varSpawnGroupCluster;
          }
          if ( v11->points )
          {
            v12 = varushort;
            v13 = AllocPostload_ushort();
            v11->points = v13;
            varushort = v13;
            Postload_ushortArray(AtStart, varSpawnGroupCluster->pointCount);
            varushort = v12;
          }
          ++i;
        }
        varSpawnGroupCluster = v8;
      }
      v14 = varSpawnGroup;
      if ( varSpawnGroup->zones )
      {
        v15 = varSpawnGroupZone;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v14->zones = (SpawnGroupZone *)g_streamPosGlob.pos;
        varSpawnGroupZone = (SpawnGroupZone *)g_streamPosGlob.pos;
        zoneCount = varSpawnGroup->zoneCount;
        if ( 56 * zoneCount )
          DB_IncStreamPos(56 * zoneCount);
        for ( j = varSpawnGroupZone; zoneCount; --zoneCount )
        {
          varSpawnGroupZone = j;
          Postload_SpawnGroupZone(NotAtStart);
          ++j;
        }
        varSpawnGroupZone = v15;
      }
      pos = g_streamPosGlob.pos;
      varSpawnGroup = (SpawnGroup *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_SpawnGroupZone
==============
*/
void Postload_SpawnGroupZone(const DBStreamStart streamStart)
{
  scr_string_t *v2; 
  unsigned __int16 *v3; 
  SpawnGroupZone *v4; 
  unsigned __int16 *v5; 
  unsigned __int16 *v6; 

  if ( streamStart != (varSpawnGroupZone != (SpawnGroupZone *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varSpawnGroupZone, 0x38ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x38ui64);
  v2 = varscr_string_t;
  varscr_string_t = &varSpawnGroupZone->name;
  Postload_scr_string_t(NotAtStart);
  v3 = varushort;
  varscr_string_t = v2;
  v4 = varSpawnGroupZone;
  if ( varSpawnGroupZone->points )
  {
    v5 = AllocPostload_ushort();
    v4->points = v5;
    varushort = v5;
    Postload_ushortArray(AtStart, varSpawnGroupZone->pointCount);
    v4 = varSpawnGroupZone;
    varushort = v3;
  }
  if ( v4->clusters )
  {
    v6 = AllocPostload_ushort();
    v4->clusters = v6;
    varushort = v6;
    Postload_ushortArray(AtStart, varSpawnGroupZone->clusterCount);
    varushort = v3;
  }
}

/*
==============
Postload_SpawnGroupZoneArray
==============
*/
void Postload_SpawnGroupZoneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SpawnGroupZone *i; 

  v2 = count;
  Postload_Stream_7(streamStart, varSpawnGroupZone, 56 * count);
  for ( i = varSpawnGroupZone; v2; --v2 )
  {
    varSpawnGroupZone = i;
    Postload_SpawnGroupZone(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_SpawnGroupZoneStream
==============
*/
void Postload_SpawnGroupZoneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  scr_string_t *v5; 
  unsigned __int16 *v6; 
  SpawnGroupZone *v7; 
  unsigned __int16 *v8; 
  unsigned __int16 *v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 25316, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varSpawnGroupZone;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x38ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x38ui64);
      v5 = varscr_string_t;
      g_streamPosGlob.pos += 56;
      varscr_string_t = &varSpawnGroupZone->name;
      Postload_scr_string_t(NotAtStart);
      v6 = varushort;
      varscr_string_t = v5;
      v7 = varSpawnGroupZone;
      if ( varSpawnGroupZone->points )
      {
        v8 = AllocPostload_ushort();
        v7->points = v8;
        varushort = v8;
        Postload_ushortArray(AtStart, varSpawnGroupZone->pointCount);
        v7 = varSpawnGroupZone;
        varushort = v6;
      }
      if ( v7->clusters )
      {
        v9 = AllocPostload_ushort();
        v7->clusters = v9;
        varushort = v9;
        Postload_ushortArray(AtStart, varSpawnGroupZone->clusterCount);
        varushort = v6;
      }
      pos = g_streamPosGlob.pos;
      varSpawnGroupZone = (SpawnGroupZone *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_SpawnPointEntityRecord
==============
*/
void Postload_SpawnPointEntityRecord(const DBStreamStart streamStart)
{
  scr_string_t *v2; 

  if ( streamStart != (varSpawnPointEntityRecord != (SpawnPointEntityRecord *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varSpawnPointEntityRecord, 0x28ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x28ui64);
  v2 = varscr_string_t;
  varscr_string_t = &varSpawnPointEntityRecord->name;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = &varSpawnPointEntityRecord->target;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = &varSpawnPointEntityRecord->script_noteworthy;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = v2;
}

/*
==============
Postload_SpawnPointEntityRecordArray
==============
*/
void Postload_SpawnPointEntityRecordArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SpawnPointEntityRecord *i; 
  SpawnPointEntityRecord *v4; 
  scr_string_t *v5; 

  v2 = count;
  Postload_Stream_7(streamStart, varSpawnPointEntityRecord, 40 * count);
  for ( i = varSpawnPointEntityRecord; v2; --v2 )
  {
    v4 = i;
    varSpawnPointEntityRecord = i;
    if ( i == (SpawnPointEntityRecord *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x28ui64);
      v4 = varSpawnPointEntityRecord;
    }
    v5 = varscr_string_t;
    varscr_string_t = &v4->name;
    Postload_scr_string_t(NotAtStart);
    varscr_string_t = &varSpawnPointEntityRecord->target;
    Postload_scr_string_t(NotAtStart);
    varscr_string_t = &varSpawnPointEntityRecord->script_noteworthy;
    Postload_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v5;
  }
}

/*
==============
Postload_SpawnPointEntityRecordStream
==============
*/
void Postload_SpawnPointEntityRecordStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  scr_string_t *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 24724, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varSpawnPointEntityRecord;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x28ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x28ui64);
      v5 = varscr_string_t;
      g_streamPosGlob.pos += 40;
      varscr_string_t = &varSpawnPointEntityRecord->name;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = &varSpawnPointEntityRecord->target;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = &varSpawnPointEntityRecord->script_noteworthy;
      Postload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varSpawnPointEntityRecord = (SpawnPointEntityRecord *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varscr_string_t = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_SpawnPointRecordList
==============
*/
void Postload_SpawnPointRecordList(const DBStreamStart streamStart)
{
  SpawnPointRecordList *v2; 
  SpawnPointEntityRecord *v3; 
  __int64 spawnsCount; 
  SpawnPointEntityRecord *i; 
  SpawnPointEntityRecord *v6; 
  scr_string_t *v7; 

  if ( streamStart != (varSpawnPointRecordList != (SpawnPointRecordList *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varSpawnPointRecordList, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
  v2 = varSpawnPointRecordList;
  if ( varSpawnPointRecordList->spawns )
  {
    v3 = varSpawnPointEntityRecord;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->spawns = (SpawnPointEntityRecord *)g_streamPosGlob.pos;
    varSpawnPointEntityRecord = (SpawnPointEntityRecord *)g_streamPosGlob.pos;
    spawnsCount = varSpawnPointRecordList->spawnsCount;
    if ( 40 * spawnsCount )
      DB_IncStreamPos(40 * spawnsCount);
    for ( i = varSpawnPointEntityRecord; spawnsCount; --spawnsCount )
    {
      v6 = i;
      varSpawnPointEntityRecord = i;
      if ( i == (SpawnPointEntityRecord *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x28ui64);
        v6 = varSpawnPointEntityRecord;
      }
      v7 = varscr_string_t;
      varscr_string_t = &v6->name;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = &varSpawnPointEntityRecord->target;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = &varSpawnPointEntityRecord->script_noteworthy;
      Postload_scr_string_t(NotAtStart);
      ++i;
      varscr_string_t = v7;
    }
    varSpawnPointEntityRecord = v3;
  }
}

/*
==============
Postload_SpawnPointRecordListArray
==============
*/
void Postload_SpawnPointRecordListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SpawnPointRecordList *i; 

  v2 = count;
  Postload_Stream_7(streamStart, varSpawnPointRecordList, 16 * count);
  for ( i = varSpawnPointRecordList; v2; --v2 )
  {
    varSpawnPointRecordList = i;
    Postload_SpawnPointRecordList(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_SpawnPointRecordListStream
==============
*/
void Postload_SpawnPointRecordListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  SpawnPointRecordList *v4; 
  SpawnPointEntityRecord *v5; 
  __int64 spawnsCount; 
  SpawnPointEntityRecord *i; 
  SpawnPointEntityRecord *v8; 
  scr_string_t *v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 24826, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varSpawnPointRecordList;
    do
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x10ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      v4 = varSpawnPointRecordList;
      g_streamPosGlob.pos += 16;
      if ( varSpawnPointRecordList->spawns )
      {
        v5 = varSpawnPointEntityRecord;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->spawns = (SpawnPointEntityRecord *)g_streamPosGlob.pos;
        varSpawnPointEntityRecord = (SpawnPointEntityRecord *)g_streamPosGlob.pos;
        spawnsCount = varSpawnPointRecordList->spawnsCount;
        if ( 40 * spawnsCount )
          DB_IncStreamPos(40 * spawnsCount);
        for ( i = varSpawnPointEntityRecord; spawnsCount; --spawnsCount )
        {
          v8 = i;
          varSpawnPointEntityRecord = i;
          if ( i == (SpawnPointEntityRecord *)g_streamPosGlob.pos )
          {
            DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x28ui64);
            v8 = varSpawnPointEntityRecord;
          }
          v9 = varscr_string_t;
          varscr_string_t = &v8->name;
          Postload_scr_string_t(NotAtStart);
          varscr_string_t = &varSpawnPointEntityRecord->target;
          Postload_scr_string_t(NotAtStart);
          varscr_string_t = &varSpawnPointEntityRecord->script_noteworthy;
          Postload_scr_string_t(NotAtStart);
          ++i;
          varscr_string_t = v9;
        }
        varSpawnPointEntityRecord = v5;
      }
      pos = g_streamPosGlob.pos;
      varSpawnPointRecordList = (SpawnPointRecordList *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_Spawner
==============
*/
void Postload_Spawner(const DBStreamStart streamStart)
{
  Spawner *v2; 
  SpawnerField *v3; 
  __int64 numFields; 
  unsigned __int64 v5; 
  SpawnerField *i; 
  SpawnerField *v7; 
  scr_string_t *v8; 
  scr_string_t *v9; 

  if ( streamStart != (varSpawner != (Spawner *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varSpawner, 0x38ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x38ui64);
  v2 = varSpawner;
  if ( varSpawner->fields )
  {
    v3 = varSpawnerField;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->fields = (SpawnerField *)g_streamPosGlob.pos;
    varSpawnerField = (SpawnerField *)g_streamPosGlob.pos;
    numFields = varSpawner->numFields;
    v5 = 16 * numFields;
    if ( 16 * numFields )
    {
      if ( v5 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v5);
    }
    for ( i = varSpawnerField; numFields; --numFields )
    {
      v7 = i;
      varSpawnerField = i;
      if ( i == (SpawnerField *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x10ui64);
        v7 = varSpawnerField;
      }
      v8 = varscr_string_t;
      varscr_string_t = &v7->key;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = &varSpawnerField->value;
      Postload_scr_string_t(NotAtStart);
      ++i;
      varscr_string_t = v8;
    }
    varSpawnerField = v3;
  }
  v9 = varscr_string_t;
  varscr_string_t = &varSpawner->targetname;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = &varSpawner->classname;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = v9;
}

/*
==============
Postload_SpawnerArray
==============
*/
void Postload_SpawnerArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  Spawner *i; 

  v2 = count;
  Postload_Stream_7(streamStart, varSpawner, 56 * count);
  for ( i = varSpawner; v2; --v2 )
  {
    varSpawner = i;
    Postload_Spawner(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_SpawnerField
==============
*/
void Postload_SpawnerField(const DBStreamStart streamStart)
{
  scr_string_t *v2; 

  if ( streamStart != (varSpawnerField != (SpawnerField *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varSpawnerField, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
  v2 = varscr_string_t;
  varscr_string_t = &varSpawnerField->key;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = &varSpawnerField->value;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = v2;
}

/*
==============
Postload_SpawnerFieldArray
==============
*/
void Postload_SpawnerFieldArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SpawnerField *i; 
  SpawnerField *v4; 
  scr_string_t *v5; 

  v2 = count;
  Postload_Stream_7(streamStart, varSpawnerField, 16 * count);
  for ( i = varSpawnerField; v2; --v2 )
  {
    v4 = i;
    varSpawnerField = i;
    if ( i == (SpawnerField *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x10ui64);
      v4 = varSpawnerField;
    }
    v5 = varscr_string_t;
    varscr_string_t = &v4->key;
    Postload_scr_string_t(NotAtStart);
    varscr_string_t = &varSpawnerField->value;
    Postload_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v5;
  }
}

/*
==============
Postload_SpawnerFieldStream
==============
*/
void Postload_SpawnerFieldStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  scr_string_t *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 26660, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varSpawnerField;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x10ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      v5 = varscr_string_t;
      g_streamPosGlob.pos += 16;
      varscr_string_t = &varSpawnerField->key;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = &varSpawnerField->value;
      Postload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varSpawnerField = (SpawnerField *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varscr_string_t = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_SpawnerList
==============
*/
void Postload_SpawnerList(const DBStreamStart streamStart)
{
  SpawnerList *v2; 
  Spawner *v3; 
  __int64 spawnerCount; 
  Spawner *i; 

  if ( streamStart != (varSpawnerList != (SpawnerList *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varSpawnerList, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
  v2 = varSpawnerList;
  if ( varSpawnerList->spanwerList )
  {
    v3 = varSpawner;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->spanwerList = (Spawner *)g_streamPosGlob.pos;
    varSpawner = (Spawner *)g_streamPosGlob.pos;
    spawnerCount = varSpawnerList->spawnerCount;
    if ( 56 * spawnerCount )
    {
      if ( (unsigned __int64)(56 * spawnerCount) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(56 * spawnerCount);
    }
    for ( i = varSpawner; spawnerCount; --spawnerCount )
    {
      varSpawner = i;
      Postload_Spawner(NotAtStart);
      ++i;
    }
    varSpawner = v3;
  }
}

/*
==============
Postload_SpawnerListArray
==============
*/
void Postload_SpawnerListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SpawnerList *i; 

  v2 = count;
  Postload_Stream_7(streamStart, varSpawnerList, 16 * count);
  for ( i = varSpawnerList; v2; --v2 )
  {
    varSpawnerList = i;
    Postload_SpawnerList(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_SpawnerListStream
==============
*/
void Postload_SpawnerListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  SpawnerList *v4; 
  Spawner *v5; 
  __int64 spawnerCount; 
  Spawner *i; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 27002, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varSpawnerList;
    do
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x10ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      v4 = varSpawnerList;
      g_streamPosGlob.pos += 16;
      if ( varSpawnerList->spanwerList )
      {
        v5 = varSpawner;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->spanwerList = (Spawner *)g_streamPosGlob.pos;
        varSpawner = (Spawner *)g_streamPosGlob.pos;
        spawnerCount = varSpawnerList->spawnerCount;
        if ( 56 * spawnerCount )
        {
          if ( (unsigned __int64)(56 * spawnerCount) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(56 * spawnerCount);
        }
        for ( i = varSpawner; spawnerCount; --spawnerCount )
        {
          varSpawner = i;
          Postload_Spawner(NotAtStart);
          ++i;
        }
        varSpawner = v5;
      }
      pos = g_streamPosGlob.pos;
      varSpawnerList = (SpawnerList *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_SpawnerStream
==============
*/
void Postload_SpawnerStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  Spawner *v5; 
  SpawnerField *v6; 
  __int64 numFields; 
  unsigned __int64 v8; 
  SpawnerField *i; 
  SpawnerField *v10; 
  scr_string_t *v11; 
  scr_string_t *v12; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 26900, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varSpawner;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x38ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x38ui64);
      v5 = varSpawner;
      g_streamPosGlob.pos += 56;
      if ( varSpawner->fields )
      {
        v6 = varSpawnerField;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v5->fields = (SpawnerField *)g_streamPosGlob.pos;
        varSpawnerField = (SpawnerField *)g_streamPosGlob.pos;
        numFields = varSpawner->numFields;
        v8 = 16 * numFields;
        if ( 16 * numFields )
        {
          if ( v8 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(v8);
        }
        for ( i = varSpawnerField; numFields; --numFields )
        {
          v10 = i;
          varSpawnerField = i;
          if ( i == (SpawnerField *)g_streamPosGlob.pos )
          {
            DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x10ui64);
            v10 = varSpawnerField;
          }
          v11 = varscr_string_t;
          varscr_string_t = &v10->key;
          Postload_scr_string_t(NotAtStart);
          varscr_string_t = &varSpawnerField->value;
          Postload_scr_string_t(NotAtStart);
          ++i;
          varscr_string_t = v11;
        }
        varSpawnerField = v6;
      }
      v12 = varscr_string_t;
      varscr_string_t = &varSpawner->targetname;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = &varSpawner->classname;
      Postload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varSpawner = (Spawner *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varscr_string_t = v12;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_SplinePointEntityRecord
==============
*/
void Postload_SplinePointEntityRecord(const DBStreamStart streamStart)
{
  scr_string_t *v2; 

  if ( streamStart != (varSplinePointEntityRecord != (SplinePointEntityRecord *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varSplinePointEntityRecord, 0xA8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0xA8ui64);
  v2 = varscr_string_t;
  varscr_string_t = &varSplinePointEntityRecord->splineNodeLabel;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = &varSplinePointEntityRecord->targetname;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = &varSplinePointEntityRecord->target;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = &varSplinePointEntityRecord->string;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = v2;
}

/*
==============
Postload_SplinePointEntityRecordArray
==============
*/
void Postload_SplinePointEntityRecordArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SplinePointEntityRecord *i; 
  SplinePointEntityRecord *v4; 
  scr_string_t *v5; 

  v2 = count;
  Postload_Stream_7(streamStart, varSplinePointEntityRecord, 168 * count);
  for ( i = varSplinePointEntityRecord; v2; --v2 )
  {
    v4 = i;
    varSplinePointEntityRecord = i;
    if ( i == (SplinePointEntityRecord *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0xA8ui64);
      v4 = varSplinePointEntityRecord;
    }
    v5 = varscr_string_t;
    varscr_string_t = &v4->splineNodeLabel;
    Postload_scr_string_t(NotAtStart);
    varscr_string_t = &varSplinePointEntityRecord->targetname;
    Postload_scr_string_t(NotAtStart);
    varscr_string_t = &varSplinePointEntityRecord->target;
    Postload_scr_string_t(NotAtStart);
    varscr_string_t = &varSplinePointEntityRecord->string;
    Postload_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v5;
  }
}

/*
==============
Postload_SplinePointEntityRecordStream
==============
*/
void Postload_SplinePointEntityRecordStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  scr_string_t *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 25937, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varSplinePointEntityRecord;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0xA8ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0xA8ui64);
      v5 = varscr_string_t;
      g_streamPosGlob.pos += 168;
      varscr_string_t = &varSplinePointEntityRecord->splineNodeLabel;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = &varSplinePointEntityRecord->targetname;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = &varSplinePointEntityRecord->target;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = &varSplinePointEntityRecord->string;
      Postload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varSplinePointEntityRecord = (SplinePointEntityRecord *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varscr_string_t = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_SplinePointRecordList
==============
*/
void Postload_SplinePointRecordList(const DBStreamStart streamStart)
{
  SplinePointRecordList *v2; 
  SplinePointEntityRecord *v3; 
  __int64 splinePointCount; 
  SplinePointEntityRecord *i; 
  SplinePointEntityRecord *v6; 
  scr_string_t *v7; 

  if ( streamStart != (varSplinePointRecordList != (SplinePointRecordList *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varSplinePointRecordList, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
  v2 = varSplinePointRecordList;
  if ( varSplinePointRecordList->splinePoints )
  {
    v3 = varSplinePointEntityRecord;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->splinePoints = (SplinePointEntityRecord *)g_streamPosGlob.pos;
    varSplinePointEntityRecord = (SplinePointEntityRecord *)g_streamPosGlob.pos;
    splinePointCount = varSplinePointRecordList->splinePointCount;
    if ( 168 * splinePointCount )
      DB_IncStreamPos(168 * splinePointCount);
    for ( i = varSplinePointEntityRecord; splinePointCount; --splinePointCount )
    {
      v6 = i;
      varSplinePointEntityRecord = i;
      if ( i == (SplinePointEntityRecord *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0xA8ui64);
        v6 = varSplinePointEntityRecord;
      }
      v7 = varscr_string_t;
      varscr_string_t = &v6->splineNodeLabel;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = &varSplinePointEntityRecord->targetname;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = &varSplinePointEntityRecord->target;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = &varSplinePointEntityRecord->string;
      Postload_scr_string_t(NotAtStart);
      ++i;
      varscr_string_t = v7;
    }
    varSplinePointEntityRecord = v3;
  }
}

/*
==============
Postload_SplinePointRecordListArray
==============
*/
void Postload_SplinePointRecordListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SplinePointRecordList *i; 

  v2 = count;
  Postload_Stream_7(streamStart, varSplinePointRecordList, 16 * count);
  for ( i = varSplinePointRecordList; v2; --v2 )
  {
    varSplinePointRecordList = i;
    Postload_SplinePointRecordList(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_SplinePointRecordListStream
==============
*/
void Postload_SplinePointRecordListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  SplinePointRecordList *v4; 
  SplinePointEntityRecord *v5; 
  __int64 splinePointCount; 
  SplinePointEntityRecord *i; 
  SplinePointEntityRecord *v8; 
  scr_string_t *v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 26062, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varSplinePointRecordList;
    do
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x10ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      v4 = varSplinePointRecordList;
      g_streamPosGlob.pos += 16;
      if ( varSplinePointRecordList->splinePoints )
      {
        v5 = varSplinePointEntityRecord;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->splinePoints = (SplinePointEntityRecord *)g_streamPosGlob.pos;
        varSplinePointEntityRecord = (SplinePointEntityRecord *)g_streamPosGlob.pos;
        splinePointCount = varSplinePointRecordList->splinePointCount;
        if ( 168 * splinePointCount )
          DB_IncStreamPos(168 * splinePointCount);
        for ( i = varSplinePointEntityRecord; splinePointCount; --splinePointCount )
        {
          v8 = i;
          varSplinePointEntityRecord = i;
          if ( i == (SplinePointEntityRecord *)g_streamPosGlob.pos )
          {
            DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0xA8ui64);
            v8 = varSplinePointEntityRecord;
          }
          v9 = varscr_string_t;
          varscr_string_t = &v8->splineNodeLabel;
          Postload_scr_string_t(NotAtStart);
          varscr_string_t = &varSplinePointEntityRecord->targetname;
          Postload_scr_string_t(NotAtStart);
          varscr_string_t = &varSplinePointEntityRecord->target;
          Postload_scr_string_t(NotAtStart);
          varscr_string_t = &varSplinePointEntityRecord->string;
          Postload_scr_string_t(NotAtStart);
          ++i;
          varscr_string_t = v9;
        }
        varSplinePointEntityRecord = v5;
      }
      pos = g_streamPosGlob.pos;
      varSplinePointRecordList = (SplinePointRecordList *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_SplineRecordList
==============
*/
void Postload_SplineRecordList(const DBStreamStart streamStart)
{
  SplineRecordList *v2; 
  SplinePointRecordList *v3; 
  __int64 splineCount; 
  SplinePointRecordList *i; 

  if ( streamStart != (varSplineRecordList != (SplineRecordList *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varSplineRecordList, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
  v2 = varSplineRecordList;
  if ( varSplineRecordList->splines )
  {
    v3 = varSplinePointRecordList;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->splines = (SplinePointRecordList *)g_streamPosGlob.pos;
    varSplinePointRecordList = (SplinePointRecordList *)g_streamPosGlob.pos;
    splineCount = varSplineRecordList->splineCount;
    if ( 16 * splineCount )
      DB_IncStreamPos(16 * splineCount);
    for ( i = varSplinePointRecordList; splineCount; --splineCount )
    {
      varSplinePointRecordList = i;
      Postload_SplinePointRecordList(NotAtStart);
      ++i;
    }
    varSplinePointRecordList = v3;
  }
}

/*
==============
Postload_SplineRecordListArray
==============
*/
void Postload_SplineRecordListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SplineRecordList *i; 

  v2 = count;
  Postload_Stream_7(streamStart, varSplineRecordList, 16 * count);
  for ( i = varSplineRecordList; v2; --v2 )
  {
    varSplineRecordList = i;
    Postload_SplineRecordList(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_SplineRecordListStream
==============
*/
void Postload_SplineRecordListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  SplineRecordList *v4; 
  SplinePointRecordList *v5; 
  __int64 splineCount; 
  SplinePointRecordList *i; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 26164, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varSplineRecordList;
    do
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x10ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      v4 = varSplineRecordList;
      g_streamPosGlob.pos += 16;
      if ( varSplineRecordList->splines )
      {
        v5 = varSplinePointRecordList;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->splines = (SplinePointRecordList *)g_streamPosGlob.pos;
        varSplinePointRecordList = (SplinePointRecordList *)g_streamPosGlob.pos;
        splineCount = varSplineRecordList->splineCount;
        if ( 16 * splineCount )
          DB_IncStreamPos(16 * splineCount);
        for ( i = varSplinePointRecordList; splineCount; --splineCount )
        {
          varSplinePointRecordList = i;
          Postload_SplinePointRecordList(NotAtStart);
          ++i;
        }
        varSplinePointRecordList = v5;
      }
      pos = g_streamPosGlob.pos;
      varSplineRecordList = (SplineRecordList *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_StaticModelCollisionCompressedInstance
==============
*/
void Postload_StaticModelCollisionCompressedInstance(const DBStreamStart streamStart)
{
  if ( streamStart != (varStaticModelCollisionCompressedInstance != (StaticModelCollisionCompressedInstance *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varStaticModelCollisionCompressedInstance, 0xEui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0xEui64);
}

/*
==============
Postload_StaticModelCollisionCompressedInstanceArray
==============
*/
void Postload_StaticModelCollisionCompressedInstanceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_7(streamStart, varStaticModelCollisionCompressedInstance, 14 * count);
}

/*
==============
Postload_StaticModelCollisionCompressedInstanceStream
==============
*/
void Postload_StaticModelCollisionCompressedInstanceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  StaticModelCollisionCompressedInstance *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 20451, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varStaticModelCollisionCompressedInstance;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (StaticModelCollisionCompressedInstance *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0xEui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0xEui64);
      pos = g_streamPosGlob.pos + 14;
      g_streamPosGlob.pos = pos;
      v3 = (StaticModelCollisionCompressedInstance *)pos;
      varStaticModelCollisionCompressedInstance = (StaticModelCollisionCompressedInstance *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_StaticModelCollisionCompressedModel
==============
*/
void Postload_StaticModelCollisionCompressedModel(const DBStreamStart streamStart)
{
  scr_string_t *v2; 
  PhysicsAsset **v3; 
  XModelDetailCollision **v4; 
  StaticModelCollisionCompressedModel *v5; 
  StaticModelCollisionCompressedInstance *v6; 
  unsigned __int64 v7; 

  if ( streamStart != (varStaticModelCollisionCompressedModel != (StaticModelCollisionCompressedModel *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varStaticModelCollisionCompressedModel, 0x38ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x38ui64);
  v2 = varscr_string_t;
  varscr_string_t = &varStaticModelCollisionCompressedModel->name;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = v2;
  v3 = varPhysicsAssetPtr;
  varPhysicsAssetPtr = &varStaticModelCollisionCompressedModel->physicsAsset;
  Postload_PhysicsAssetPtr(NotAtStart);
  varPhysicsAssetPtr = v3;
  v4 = varXModelDetailCollisionPtr;
  varXModelDetailCollisionPtr = &varStaticModelCollisionCompressedModel->detailCollision;
  Postload_XModelDetailCollisionPtr(NotAtStart);
  varXModelDetailCollisionPtr = v4;
  v5 = varStaticModelCollisionCompressedModel;
  if ( varStaticModelCollisionCompressedModel->instances )
  {
    v6 = varStaticModelCollisionCompressedInstance;
    DB_PatchMem_FixStreamAlignment(1ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->instances = (StaticModelCollisionCompressedInstance *)g_streamPosGlob.pos;
    varStaticModelCollisionCompressedInstance = (StaticModelCollisionCompressedInstance *)g_streamPosGlob.pos;
    v7 = 14i64 * varStaticModelCollisionCompressedModel->numInstances;
    if ( v7 )
    {
      if ( v7 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v7);
    }
    varStaticModelCollisionCompressedInstance = v6;
  }
}

/*
==============
Postload_StaticModelCollisionCompressedModelArray
==============
*/
void Postload_StaticModelCollisionCompressedModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  StaticModelCollisionCompressedModel *i; 

  v2 = count;
  Postload_Stream_7(streamStart, varStaticModelCollisionCompressedModel, 56 * count);
  for ( i = varStaticModelCollisionCompressedModel; v2; --v2 )
  {
    varStaticModelCollisionCompressedModel = i;
    Postload_StaticModelCollisionCompressedModel(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_StaticModelCollisionCompressedModelList
==============
*/
void Postload_StaticModelCollisionCompressedModelList(const DBStreamStart streamStart)
{
  StaticModelCollisionCompressedModelList *v2; 
  StaticModelCollisionCompressedModel *v3; 
  __int64 numModels; 
  StaticModelCollisionCompressedModel *i; 

  if ( streamStart != (varStaticModelCollisionCompressedModelList != (StaticModelCollisionCompressedModelList *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varStaticModelCollisionCompressedModelList, 0x20ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x20ui64);
  v2 = varStaticModelCollisionCompressedModelList;
  if ( varStaticModelCollisionCompressedModelList->models )
  {
    v3 = varStaticModelCollisionCompressedModel;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->models = (StaticModelCollisionCompressedModel *)g_streamPosGlob.pos;
    varStaticModelCollisionCompressedModel = (StaticModelCollisionCompressedModel *)g_streamPosGlob.pos;
    numModels = varStaticModelCollisionCompressedModelList->numModels;
    if ( 56 * numModels )
    {
      if ( (unsigned __int64)(56 * numModels) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(56 * numModels);
    }
    for ( i = varStaticModelCollisionCompressedModel; numModels; --numModels )
    {
      varStaticModelCollisionCompressedModel = i;
      Postload_StaticModelCollisionCompressedModel(NotAtStart);
      ++i;
    }
    varStaticModelCollisionCompressedModel = v3;
  }
}

/*
==============
Postload_StaticModelCollisionCompressedModelListArray
==============
*/
void Postload_StaticModelCollisionCompressedModelListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  StaticModelCollisionCompressedModelList *i; 

  v2 = count;
  Postload_Stream_7(streamStart, varStaticModelCollisionCompressedModelList, 32 * count);
  for ( i = varStaticModelCollisionCompressedModelList; v2; --v2 )
  {
    varStaticModelCollisionCompressedModelList = i;
    Postload_StaticModelCollisionCompressedModelList(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_StaticModelCollisionCompressedModelListStream
==============
*/
void Postload_StaticModelCollisionCompressedModelListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  StaticModelCollisionCompressedModelList *v4; 
  StaticModelCollisionCompressedModel *v5; 
  __int64 numModels; 
  StaticModelCollisionCompressedModel *i; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 21086, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varStaticModelCollisionCompressedModelList;
    do
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x20ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x20ui64);
      v4 = varStaticModelCollisionCompressedModelList;
      g_streamPosGlob.pos += 32;
      if ( varStaticModelCollisionCompressedModelList->models )
      {
        v5 = varStaticModelCollisionCompressedModel;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->models = (StaticModelCollisionCompressedModel *)g_streamPosGlob.pos;
        varStaticModelCollisionCompressedModel = (StaticModelCollisionCompressedModel *)g_streamPosGlob.pos;
        numModels = varStaticModelCollisionCompressedModelList->numModels;
        if ( 56 * numModels )
        {
          if ( (unsigned __int64)(56 * numModels) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(56 * numModels);
        }
        for ( i = varStaticModelCollisionCompressedModel; numModels; --numModels )
        {
          varStaticModelCollisionCompressedModel = i;
          Postload_StaticModelCollisionCompressedModel(NotAtStart);
          ++i;
        }
        varStaticModelCollisionCompressedModel = v5;
      }
      pos = g_streamPosGlob.pos;
      varStaticModelCollisionCompressedModelList = (StaticModelCollisionCompressedModelList *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_StaticModelCollisionCompressedModelStream
==============
*/
void Postload_StaticModelCollisionCompressedModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  scr_string_t *v4; 
  PhysicsAsset **v5; 
  XModelDetailCollision **v6; 
  StaticModelCollisionCompressedModel *v7; 
  StaticModelCollisionCompressedInstance *v8; 
  unsigned __int64 v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 20744, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varStaticModelCollisionCompressedModel;
    do
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x38ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x38ui64);
      v4 = varscr_string_t;
      g_streamPosGlob.pos += 56;
      varscr_string_t = &varStaticModelCollisionCompressedModel->name;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = v4;
      v5 = varPhysicsAssetPtr;
      varPhysicsAssetPtr = &varStaticModelCollisionCompressedModel->physicsAsset;
      Postload_PhysicsAssetPtr(NotAtStart);
      varPhysicsAssetPtr = v5;
      v6 = varXModelDetailCollisionPtr;
      varXModelDetailCollisionPtr = &varStaticModelCollisionCompressedModel->detailCollision;
      Postload_XModelDetailCollisionPtr(NotAtStart);
      varXModelDetailCollisionPtr = v6;
      v7 = varStaticModelCollisionCompressedModel;
      if ( varStaticModelCollisionCompressedModel->instances )
      {
        v8 = varStaticModelCollisionCompressedInstance;
        DB_PatchMem_FixStreamAlignment(1ui64);
        DB_CheckCanIncStreamPos(0i64);
        v7->instances = (StaticModelCollisionCompressedInstance *)g_streamPosGlob.pos;
        varStaticModelCollisionCompressedInstance = (StaticModelCollisionCompressedInstance *)g_streamPosGlob.pos;
        v9 = 14i64 * varStaticModelCollisionCompressedModel->numInstances;
        if ( v9 )
        {
          if ( v9 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(v9);
        }
        varStaticModelCollisionCompressedInstance = v8;
      }
      pos = g_streamPosGlob.pos;
      varStaticModelCollisionCompressedModel = (StaticModelCollisionCompressedModel *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_StaticModelCollisionInstance
==============
*/
void Postload_StaticModelCollisionInstance(const DBStreamStart streamStart)
{
  if ( streamStart != (varStaticModelCollisionInstance != (StaticModelCollisionInstance *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varStaticModelCollisionInstance, 0x1Cui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x1Cui64);
}

/*
==============
Postload_StaticModelCollisionInstanceArray
==============
*/
void Postload_StaticModelCollisionInstanceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_7(streamStart, varStaticModelCollisionInstance, 28 * count);
}

/*
==============
Postload_StaticModelCollisionInstanceStream
==============
*/
void Postload_StaticModelCollisionInstanceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  StaticModelCollisionInstance *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 20573, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varStaticModelCollisionInstance;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (StaticModelCollisionInstance *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x1Cui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x1Cui64);
      pos = g_streamPosGlob.pos + 28;
      g_streamPosGlob.pos = pos;
      v3 = (StaticModelCollisionInstance *)pos;
      varStaticModelCollisionInstance = (StaticModelCollisionInstance *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_StaticModelCollisionModel
==============
*/
void Postload_StaticModelCollisionModel(const DBStreamStart streamStart)
{
  scr_string_t *v2; 
  PhysicsAsset **v3; 
  XModelDetailCollision **v4; 
  StaticModelCollisionModel *v5; 
  StaticModelCollisionInstance *v6; 
  unsigned __int64 v7; 

  if ( streamStart != (varStaticModelCollisionModel != (StaticModelCollisionModel *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varStaticModelCollisionModel, 0x28ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x28ui64);
  v2 = varscr_string_t;
  varscr_string_t = &varStaticModelCollisionModel->name;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = v2;
  v3 = varPhysicsAssetPtr;
  varPhysicsAssetPtr = &varStaticModelCollisionModel->physicsAsset;
  Postload_PhysicsAssetPtr(NotAtStart);
  varPhysicsAssetPtr = v3;
  v4 = varXModelDetailCollisionPtr;
  varXModelDetailCollisionPtr = &varStaticModelCollisionModel->detailCollision;
  Postload_XModelDetailCollisionPtr(NotAtStart);
  varXModelDetailCollisionPtr = v4;
  v5 = varStaticModelCollisionModel;
  if ( varStaticModelCollisionModel->instances )
  {
    v6 = varStaticModelCollisionInstance;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->instances = (StaticModelCollisionInstance *)g_streamPosGlob.pos;
    varStaticModelCollisionInstance = (StaticModelCollisionInstance *)g_streamPosGlob.pos;
    v7 = 28i64 * varStaticModelCollisionModel->numInstances;
    if ( v7 )
    {
      if ( v7 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v7);
    }
    varStaticModelCollisionInstance = v6;
  }
}

/*
==============
Postload_StaticModelCollisionModelArray
==============
*/
void Postload_StaticModelCollisionModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  StaticModelCollisionModel *i; 

  v2 = count;
  Postload_Stream_7(streamStart, varStaticModelCollisionModel, 40 * count);
  for ( i = varStaticModelCollisionModel; v2; --v2 )
  {
    varStaticModelCollisionModel = i;
    Postload_StaticModelCollisionModel(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_StaticModelCollisionModelList
==============
*/
void Postload_StaticModelCollisionModelList(const DBStreamStart streamStart)
{
  StaticModelCollisionModelList *v2; 
  StaticModelCollisionModel *v3; 
  __int64 numModels; 
  StaticModelCollisionModel *i; 

  if ( streamStart != (varStaticModelCollisionModelList != (StaticModelCollisionModelList *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varStaticModelCollisionModelList, 0x18ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x18ui64);
  v2 = varStaticModelCollisionModelList;
  if ( varStaticModelCollisionModelList->models )
  {
    v3 = varStaticModelCollisionModel;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->models = (StaticModelCollisionModel *)g_streamPosGlob.pos;
    varStaticModelCollisionModel = (StaticModelCollisionModel *)g_streamPosGlob.pos;
    numModels = varStaticModelCollisionModelList->numModels;
    if ( 40 * numModels )
    {
      if ( (unsigned __int64)(40 * numModels) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(40 * numModels);
    }
    for ( i = varStaticModelCollisionModel; numModels; --numModels )
    {
      varStaticModelCollisionModel = i;
      Postload_StaticModelCollisionModel(NotAtStart);
      ++i;
    }
    varStaticModelCollisionModel = v3;
  }
}

/*
==============
Postload_StaticModelCollisionModelListArray
==============
*/
void Postload_StaticModelCollisionModelListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  StaticModelCollisionModelList *i; 

  v2 = count;
  Postload_Stream_7(streamStart, varStaticModelCollisionModelList, 24 * count);
  for ( i = varStaticModelCollisionModelList; v2; --v2 )
  {
    varStaticModelCollisionModelList = i;
    Postload_StaticModelCollisionModelList(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_StaticModelCollisionModelListStream
==============
*/
void Postload_StaticModelCollisionModelListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  StaticModelCollisionModelList *v4; 
  StaticModelCollisionModel *v5; 
  __int64 numModels; 
  StaticModelCollisionModel *i; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 21211, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varStaticModelCollisionModelList;
    do
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x18ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x18ui64);
      v4 = varStaticModelCollisionModelList;
      g_streamPosGlob.pos += 24;
      if ( varStaticModelCollisionModelList->models )
      {
        v5 = varStaticModelCollisionModel;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->models = (StaticModelCollisionModel *)g_streamPosGlob.pos;
        varStaticModelCollisionModel = (StaticModelCollisionModel *)g_streamPosGlob.pos;
        numModels = varStaticModelCollisionModelList->numModels;
        if ( 40 * numModels )
        {
          if ( (unsigned __int64)(40 * numModels) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(40 * numModels);
        }
        for ( i = varStaticModelCollisionModel; numModels; --numModels )
        {
          varStaticModelCollisionModel = i;
          Postload_StaticModelCollisionModel(NotAtStart);
          ++i;
        }
        varStaticModelCollisionModel = v5;
      }
      pos = g_streamPosGlob.pos;
      varStaticModelCollisionModelList = (StaticModelCollisionModelList *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_StaticModelCollisionModelStream
==============
*/
void Postload_StaticModelCollisionModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  scr_string_t *v4; 
  PhysicsAsset **v5; 
  XModelDetailCollision **v6; 
  StaticModelCollisionModel *v7; 
  StaticModelCollisionInstance *v8; 
  unsigned __int64 v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 20915, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varStaticModelCollisionModel;
    do
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x28ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x28ui64);
      v4 = varscr_string_t;
      g_streamPosGlob.pos += 40;
      varscr_string_t = &varStaticModelCollisionModel->name;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = v4;
      v5 = varPhysicsAssetPtr;
      varPhysicsAssetPtr = &varStaticModelCollisionModel->physicsAsset;
      Postload_PhysicsAssetPtr(NotAtStart);
      varPhysicsAssetPtr = v5;
      v6 = varXModelDetailCollisionPtr;
      varXModelDetailCollisionPtr = &varStaticModelCollisionModel->detailCollision;
      Postload_XModelDetailCollisionPtr(NotAtStart);
      varXModelDetailCollisionPtr = v6;
      v7 = varStaticModelCollisionModel;
      if ( varStaticModelCollisionModel->instances )
      {
        v8 = varStaticModelCollisionInstance;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v7->instances = (StaticModelCollisionInstance *)g_streamPosGlob.pos;
        varStaticModelCollisionInstance = (StaticModelCollisionInstance *)g_streamPosGlob.pos;
        v9 = 28i64 * varStaticModelCollisionModel->numInstances;
        if ( v9 )
        {
          if ( v9 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(v9);
        }
        varStaticModelCollisionInstance = v8;
      }
      pos = g_streamPosGlob.pos;
      varStaticModelCollisionModel = (StaticModelCollisionModel *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_TriggerHull
==============
*/
void Postload_TriggerHull(const DBStreamStart streamStart)
{
  if ( streamStart != (varTriggerHull != (TriggerHull *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varTriggerHull, 0x20ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x20ui64);
}

/*
==============
Postload_TriggerHullArray
==============
*/
void Postload_TriggerHullArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_7(streamStart, varTriggerHull, 32 * count);
}

/*
==============
Postload_TriggerHullStream
==============
*/
void Postload_TriggerHullStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  TriggerHull *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 21913, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varTriggerHull;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (TriggerHull *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x20ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x20ui64);
      pos = g_streamPosGlob.pos + 32;
      g_streamPosGlob.pos = pos;
      v3 = (TriggerHull *)pos;
      varTriggerHull = (TriggerHull *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_TriggerModel
==============
*/
void Postload_TriggerModel(const DBStreamStart streamStart)
{
  PhysicsAsset **v2; 

  if ( streamStart != (varTriggerModel != (TriggerModel *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varTriggerModel, 0x20ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x20ui64);
  v2 = varPhysicsAssetPtr;
  varPhysicsAssetPtr = &varTriggerModel->physicsAsset;
  Postload_PhysicsAssetPtr(NotAtStart);
  varPhysicsAssetPtr = v2;
}

/*
==============
Postload_TriggerModelArray
==============
*/
void Postload_TriggerModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  TriggerModel *i; 
  TriggerModel *v4; 
  PhysicsAsset **v5; 

  v2 = count;
  Postload_Stream_7(streamStart, varTriggerModel, 32 * count);
  for ( i = varTriggerModel; v2; --v2 )
  {
    v4 = i;
    varTriggerModel = i;
    if ( i == (TriggerModel *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x20ui64);
      v4 = varTriggerModel;
    }
    v5 = varPhysicsAssetPtr;
    varPhysicsAssetPtr = &v4->physicsAsset;
    Postload_PhysicsAssetPtr(NotAtStart);
    ++i;
    varPhysicsAssetPtr = v5;
  }
}

/*
==============
Postload_TriggerModelStream
==============
*/
void Postload_TriggerModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  PhysicsAsset **v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 22150, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varTriggerModel;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x20ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x20ui64);
      v5 = varPhysicsAssetPtr;
      g_streamPosGlob.pos += 32;
      varPhysicsAssetPtr = &varTriggerModel->physicsAsset;
      Postload_PhysicsAssetPtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varTriggerModel = (TriggerModel *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varPhysicsAssetPtr = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_TriggerSlab
==============
*/
void Postload_TriggerSlab(const DBStreamStart streamStart)
{
  if ( streamStart != (varTriggerSlab != (TriggerSlab *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varTriggerSlab, 0x14ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x14ui64);
}

/*
==============
Postload_TriggerSlabArray
==============
*/
void Postload_TriggerSlabArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_7(streamStart, varTriggerSlab, 20 * count);
}

/*
==============
Postload_TriggerSlabStream
==============
*/
void Postload_TriggerSlabStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  TriggerSlab *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 21768, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varTriggerSlab;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (TriggerSlab *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x14ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x14ui64);
      pos = g_streamPosGlob.pos + 20;
      g_streamPosGlob.pos = pos;
      v3 = (TriggerSlab *)pos;
      varTriggerSlab = (TriggerSlab *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_TriggerWinding
==============
*/
void Postload_TriggerWinding(const DBStreamStart streamStart)
{
  if ( streamStart != (varTriggerWinding != (TriggerWinding *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varTriggerWinding, 0x14ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x14ui64);
}

/*
==============
Postload_TriggerWindingArray
==============
*/
void Postload_TriggerWindingArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_7(streamStart, varTriggerWinding, 20 * count);
}

/*
==============
Postload_TriggerWindingPoint
==============
*/
void Postload_TriggerWindingPoint(const DBStreamStart streamStart)
{
  if ( streamStart != (varTriggerWindingPoint != (TriggerWindingPoint *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varTriggerWindingPoint, 0xCui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0xCui64);
}

/*
==============
Postload_TriggerWindingPointArray
==============
*/
void Postload_TriggerWindingPointArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_7(streamStart, varTriggerWindingPoint, 12 * count);
}

/*
==============
Postload_TriggerWindingPointStream
==============
*/
void Postload_TriggerWindingPointStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  TriggerWindingPoint *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 21501, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varTriggerWindingPoint;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (TriggerWindingPoint *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0xCui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0xCui64);
      pos = g_streamPosGlob.pos + 12;
      g_streamPosGlob.pos = pos;
      v3 = (TriggerWindingPoint *)pos;
      varTriggerWindingPoint = (TriggerWindingPoint *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_TriggerWindingStream
==============
*/
void Postload_TriggerWindingStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  TriggerWinding *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 21646, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varTriggerWinding;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (TriggerWinding *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x14ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x14ui64);
      pos = g_streamPosGlob.pos + 20;
      g_streamPosGlob.pos = pos;
      v3 = (TriggerWinding *)pos;
      varTriggerWinding = (TriggerWinding *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_VariableType
==============
*/
void Postload_VariableType(const DBStreamStart streamStart)
{
  if ( streamStart != (varVariableType != (VariableType *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varVariableType, 1ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(1ui64);
}

/*
==============
Postload_VariableTypeArray
==============
*/
void Postload_VariableTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_7(streamStart, varVariableType, count);
}

/*
==============
Postload_VariableTypeStream
==============
*/
void Postload_VariableTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  VariableType *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 26515, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varVariableType;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (VariableType *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 1ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(1ui64);
      pos = g_streamPosGlob.pos + 1;
      g_streamPosGlob.pos = pos;
      v3 = (VariableType *)pos;
      varVariableType = (VariableType *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_alignHavokShapeData_t
==============
*/
void Postload_alignHavokShapeData_t(const DBStreamStart streamStart)
{
  if ( streamStart != (varalignHavokShapeData_t != (char *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varalignHavokShapeData_t, 1ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(1ui64);
}

/*
==============
Postload_alignHavokShapeData_tArray
==============
*/
void Postload_alignHavokShapeData_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_7(streamStart, varalignHavokShapeData_t, count);
}

/*
==============
Postload_alignHavokShapeData_tStream
==============
*/
void Postload_alignHavokShapeData_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  char *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 26316, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varalignHavokShapeData_t;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (char *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 1ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(1ui64);
      pos = g_streamPosGlob.pos + 1;
      g_streamPosGlob.pos = pos;
      v3 = (char *)pos;
      varalignHavokShapeData_t = (char *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_clipMap_ptr
==============
*/
void Postload_clipMap_ptr(const DBStreamStart streamStart)
{
  unsigned __int8 *inserted; 
  clipMap_t **v3; 
  __int64 v4; 
  clipMap_t *v5; 

  inserted = NULL;
  if ( streamStart != (varclipMap_ptr != (clipMap_t **)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varclipMap_ptr, 8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(8ui64);
  DB_PushStreamPos(2u);
  v3 = varclipMap_ptr;
  v4 = (__int64)*varclipMap_ptr;
  if ( *varclipMap_ptr )
  {
    if ( v4 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v4 != -2 && v4 != -3 )
    {
      DB_ConvertOffsetToAlias((unsigned __int64 *)varclipMap_ptr);
      goto LABEL_17;
    }
    v5 = varclipMap_t;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    *v3 = (clipMap_t *)g_streamPosGlob.pos;
    varclipMap_t = (clipMap_t *)g_streamPosGlob.pos;
    if ( v4 == -3 )
      inserted = DB_InsertPointer();
    Postload_clipMap_t(AtStart);
    Load_ClipMapAsset(v3);
    varclipMap_t = v5;
    if ( inserted )
      *(_QWORD *)inserted = *v3;
    if ( v4 == -1 )
      DB_PopSharedData();
  }
LABEL_17:
  DB_PopStreamPos();
}

/*
==============
Postload_clipMap_ptrArray
==============
*/
void Postload_clipMap_ptrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  clipMap_t **i; 

  v2 = count;
  Postload_Stream_7(streamStart, varclipMap_ptr, 8 * count);
  for ( i = varclipMap_ptr; v2; --v2 )
  {
    varclipMap_ptr = i;
    Postload_clipMap_ptr(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_clipMap_ptrStream
==============
*/
void Postload_clipMap_ptrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  clipMap_t **v5; 
  __int64 v6; 
  clipMap_t *v7; 
  unsigned __int8 *inserted; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 34041, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varclipMap_ptr;
    pos = g_streamPosGlob.pos;
    while ( 1 )
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 8ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(8ui64);
      g_streamPosGlob.pos += 8;
      DB_PushStreamPos(2u);
      v5 = varclipMap_ptr;
      v6 = (__int64)*varclipMap_ptr;
      if ( !*varclipMap_ptr )
        goto LABEL_23;
      if ( v6 == -1 )
        break;
      if ( v6 == -2 || v6 == -3 )
        goto LABEL_17;
      DB_ConvertOffsetToAlias((unsigned __int64 *)varclipMap_ptr);
LABEL_23:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varclipMap_ptr = (clipMap_t **)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_17:
    v7 = varclipMap_t;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    inserted = NULL;
    *v5 = (clipMap_t *)g_streamPosGlob.pos;
    varclipMap_t = (clipMap_t *)g_streamPosGlob.pos;
    if ( v6 == -3 )
      inserted = DB_InsertPointer();
    Postload_clipMap_t(AtStart);
    Load_ClipMapAsset(v5);
    varclipMap_t = v7;
    if ( inserted )
      *(_QWORD *)inserted = *v5;
    if ( v6 == -1 )
      DB_PopSharedData();
    goto LABEL_23;
  }
}

/*
==============
Postload_clipMap_t
==============
*/
void Postload_clipMap_t(const DBStreamStart streamStart)
{
  const char **v2; 
  clipMap_t *v3; 
  StaticModelCollisionModelList *v4; 
  __int64 numStaticModelCollisionModelLists; 
  StaticModelCollisionModelList *i; 
  MapEnts **v7; 
  clipMap_t *v8; 
  Stage *v9; 
  Stage *v10; 
  MapTriggers *v11; 
  clipMap_t *v12; 
  char *v13; 
  unsigned __int64 havokWorldShapeDataSize; 
  clipMap_t *v15; 
  CollisionHeatmapEntry *v16; 
  unsigned __int64 v17; 
  clipMap_t *v18; 
  TopDownMapData *topDownMapData; 
  TopDownMapData *v20; 
  TopDownMapData *v21; 
  const char **v22; 

  DB_PatchMem_PostLoad_PushAsset(19, varclipMap_t);
  if ( streamStart != (varclipMap_t != (clipMap_t *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varclipMap_t, 0xF8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0xF8ui64);
  DB_PushStreamPos(8u);
  v2 = varXString;
  varXString = &varclipMap_t->name;
  Postload_XString(NotAtStart);
  varXString = v2;
  v3 = varclipMap_t;
  if ( varclipMap_t->staticModelCollisionModelLists )
  {
    v4 = varStaticModelCollisionModelList;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v3->staticModelCollisionModelLists = (StaticModelCollisionModelList *)g_streamPosGlob.pos;
    varStaticModelCollisionModelList = (StaticModelCollisionModelList *)g_streamPosGlob.pos;
    numStaticModelCollisionModelLists = varclipMap_t->numStaticModelCollisionModelLists;
    if ( 24 * numStaticModelCollisionModelLists )
    {
      if ( (unsigned __int64)(24 * numStaticModelCollisionModelLists) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(24 * numStaticModelCollisionModelLists);
    }
    for ( i = varStaticModelCollisionModelList; numStaticModelCollisionModelLists; --numStaticModelCollisionModelLists )
    {
      varStaticModelCollisionModelList = i;
      Postload_StaticModelCollisionModelList(NotAtStart);
      ++i;
    }
    varStaticModelCollisionModelList = v4;
  }
  v7 = varMapEntsPtr;
  varMapEntsPtr = &varclipMap_t->mapEnts;
  Postload_MapEntsPtr(NotAtStart);
  v8 = varclipMap_t;
  varMapEntsPtr = v7;
  if ( varclipMap_t->stages )
  {
    v9 = varStage;
    v10 = AllocPostload_Stage();
    v8->stages = v10;
    varStage = v10;
    Postload_StageArray(AtStart, varclipMap_t->stageCount);
    v8 = varclipMap_t;
    varStage = v9;
  }
  v11 = varMapTriggers;
  varMapTriggers = &v8->stageTrigger;
  Postload_MapTriggers(NotAtStart);
  varMapTriggers = v11;
  v12 = varclipMap_t;
  if ( varclipMap_t->havokWorldShapeData )
  {
    v13 = varalignHavokShapeData_t;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    v12->havokWorldShapeData = (char *)g_streamPosGlob.pos;
    varalignHavokShapeData_t = (char *)g_streamPosGlob.pos;
    havokWorldShapeDataSize = varclipMap_t->havokWorldShapeDataSize;
    if ( varclipMap_t->havokWorldShapeDataSize )
    {
      if ( havokWorldShapeDataSize > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(havokWorldShapeDataSize);
    }
    varalignHavokShapeData_t = v13;
  }
  v15 = varclipMap_t;
  if ( varclipMap_t->collisionHeatmap )
  {
    v16 = varCollisionHeatmapEntry;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v15->collisionHeatmap = (CollisionHeatmapEntry *)g_streamPosGlob.pos;
    varCollisionHeatmapEntry = (CollisionHeatmapEntry *)g_streamPosGlob.pos;
    v17 = 32i64 * varclipMap_t->numCollisionHeatmapEntries;
    if ( v17 )
    {
      if ( v17 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v17);
    }
    varCollisionHeatmapEntry = v16;
  }
  v18 = varclipMap_t;
  topDownMapData = varclipMap_t->topDownMapData;
  if ( topDownMapData )
  {
    if ( topDownMapData == (TopDownMapData *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( topDownMapData != (TopDownMapData *)-2i64 )
    {
      v18->topDownMapData = (TopDownMapData *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varclipMap_t->topDownMapData);
      goto LABEL_37;
    }
    v20 = varTopDownMapData;
    v21 = AllocPostload_TopDownMapData();
    v18->topDownMapData = v21;
    varTopDownMapData = v21;
    Postload_TopDownMapData(AtStart);
    varTopDownMapData = v20;
    if ( topDownMapData == (TopDownMapData *)-1i64 )
      DB_PopSharedData();
  }
LABEL_37:
  v22 = varXString;
  varXString = &varclipMap_t->visionSetName;
  Postload_XString(NotAtStart);
  varXString = v22;
  DB_PopStreamPos();
  DB_PatchMem_PopAsset();
}

/*
==============
Postload_clipMap_tArray
==============
*/
void Postload_clipMap_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  clipMap_t *i; 

  v2 = count;
  Postload_Stream_7(streamStart, varclipMap_t, 248 * count);
  for ( i = varclipMap_t; v2; --v2 )
  {
    varclipMap_t = i;
    Postload_clipMap_t(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_clipMap_tStream
==============
*/
void Postload_clipMap_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 33914, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Postload_clipMap_t(AtStart);
    varclipMap_t = (clipMap_t *)g_streamPosGlob.pos;
  }
}

/*
==============
Postload_cmodel_t
==============
*/
void Postload_cmodel_t(const DBStreamStart streamStart)
{
  PhysicsAsset **v2; 

  if ( streamStart != (varcmodel_t != (cmodel_t *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varcmodel_t, 0x38ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x38ui64);
  v2 = varPhysicsAssetPtr;
  varPhysicsAssetPtr = &varcmodel_t->physicsAsset;
  Postload_PhysicsAssetPtr(NotAtStart);
  varPhysicsAssetPtr = v2;
}

/*
==============
Postload_cmodel_tArray
==============
*/
void Postload_cmodel_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  cmodel_t *i; 
  cmodel_t *v4; 
  PhysicsAsset **v5; 

  v2 = count;
  Postload_Stream_7(streamStart, varcmodel_t, 56 * count);
  for ( i = varcmodel_t; v2; --v2 )
  {
    v4 = i;
    varcmodel_t = i;
    if ( i == (cmodel_t *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x38ui64);
      v4 = varcmodel_t;
    }
    v5 = varPhysicsAssetPtr;
    varPhysicsAssetPtr = &v4->physicsAsset;
    Postload_PhysicsAssetPtr(NotAtStart);
    ++i;
    varPhysicsAssetPtr = v5;
  }
}

/*
==============
Postload_cmodel_tStream
==============
*/
void Postload_cmodel_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  PhysicsAsset **v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 21425, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varcmodel_t;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x38ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x38ui64);
      v5 = varPhysicsAssetPtr;
      g_streamPosGlob.pos += 56;
      varPhysicsAssetPtr = &varcmodel_t->physicsAsset;
      Postload_PhysicsAssetPtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varcmodel_t = (cmodel_t *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varPhysicsAssetPtr = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_AddonMapEnts
==============
*/
void Preload_AddonMapEnts(const DBStreamStart streamStart)
{
  const char **v2; 
  AddonMapEnts *v3; 
  char *v4; 
  MapTriggers *v5; 
  AddonMapEnts *v6; 
  cmodel_t *v7; 
  GfxBrushModel *v8; 

  DB_PatchMem_PushAsset(56, varAddonMapEnts);
  Load_Stream(streamStart, varAddonMapEnts, 0x80ui64);
  DB_PushStreamPos(8u);
  v2 = varXString;
  varXString = &varAddonMapEnts->name;
  Preload_XString(NotAtStart);
  v3 = varAddonMapEnts;
  varXString = v2;
  if ( varAddonMapEnts->entityString )
  {
    v4 = varchar;
    varchar = AllocPreload_char();
    Preload_charArray(AtStart, varAddonMapEnts->numEntityChars);
    v3 = varAddonMapEnts;
    varchar = v4;
  }
  v5 = varMapTriggers;
  varMapTriggers = &v3->trigger;
  Preload_MapTriggers(NotAtStart);
  v6 = varAddonMapEnts;
  varMapTriggers = v5;
  if ( varAddonMapEnts->cmodels )
  {
    v7 = varcmodel_t;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varcmodel_t = (cmodel_t *)g_streamPosGlob.pos;
    Preload_cmodel_tArray(AtStart, varAddonMapEnts->numSubModels);
    v6 = varAddonMapEnts;
    varcmodel_t = v7;
  }
  if ( v6->models )
  {
    v8 = varGfxBrushModel;
    varGfxBrushModel = AllocPreload_GfxBrushModel();
    Preload_GfxBrushModelArray(AtStart, varAddonMapEnts->numSubModels);
    varGfxBrushModel = v8;
  }
  DB_PopStreamPos();
  DB_PatchMem_PopAsset();
}

/*
==============
Preload_AddonMapEntsArray
==============
*/
void Preload_AddonMapEntsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  AddonMapEnts *i; 
  const char **v4; 
  AddonMapEnts *v5; 
  char *v6; 
  MapTriggers *v7; 
  AddonMapEnts *v8; 
  cmodel_t *v9; 
  GfxBrushModel *v10; 

  v2 = count;
  Load_Stream(streamStart, varAddonMapEnts, count << 7);
  for ( i = varAddonMapEnts; v2; --v2 )
  {
    varAddonMapEnts = i;
    DB_PatchMem_PushAsset(56, i);
    Load_Stream(NotAtStart, varAddonMapEnts, 0x80ui64);
    DB_PushStreamPos(8u);
    v4 = varXString;
    varXString = &varAddonMapEnts->name;
    Preload_XString(NotAtStart);
    v5 = varAddonMapEnts;
    varXString = v4;
    if ( varAddonMapEnts->entityString )
    {
      v6 = varchar;
      varchar = AllocPreload_char();
      Preload_charArray(AtStart, varAddonMapEnts->numEntityChars);
      v5 = varAddonMapEnts;
      varchar = v6;
    }
    v7 = varMapTriggers;
    varMapTriggers = &v5->trigger;
    Preload_MapTriggers(NotAtStart);
    v8 = varAddonMapEnts;
    varMapTriggers = v7;
    if ( varAddonMapEnts->cmodels )
    {
      v9 = varcmodel_t;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varcmodel_t = (cmodel_t *)g_streamPosGlob.pos;
      Preload_cmodel_tArray(AtStart, varAddonMapEnts->numSubModels);
      v8 = varAddonMapEnts;
      varcmodel_t = v9;
    }
    if ( v8->models )
    {
      v10 = varGfxBrushModel;
      varGfxBrushModel = AllocPreload_GfxBrushModel();
      Preload_GfxBrushModelArray(AtStart, varAddonMapEnts->numSubModels);
      varGfxBrushModel = v10;
    }
    DB_PopStreamPos();
    DB_PatchMem_PopAsset();
    ++i;
  }
}

/*
==============
Preload_AddonMapEntsPtr
==============
*/
void Preload_AddonMapEntsPtr(const DBStreamStart streamStart)
{
  __int64 v1; 
  AddonMapEnts *v2; 

  Load_Stream(streamStart, varAddonMapEntsPtr, 8ui64);
  DB_PushStreamPos(2u);
  v1 = (__int64)*varAddonMapEntsPtr;
  if ( *varAddonMapEntsPtr )
  {
    if ( v1 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v1 != -2 && v1 != -3 )
    {
      goto LABEL_11;
    }
    v2 = varAddonMapEnts;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varAddonMapEnts = (AddonMapEnts *)g_streamPosGlob.pos;
    if ( v1 == -3 )
      DB_InsertPointer();
    Preload_AddonMapEnts(AtStart);
    varAddonMapEnts = v2;
    if ( v1 == -1 )
      DB_PopSharedData();
  }
LABEL_11:
  DB_PopStreamPos();
}

/*
==============
Preload_AddonMapEntsPtrArray
==============
*/
void Preload_AddonMapEntsPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  AddonMapEnts **i; 
  __int64 v4; 
  AddonMapEnts *v5; 

  v2 = count;
  Load_Stream(streamStart, varAddonMapEntsPtr, 8 * count);
  for ( i = varAddonMapEntsPtr; v2; --v2 )
  {
    varAddonMapEntsPtr = i;
    Load_Stream(NotAtStart, i, 8ui64);
    DB_PushStreamPos(2u);
    v4 = (__int64)*varAddonMapEntsPtr;
    if ( *varAddonMapEntsPtr )
    {
      if ( v4 == -1 )
      {
        DB_PushSharedData();
LABEL_8:
        v5 = varAddonMapEnts;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varAddonMapEnts = (AddonMapEnts *)g_streamPosGlob.pos;
        if ( v4 == -3 )
          DB_InsertPointer();
        Preload_AddonMapEnts(AtStart);
        varAddonMapEnts = v5;
        if ( v4 == -1 )
          DB_PopSharedData();
        goto LABEL_12;
      }
      if ( v4 == -2 || v4 == -3 )
        goto LABEL_8;
    }
LABEL_12:
    DB_PopStreamPos();
    ++i;
  }
}

/*
==============
Preload_AddonMapEntsPtrStream
==============
*/
void Preload_AddonMapEntsPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  __int64 v4; 
  AddonMapEnts *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 46262, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varAddonMapEntsPtr;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      DB_PushStreamPos(2u);
      v4 = (__int64)*varAddonMapEntsPtr;
      if ( *varAddonMapEntsPtr )
      {
        if ( v4 == -1 )
        {
          DB_PushSharedData();
LABEL_12:
          v5 = varAddonMapEnts;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varAddonMapEnts = (AddonMapEnts *)g_streamPosGlob.pos;
          if ( v4 == -3 )
            DB_InsertPointer();
          Preload_AddonMapEnts(AtStart);
          varAddonMapEnts = v5;
          if ( v4 == -1 )
            DB_PopSharedData();
          goto LABEL_16;
        }
        if ( v4 == -2 || v4 == -3 )
          goto LABEL_12;
      }
LABEL_16:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varAddonMapEntsPtr = (AddonMapEnts **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_AddonMapEntsStream
==============
*/
void Preload_AddonMapEntsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 
  AddonMapEnts *v5; 
  char *v6; 
  MapTriggers *v7; 
  AddonMapEnts *v8; 
  cmodel_t *v9; 
  GfxBrushModel *v10; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 46147, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varAddonMapEnts;
    do
    {
      DB_PatchMem_PushAsset(56, pos);
      Load_Stream(AtStart, varAddonMapEnts, 0x80ui64);
      DB_PushStreamPos(8u);
      v4 = varXString;
      varXString = &varAddonMapEnts->name;
      Preload_XString(NotAtStart);
      v5 = varAddonMapEnts;
      varXString = v4;
      if ( varAddonMapEnts->entityString )
      {
        v6 = varchar;
        varchar = AllocPreload_char();
        Preload_charArray(AtStart, varAddonMapEnts->numEntityChars);
        v5 = varAddonMapEnts;
        varchar = v6;
      }
      v7 = varMapTriggers;
      varMapTriggers = &v5->trigger;
      Preload_MapTriggers(NotAtStart);
      v8 = varAddonMapEnts;
      varMapTriggers = v7;
      if ( varAddonMapEnts->cmodels )
      {
        v9 = varcmodel_t;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varcmodel_t = (cmodel_t *)g_streamPosGlob.pos;
        Preload_cmodel_tArray(AtStart, varAddonMapEnts->numSubModels);
        v8 = varAddonMapEnts;
        varcmodel_t = v9;
      }
      if ( v8->models )
      {
        v10 = varGfxBrushModel;
        varGfxBrushModel = AllocPreload_GfxBrushModel();
        Preload_GfxBrushModelArray(AtStart, varAddonMapEnts->numSubModels);
        varGfxBrushModel = v10;
      }
      DB_PopStreamPos();
      DB_PatchMem_PopAsset();
      pos = g_streamPosGlob.pos;
      varAddonMapEnts = (AddonMapEnts *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_AudioPASpeaker
==============
*/
void Preload_AudioPASpeaker(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varAudioPASpeaker, 0x14ui64);
}

/*
==============
Preload_AudioPASpeakerArray
==============
*/
void Preload_AudioPASpeakerArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varAudioPASpeaker, 20 * count);
}

/*
==============
Preload_AudioPASpeakerStream
==============
*/
void Preload_AudioPASpeakerStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 40756, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varAudioPASpeaker;
    do
    {
      Load_Stream(AtStart, pos, 0x14ui64);
      pos = g_streamPosGlob.pos;
      varAudioPASpeaker = (AudioPASpeaker *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_AudioPropagationEdge
==============
*/
void Preload_AudioPropagationEdge(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varAudioPropagationEdge, 4ui64);
}

/*
==============
Preload_AudioPropagationEdgeArray
==============
*/
void Preload_AudioPropagationEdgeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varAudioPropagationEdge, 4 * count);
}

/*
==============
Preload_AudioPropagationEdgeStream
==============
*/
void Preload_AudioPropagationEdgeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 40977, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varAudioPropagationEdge;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varAudioPropagationEdge = (AudioPropagationEdge *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_AudioPropagationNode
==============
*/
void Preload_AudioPropagationNode(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varAudioPropagationNode, 0x14ui64);
}

/*
==============
Preload_AudioPropagationNodeArray
==============
*/
void Preload_AudioPropagationNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varAudioPropagationNode, 20 * count);
}

/*
==============
Preload_AudioPropagationNodeStream
==============
*/
void Preload_AudioPropagationNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 40878, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varAudioPropagationNode;
    do
    {
      Load_Stream(AtStart, pos, 0x14ui64);
      pos = g_streamPosGlob.pos;
      varAudioPropagationNode = (AudioPropagationNode *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_CTAudRvbPanInfo
==============
*/
void Preload_CTAudRvbPanInfo(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varCTAudRvbPanInfo, 0x18ui64);
}

/*
==============
Preload_CTAudRvbPanInfoArray
==============
*/
void Preload_CTAudRvbPanInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varCTAudRvbPanInfo, 24 * count);
}

/*
==============
Preload_CTAudRvbPanInfoStream
==============
*/
void Preload_CTAudRvbPanInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  CTAudRvbPanInfo *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 36941, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = varCTAudRvbPanInfo;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      pos = (CTAudRvbPanInfo *)g_streamPosGlob.pos;
      varCTAudRvbPanInfo = (CTAudRvbPanInfo *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ClientEntAnchor
==============
*/
void Preload_ClientEntAnchor(const DBStreamStart streamStart)
{
  scr_string_t *v1; 

  Load_Stream(streamStart, varClientEntAnchor, 8ui64);
  v1 = varscr_string_t;
  varscr_string_t = (scr_string_t *)varClientEntAnchor;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = v1;
}

/*
==============
Preload_ClientEntAnchorArray
==============
*/
void Preload_ClientEntAnchorArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientEntAnchor *i; 
  scr_string_t *v4; 

  v2 = count;
  Load_Stream(streamStart, varClientEntAnchor, 8 * count);
  for ( i = varClientEntAnchor; v2; --v2 )
  {
    varClientEntAnchor = i;
    Load_Stream(NotAtStart, i, 8ui64);
    v4 = varscr_string_t;
    varscr_string_t = (scr_string_t *)varClientEntAnchor;
    Preload_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v4;
  }
}

/*
==============
Preload_ClientEntAnchorStream
==============
*/
void Preload_ClientEntAnchorStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  scr_string_t *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 39874, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varClientEntAnchor;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      v4 = varscr_string_t;
      varscr_string_t = (scr_string_t *)varClientEntAnchor;
      Preload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varClientEntAnchor = (ClientEntAnchor *)g_streamPosGlob.pos;
      varscr_string_t = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ClientEntityLinkToDefPtr
==============
*/
void Preload_ClientEntityLinkToDefPtr(const DBStreamStart streamStart)
{
  __int64 v1; 
  ClientEntityLinkToDef *v2; 

  Load_Stream(streamStart, varClientEntityLinkToDefPtr, 8ui64);
  v1 = (__int64)*varClientEntityLinkToDefPtr;
  if ( *varClientEntityLinkToDefPtr )
  {
    if ( v1 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v1 != -2 )
    {
      return;
    }
    v2 = varClientEntityLinkToDef;
    varClientEntityLinkToDef = AllocPreload_ClientEntityLinkToDef();
    Preload_ClientEntityLinkToDef(AtStart);
    varClientEntityLinkToDef = v2;
    if ( v1 == -1 )
      DB_PopSharedData();
  }
}

/*
==============
Preload_ClientEntityLinkToDefPtrArray
==============
*/
void Preload_ClientEntityLinkToDefPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientEntityLinkToDef **i; 
  __int64 v4; 
  ClientEntityLinkToDef *v5; 

  v2 = count;
  Load_Stream(streamStart, varClientEntityLinkToDefPtr, 8 * count);
  for ( i = varClientEntityLinkToDefPtr; v2; --v2 )
  {
    varClientEntityLinkToDefPtr = i;
    Load_Stream(NotAtStart, i, 8ui64);
    v4 = (__int64)*varClientEntityLinkToDefPtr;
    if ( *varClientEntityLinkToDefPtr )
    {
      if ( v4 == -1 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varClientEntityLinkToDef;
        varClientEntityLinkToDef = AllocPreload_ClientEntityLinkToDef();
        Preload_ClientEntityLinkToDef(AtStart);
        varClientEntityLinkToDef = v5;
        if ( v4 == -1 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( v4 == -2 )
        goto LABEL_7;
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Preload_ClientEntityLinkToDefPtrStream
==============
*/
void Preload_ClientEntityLinkToDefPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  __int64 v4; 
  ClientEntityLinkToDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 37044, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varClientEntityLinkToDefPtr;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      v4 = (__int64)*varClientEntityLinkToDefPtr;
      if ( *varClientEntityLinkToDefPtr )
      {
        if ( v4 == -1 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varClientEntityLinkToDef;
          varClientEntityLinkToDef = AllocPreload_ClientEntityLinkToDef();
          Preload_ClientEntityLinkToDef(AtStart);
          varClientEntityLinkToDef = v5;
          if ( v4 == -1 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( v4 == -2 )
          goto LABEL_11;
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varClientEntityLinkToDefPtr = (ClientEntityLinkToDef **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ClientExploderDef
==============
*/
void Preload_ClientExploderDef(const DBStreamStart streamStart)
{
  FxCombinedDef *v1; 
  SndAliasLookup *v2; 
  ClientExploderDef *v3; 
  SndAliasList *v4; 
  scr_string_t *v5; 

  Load_Stream(streamStart, varClientExploderDef, 0x40ui64);
  v1 = varFxCombinedDef;
  varFxCombinedDef = &varClientExploderDef->effect;
  Preload_FxCombinedDef(NotAtStart);
  varFxCombinedDef = v1;
  v2 = varSndAliasLookup;
  varSndAliasLookup = &varClientExploderDef->effectSound;
  Preload_SndAliasLookup(NotAtStart);
  v3 = varClientExploderDef;
  varSndAliasLookup = v2;
  if ( varClientExploderDef->aliasList )
  {
    v4 = varSndAliasList;
    varSndAliasList = AllocPreload_SndAliasList();
    Preload_SndAliasList(AtStart);
    v3 = varClientExploderDef;
    varSndAliasList = v4;
  }
  v5 = varscr_string_t;
  varscr_string_t = &v3->name;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = v5;
}

/*
==============
Preload_ClientExploderDefArray
==============
*/
void Preload_ClientExploderDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientExploderDef *i; 
  FxCombinedDef *v4; 
  SndAliasLookup *v5; 
  ClientExploderDef *v6; 
  SndAliasList *v7; 
  scr_string_t *v8; 

  v2 = count;
  Load_Stream(streamStart, varClientExploderDef, count << 6);
  for ( i = varClientExploderDef; v2; --v2 )
  {
    varClientExploderDef = i;
    Load_Stream(NotAtStart, i, 0x40ui64);
    v4 = varFxCombinedDef;
    varFxCombinedDef = &varClientExploderDef->effect;
    Preload_FxCombinedDef(NotAtStart);
    varFxCombinedDef = v4;
    v5 = varSndAliasLookup;
    varSndAliasLookup = &varClientExploderDef->effectSound;
    Preload_SndAliasLookup(NotAtStart);
    v6 = varClientExploderDef;
    varSndAliasLookup = v5;
    if ( varClientExploderDef->aliasList )
    {
      v7 = varSndAliasList;
      varSndAliasList = AllocPreload_SndAliasList();
      Preload_SndAliasList(AtStart);
      v6 = varClientExploderDef;
      varSndAliasList = v7;
    }
    v8 = varscr_string_t;
    varscr_string_t = &v6->name;
    Preload_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v8;
  }
}

/*
==============
Preload_ClientExploderDefStream
==============
*/
void Preload_ClientExploderDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  FxCombinedDef *v4; 
  SndAliasLookup *v5; 
  ClientExploderDef *v6; 
  SndAliasList *v7; 
  scr_string_t *v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 42126, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varClientExploderDef;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      v4 = varFxCombinedDef;
      varFxCombinedDef = &varClientExploderDef->effect;
      Preload_FxCombinedDef(NotAtStart);
      varFxCombinedDef = v4;
      v5 = varSndAliasLookup;
      varSndAliasLookup = &varClientExploderDef->effectSound;
      Preload_SndAliasLookup(NotAtStart);
      v6 = varClientExploderDef;
      varSndAliasLookup = v5;
      if ( varClientExploderDef->aliasList )
      {
        v7 = varSndAliasList;
        varSndAliasList = AllocPreload_SndAliasList();
        Preload_SndAliasList(AtStart);
        v6 = varClientExploderDef;
        varSndAliasList = v7;
      }
      v8 = varscr_string_t;
      varscr_string_t = &v6->name;
      Preload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varClientExploderDef = (ClientExploderDef *)g_streamPosGlob.pos;
      varscr_string_t = v8;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ClientIntervalSoundDef
==============
*/
void Preload_ClientIntervalSoundDef(const DBStreamStart streamStart)
{
  SndAliasLookup *v1; 
  SndAliasList *v2; 

  Load_Stream(streamStart, varClientIntervalSoundDef, 0x30ui64);
  v1 = varSndAliasLookup;
  varSndAliasLookup = &varClientIntervalSoundDef->effectSound;
  Preload_SndAliasLookup(NotAtStart);
  varSndAliasLookup = v1;
  if ( varClientIntervalSoundDef->aliasList )
  {
    v2 = varSndAliasList;
    varSndAliasList = AllocPreload_SndAliasList();
    Preload_SndAliasList(AtStart);
    varSndAliasList = v2;
  }
}

/*
==============
Preload_ClientIntervalSoundDefArray
==============
*/
void Preload_ClientIntervalSoundDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientIntervalSoundDef *i; 
  SndAliasLookup *v4; 
  SndAliasList *v5; 

  v2 = count;
  Load_Stream(streamStart, varClientIntervalSoundDef, 48 * count);
  for ( i = varClientIntervalSoundDef; v2; --v2 )
  {
    varClientIntervalSoundDef = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    v4 = varSndAliasLookup;
    varSndAliasLookup = &varClientIntervalSoundDef->effectSound;
    Preload_SndAliasLookup(NotAtStart);
    varSndAliasLookup = v4;
    if ( varClientIntervalSoundDef->aliasList )
    {
      v5 = varSndAliasList;
      varSndAliasList = AllocPreload_SndAliasList();
      Preload_SndAliasList(AtStart);
      varSndAliasList = v5;
    }
    ++i;
  }
}

/*
==============
Preload_ClientIntervalSoundDefStream
==============
*/
void Preload_ClientIntervalSoundDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  SndAliasLookup *v4; 
  SndAliasList *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 41900, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varClientIntervalSoundDef;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      v4 = varSndAliasLookup;
      varSndAliasLookup = &varClientIntervalSoundDef->effectSound;
      Preload_SndAliasLookup(NotAtStart);
      varSndAliasLookup = v4;
      if ( varClientIntervalSoundDef->aliasList )
      {
        v5 = varSndAliasList;
        varSndAliasList = AllocPreload_SndAliasList();
        Preload_SndAliasList(AtStart);
        varSndAliasList = v5;
      }
      pos = g_streamPosGlob.pos;
      varClientIntervalSoundDef = (ClientIntervalSoundDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ClientLoopSoundDef
==============
*/
void Preload_ClientLoopSoundDef(const DBStreamStart streamStart)
{
  SndAliasLookup *v1; 
  SndAliasList *v2; 

  Load_Stream(streamStart, varClientLoopSoundDef, 0x28ui64);
  v1 = varSndAliasLookup;
  varSndAliasLookup = &varClientLoopSoundDef->effectSound;
  Preload_SndAliasLookup(NotAtStart);
  varSndAliasLookup = v1;
  if ( varClientLoopSoundDef->aliasList )
  {
    v2 = varSndAliasList;
    varSndAliasList = AllocPreload_SndAliasList();
    Preload_SndAliasList(AtStart);
    varSndAliasList = v2;
  }
}

/*
==============
Preload_ClientLoopSoundDefArray
==============
*/
void Preload_ClientLoopSoundDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientLoopSoundDef *i; 
  SndAliasLookup *v4; 
  SndAliasList *v5; 

  v2 = count;
  Load_Stream(streamStart, varClientLoopSoundDef, 40 * count);
  for ( i = varClientLoopSoundDef; v2; --v2 )
  {
    varClientLoopSoundDef = i;
    Load_Stream(NotAtStart, i, 0x28ui64);
    v4 = varSndAliasLookup;
    varSndAliasLookup = &varClientLoopSoundDef->effectSound;
    Preload_SndAliasLookup(NotAtStart);
    varSndAliasLookup = v4;
    if ( varClientLoopSoundDef->aliasList )
    {
      v5 = varSndAliasList;
      varSndAliasList = AllocPreload_SndAliasList();
      Preload_SndAliasList(AtStart);
      varSndAliasList = v5;
    }
    ++i;
  }
}

/*
==============
Preload_ClientLoopSoundDefStream
==============
*/
void Preload_ClientLoopSoundDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  SndAliasLookup *v4; 
  SndAliasList *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 41494, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varClientLoopSoundDef;
    do
    {
      Load_Stream(AtStart, pos, 0x28ui64);
      v4 = varSndAliasLookup;
      varSndAliasLookup = &varClientLoopSoundDef->effectSound;
      Preload_SndAliasLookup(NotAtStart);
      varSndAliasLookup = v4;
      if ( varClientLoopSoundDef->aliasList )
      {
        v5 = varSndAliasList;
        varSndAliasList = AllocPreload_SndAliasList();
        Preload_SndAliasList(AtStart);
        varSndAliasList = v5;
      }
      pos = g_streamPosGlob.pos;
      varClientLoopSoundDef = (ClientLoopSoundDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ClientMapTriggers
==============
*/
void Preload_ClientMapTriggers(const DBStreamStart streamStart)
{
  ClientTriggerModel *models; 
  ClientTriggerModel *v2; 
  ClientTriggerHull *hulls; 
  ClientTriggerHull *v4; 
  TriggerSlab *slabs; 
  TriggerSlab *v6; 

  Load_Stream(streamStart, varClientMapTriggers, 0x30ui64);
  models = varClientMapTriggers->models;
  if ( models )
  {
    if ( models == (ClientTriggerModel *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( models != (ClientTriggerModel *)-2i64 )
    {
      goto LABEL_8;
    }
    v2 = varClientTriggerModel;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varClientTriggerModel = (ClientTriggerModel *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varClientMapTriggers->count);
    varClientTriggerModel = v2;
    if ( models == (ClientTriggerModel *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  hulls = varClientMapTriggers->hulls;
  if ( !hulls )
    goto LABEL_15;
  if ( hulls == (ClientTriggerHull *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( hulls != (ClientTriggerHull *)-2i64 )
  {
    goto LABEL_15;
  }
  v4 = varClientTriggerHull;
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  varClientTriggerHull = (ClientTriggerHull *)g_streamPosGlob.pos;
  Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varClientMapTriggers->hullCount);
  varClientTriggerHull = v4;
  if ( hulls == (ClientTriggerHull *)-1i64 )
    DB_PopSharedData();
LABEL_15:
  slabs = varClientMapTriggers->slabs;
  if ( !slabs )
    return;
  if ( slabs == (TriggerSlab *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( slabs != (TriggerSlab *)-2i64 )
  {
    return;
  }
  v6 = varTriggerSlab;
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  varTriggerSlab = (TriggerSlab *)g_streamPosGlob.pos;
  Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varClientMapTriggers->slabCount);
  varTriggerSlab = v6;
  if ( slabs == (TriggerSlab *)-1i64 )
    DB_PopSharedData();
}

/*
==============
Preload_ClientMapTriggersArray
==============
*/
void Preload_ClientMapTriggersArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientMapTriggers *i; 
  ClientTriggerModel *models; 
  ClientTriggerModel *v5; 
  ClientTriggerHull *hulls; 
  ClientTriggerHull *v7; 
  TriggerSlab *slabs; 
  TriggerSlab *v9; 

  v2 = count;
  Load_Stream(streamStart, varClientMapTriggers, 48 * count);
  for ( i = varClientMapTriggers; v2; --v2 )
  {
    varClientMapTriggers = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    models = varClientMapTriggers->models;
    if ( !models )
      goto LABEL_9;
    if ( models == (ClientTriggerModel *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( models != (ClientTriggerModel *)-2i64 )
    {
      goto LABEL_9;
    }
    v5 = varClientTriggerModel;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varClientTriggerModel = (ClientTriggerModel *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varClientMapTriggers->count);
    varClientTriggerModel = v5;
    if ( models == (ClientTriggerModel *)-1i64 )
      DB_PopSharedData();
LABEL_9:
    hulls = varClientMapTriggers->hulls;
    if ( !hulls )
      goto LABEL_16;
    if ( hulls == (ClientTriggerHull *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( hulls != (ClientTriggerHull *)-2i64 )
    {
      goto LABEL_16;
    }
    v7 = varClientTriggerHull;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varClientTriggerHull = (ClientTriggerHull *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varClientMapTriggers->hullCount);
    varClientTriggerHull = v7;
    if ( hulls == (ClientTriggerHull *)-1i64 )
      DB_PopSharedData();
LABEL_16:
    slabs = varClientMapTriggers->slabs;
    if ( slabs )
    {
      if ( slabs == (TriggerSlab *)-1i64 )
      {
        DB_PushSharedData();
LABEL_21:
        v9 = varTriggerSlab;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varTriggerSlab = (TriggerSlab *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varClientMapTriggers->slabCount);
        varTriggerSlab = v9;
        if ( slabs == (TriggerSlab *)-1i64 )
          DB_PopSharedData();
        goto LABEL_23;
      }
      if ( slabs == (TriggerSlab *)-2i64 )
        goto LABEL_21;
    }
LABEL_23:
    ++i;
  }
}

/*
==============
Preload_ClientMapTriggersStream
==============
*/
void Preload_ClientMapTriggersStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ClientTriggerModel *models; 
  ClientTriggerModel *v5; 
  ClientTriggerHull *hulls; 
  ClientTriggerHull *v7; 
  TriggerSlab *slabs; 
  TriggerSlab *v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 36796, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varClientMapTriggers;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      models = varClientMapTriggers->models;
      if ( !models )
        goto LABEL_13;
      if ( models == (ClientTriggerModel *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( models != (ClientTriggerModel *)-2i64 )
      {
        goto LABEL_13;
      }
      v5 = varClientTriggerModel;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varClientTriggerModel = (ClientTriggerModel *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varClientMapTriggers->count);
      varClientTriggerModel = v5;
      if ( models == (ClientTriggerModel *)-1i64 )
        DB_PopSharedData();
LABEL_13:
      hulls = varClientMapTriggers->hulls;
      if ( !hulls )
        goto LABEL_20;
      if ( hulls == (ClientTriggerHull *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( hulls != (ClientTriggerHull *)-2i64 )
      {
        goto LABEL_20;
      }
      v7 = varClientTriggerHull;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varClientTriggerHull = (ClientTriggerHull *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varClientMapTriggers->hullCount);
      varClientTriggerHull = v7;
      if ( hulls == (ClientTriggerHull *)-1i64 )
        DB_PopSharedData();
LABEL_20:
      slabs = varClientMapTriggers->slabs;
      if ( slabs )
      {
        if ( slabs == (TriggerSlab *)-1i64 )
        {
          DB_PushSharedData();
LABEL_25:
          v9 = varTriggerSlab;
          DB_PatchMem_FixStreamAlignment(3ui64);
          DB_CheckCanIncStreamPos(0i64);
          varTriggerSlab = (TriggerSlab *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varClientMapTriggers->slabCount);
          varTriggerSlab = v9;
          if ( slabs == (TriggerSlab *)-1i64 )
            DB_PopSharedData();
          goto LABEL_27;
        }
        if ( slabs == (TriggerSlab *)-2i64 )
          goto LABEL_25;
      }
LABEL_27:
      pos = g_streamPosGlob.pos;
      varClientMapTriggers = (ClientMapTriggers *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ClientOneshotEffectDef
==============
*/
void Preload_ClientOneshotEffectDef(const DBStreamStart streamStart)
{
  FxCombinedDef *v1; 
  SndAliasLookup *v2; 

  Load_Stream(streamStart, varClientOneshotEffectDef, 0x38ui64);
  v1 = varFxCombinedDef;
  varFxCombinedDef = &varClientOneshotEffectDef->effect;
  Preload_FxCombinedDef(NotAtStart);
  varFxCombinedDef = v1;
  v2 = varSndAliasLookup;
  varSndAliasLookup = &varClientOneshotEffectDef->effectSound;
  Preload_SndAliasLookup(NotAtStart);
  varSndAliasLookup = v2;
}

/*
==============
Preload_ClientOneshotEffectDefArray
==============
*/
void Preload_ClientOneshotEffectDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientOneshotEffectDef *i; 
  FxCombinedDef *v4; 
  SndAliasLookup *v5; 

  v2 = count;
  Load_Stream(streamStart, varClientOneshotEffectDef, 56 * count);
  for ( i = varClientOneshotEffectDef; v2; --v2 )
  {
    varClientOneshotEffectDef = i;
    Load_Stream(NotAtStart, i, 0x38ui64);
    v4 = varFxCombinedDef;
    varFxCombinedDef = &varClientOneshotEffectDef->effect;
    Preload_FxCombinedDef(NotAtStart);
    varFxCombinedDef = v4;
    v5 = varSndAliasLookup;
    varSndAliasLookup = &varClientOneshotEffectDef->effectSound;
    Preload_SndAliasLookup(NotAtStart);
    ++i;
    varSndAliasLookup = v5;
  }
}

/*
==============
Preload_ClientOneshotEffectDefStream
==============
*/
void Preload_ClientOneshotEffectDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  FxCombinedDef *v4; 
  SndAliasLookup *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 42327, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varClientOneshotEffectDef;
    do
    {
      Load_Stream(AtStart, pos, 0x38ui64);
      v4 = varFxCombinedDef;
      varFxCombinedDef = &varClientOneshotEffectDef->effect;
      Preload_FxCombinedDef(NotAtStart);
      varFxCombinedDef = v4;
      v5 = varSndAliasLookup;
      varSndAliasLookup = &varClientOneshotEffectDef->effectSound;
      Preload_SndAliasLookup(NotAtStart);
      pos = g_streamPosGlob.pos;
      varClientOneshotEffectDef = (ClientOneshotEffectDef *)g_streamPosGlob.pos;
      varSndAliasLookup = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ClientReactiveEntDef
==============
*/
void Preload_ClientReactiveEntDef(const DBStreamStart streamStart)
{
  FxCombinedDef *v1; 
  SndAliasLookup *v2; 
  SndAliasList *v3; 

  Load_Stream(streamStart, varClientReactiveEntDef, 0x38ui64);
  v1 = varFxCombinedDef;
  varFxCombinedDef = &varClientReactiveEntDef->effect;
  Preload_FxCombinedDef(NotAtStart);
  varFxCombinedDef = v1;
  v2 = varSndAliasLookup;
  varSndAliasLookup = &varClientReactiveEntDef->effectSound;
  Preload_SndAliasLookup(NotAtStart);
  varSndAliasLookup = v2;
  if ( varClientReactiveEntDef->aliasList )
  {
    v3 = varSndAliasList;
    varSndAliasList = AllocPreload_SndAliasList();
    Preload_SndAliasList(AtStart);
    varSndAliasList = v3;
  }
}

/*
==============
Preload_ClientReactiveEntDefArray
==============
*/
void Preload_ClientReactiveEntDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientReactiveEntDef *i; 
  FxCombinedDef *v4; 
  SndAliasLookup *v5; 
  SndAliasList *v6; 

  v2 = count;
  Load_Stream(streamStart, varClientReactiveEntDef, 56 * count);
  for ( i = varClientReactiveEntDef; v2; --v2 )
  {
    varClientReactiveEntDef = i;
    Load_Stream(NotAtStart, i, 0x38ui64);
    v4 = varFxCombinedDef;
    varFxCombinedDef = &varClientReactiveEntDef->effect;
    Preload_FxCombinedDef(NotAtStart);
    varFxCombinedDef = v4;
    v5 = varSndAliasLookup;
    varSndAliasLookup = &varClientReactiveEntDef->effectSound;
    Preload_SndAliasLookup(NotAtStart);
    varSndAliasLookup = v5;
    if ( varClientReactiveEntDef->aliasList )
    {
      v6 = varSndAliasList;
      varSndAliasList = AllocPreload_SndAliasList();
      Preload_SndAliasList(AtStart);
      varSndAliasList = v6;
    }
    ++i;
  }
}

/*
==============
Preload_ClientReactiveEntDefStream
==============
*/
void Preload_ClientReactiveEntDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  FxCombinedDef *v4; 
  SndAliasLookup *v5; 
  SndAliasList *v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 41697, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varClientReactiveEntDef;
    do
    {
      Load_Stream(AtStart, pos, 0x38ui64);
      v4 = varFxCombinedDef;
      varFxCombinedDef = &varClientReactiveEntDef->effect;
      Preload_FxCombinedDef(NotAtStart);
      varFxCombinedDef = v4;
      v5 = varSndAliasLookup;
      varSndAliasLookup = &varClientReactiveEntDef->effectSound;
      Preload_SndAliasLookup(NotAtStart);
      varSndAliasLookup = v5;
      if ( varClientReactiveEntDef->aliasList )
      {
        v6 = varSndAliasList;
        varSndAliasList = AllocPreload_SndAliasList();
        Preload_SndAliasList(AtStart);
        varSndAliasList = v6;
      }
      pos = g_streamPosGlob.pos;
      varClientReactiveEntDef = (ClientReactiveEntDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ClientRootDef
==============
*/
void Preload_ClientRootDef(const DBStreamStart streamStart)
{
  scr_string_t *v1; 

  Load_Stream(streamStart, varClientRootDef, 0x20ui64);
  v1 = varscr_string_t;
  varscr_string_t = &varClientRootDef->path;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = v1;
}

/*
==============
Preload_ClientRootDefArray
==============
*/
void Preload_ClientRootDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientRootDef *i; 
  scr_string_t *v4; 

  v2 = count;
  Load_Stream(streamStart, varClientRootDef, 32 * count);
  for ( i = varClientRootDef; v2; --v2 )
  {
    varClientRootDef = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    v4 = varscr_string_t;
    varscr_string_t = &varClientRootDef->path;
    Preload_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v4;
  }
}

/*
==============
Preload_ClientRootDefStream
==============
*/
void Preload_ClientRootDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  scr_string_t *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 42482, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varClientRootDef;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      v4 = varscr_string_t;
      varscr_string_t = &varClientRootDef->path;
      Preload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varClientRootDef = (ClientRootDef *)g_streamPosGlob.pos;
      varscr_string_t = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ClientSideEffects
==============
*/
void Preload_ClientSideEffects(const DBStreamStart streamStart)
{
  ClientSideEffects *v1; 
  ClientOneshotEffectDef *v2; 
  __int64 oneshotEffectCount; 
  ClientOneshotEffectDef *i; 
  FxCombinedDef *v5; 
  SndAliasLookup *v6; 
  SpatialPartition_Tree *v7; 
  unsigned int *v8; 
  ClientExploderDef *v9; 
  __int64 exploderCount; 
  ClientExploderDef *j; 
  ClientIntervalSoundDef *v12; 
  __int64 intervalSoundCount; 
  ClientIntervalSoundDef *k; 
  SndAliasLookup *v15; 
  SndAliasList *v16; 
  ClientLoopSoundDef *v17; 
  __int64 loopSoundCount; 
  ClientLoopSoundDef *m; 
  SndAliasLookup *v20; 
  SndAliasList *v21; 
  SpatialPartition_Tree *v22; 
  ClientReactiveEntDef *v23; 
  __int64 reactiveEntCount; 
  ClientReactiveEntDef *n; 
  SpatialPartition_Tree *v26; 
  ClientRootDef *v27; 
  __int64 rootCount; 
  ClientRootDef *ii; 
  scr_string_t *v30; 
  unsigned __int16 *v31; 

  Load_Stream(streamStart, varClientSideEffects, 0x98ui64);
  v1 = varClientSideEffects;
  if ( varClientSideEffects->oneshotEffects )
  {
    v2 = varClientOneshotEffectDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varClientOneshotEffectDef = (ClientOneshotEffectDef *)g_streamPosGlob.pos;
    oneshotEffectCount = varClientSideEffects->oneshotEffectCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 56 * oneshotEffectCount);
    for ( i = varClientOneshotEffectDef; oneshotEffectCount; --oneshotEffectCount )
    {
      varClientOneshotEffectDef = i;
      Load_Stream(NotAtStart, i, 0x38ui64);
      v5 = varFxCombinedDef;
      varFxCombinedDef = &varClientOneshotEffectDef->effect;
      Preload_FxCombinedDef(NotAtStart);
      varFxCombinedDef = v5;
      v6 = varSndAliasLookup;
      varSndAliasLookup = &varClientOneshotEffectDef->effectSound;
      Preload_SndAliasLookup(NotAtStart);
      ++i;
      varSndAliasLookup = v6;
    }
    v1 = varClientSideEffects;
    varClientOneshotEffectDef = v2;
  }
  if ( v1->oneshotEffectsTree )
  {
    v7 = varSpatialPartition_Tree;
    varSpatialPartition_Tree = AllocPreload_SpatialPartition_Tree();
    Preload_SpatialPartition_Tree(AtStart);
    v1 = varClientSideEffects;
    varSpatialPartition_Tree = v7;
  }
  if ( v1->oneshotSoundIndices )
  {
    v8 = varuint;
    varuint = AllocPreload_uint();
    Preload_uintArray(AtStart, varClientSideEffects->oneshotSoundCount);
    v1 = varClientSideEffects;
    varuint = v8;
  }
  if ( v1->exploders )
  {
    v9 = varClientExploderDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varClientExploderDef = (ClientExploderDef *)g_streamPosGlob.pos;
    exploderCount = varClientSideEffects->exploderCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, exploderCount << 6);
    for ( j = varClientExploderDef; exploderCount; --exploderCount )
    {
      varClientExploderDef = j;
      Preload_ClientExploderDef(NotAtStart);
      ++j;
    }
    v1 = varClientSideEffects;
    varClientExploderDef = v9;
  }
  if ( v1->intervalSounds )
  {
    v12 = varClientIntervalSoundDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varClientIntervalSoundDef = (ClientIntervalSoundDef *)g_streamPosGlob.pos;
    intervalSoundCount = varClientSideEffects->intervalSoundCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 48 * intervalSoundCount);
    for ( k = varClientIntervalSoundDef; intervalSoundCount; --intervalSoundCount )
    {
      varClientIntervalSoundDef = k;
      Load_Stream(NotAtStart, k, 0x30ui64);
      v15 = varSndAliasLookup;
      varSndAliasLookup = &varClientIntervalSoundDef->effectSound;
      Preload_SndAliasLookup(NotAtStart);
      varSndAliasLookup = v15;
      if ( varClientIntervalSoundDef->aliasList )
      {
        v16 = varSndAliasList;
        varSndAliasList = AllocPreload_SndAliasList();
        Preload_SndAliasList(AtStart);
        varSndAliasList = v16;
      }
      ++k;
    }
    v1 = varClientSideEffects;
    varClientIntervalSoundDef = v12;
  }
  if ( v1->loopSounds )
  {
    v17 = varClientLoopSoundDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varClientLoopSoundDef = (ClientLoopSoundDef *)g_streamPosGlob.pos;
    loopSoundCount = varClientSideEffects->loopSoundCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 40 * loopSoundCount);
    for ( m = varClientLoopSoundDef; loopSoundCount; --loopSoundCount )
    {
      varClientLoopSoundDef = m;
      Load_Stream(NotAtStart, m, 0x28ui64);
      v20 = varSndAliasLookup;
      varSndAliasLookup = &varClientLoopSoundDef->effectSound;
      Preload_SndAliasLookup(NotAtStart);
      varSndAliasLookup = v20;
      if ( varClientLoopSoundDef->aliasList )
      {
        v21 = varSndAliasList;
        varSndAliasList = AllocPreload_SndAliasList();
        Preload_SndAliasList(AtStart);
        varSndAliasList = v21;
      }
      ++m;
    }
    v1 = varClientSideEffects;
    varClientLoopSoundDef = v17;
  }
  if ( v1->soundsSpatialTree )
  {
    v22 = varSpatialPartition_Tree;
    varSpatialPartition_Tree = AllocPreload_SpatialPartition_Tree();
    Preload_SpatialPartition_Tree(AtStart);
    v1 = varClientSideEffects;
    varSpatialPartition_Tree = v22;
  }
  if ( v1->reactiveEnts )
  {
    v23 = varClientReactiveEntDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varClientReactiveEntDef = (ClientReactiveEntDef *)g_streamPosGlob.pos;
    reactiveEntCount = varClientSideEffects->reactiveEntCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 56 * reactiveEntCount);
    for ( n = varClientReactiveEntDef; reactiveEntCount; --reactiveEntCount )
    {
      varClientReactiveEntDef = n;
      Preload_ClientReactiveEntDef(NotAtStart);
      ++n;
    }
    v1 = varClientSideEffects;
    varClientReactiveEntDef = v23;
  }
  if ( v1->reactiveSpatialTree )
  {
    v26 = varSpatialPartition_Tree;
    varSpatialPartition_Tree = AllocPreload_SpatialPartition_Tree();
    Preload_SpatialPartition_Tree(AtStart);
    v1 = varClientSideEffects;
    varSpatialPartition_Tree = v26;
  }
  if ( v1->roots )
  {
    v27 = varClientRootDef;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varClientRootDef = (ClientRootDef *)g_streamPosGlob.pos;
    rootCount = varClientSideEffects->rootCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32 * rootCount);
    for ( ii = varClientRootDef; rootCount; --rootCount )
    {
      varClientRootDef = ii;
      Load_Stream(NotAtStart, ii, 0x20ui64);
      v30 = varscr_string_t;
      varscr_string_t = &varClientRootDef->path;
      Preload_scr_string_t(NotAtStart);
      ++ii;
      varscr_string_t = v30;
    }
    v1 = varClientSideEffects;
    varClientRootDef = v27;
  }
  if ( v1->parents )
  {
    v31 = varushort;
    varushort = AllocPreload_ushort();
    Preload_ushortArray(AtStart, varClientSideEffects->parentCount);
    varushort = v31;
  }
}

/*
==============
Preload_ClientSideEffectsArray
==============
*/
void Preload_ClientSideEffectsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientSideEffects *i; 

  v2 = count;
  Load_Stream(streamStart, varClientSideEffects, 152 * count);
  for ( i = varClientSideEffects; v2; --v2 )
  {
    varClientSideEffects = i;
    Preload_ClientSideEffects(NotAtStart);
    ++i;
  }
}

/*
==============
Preload_ClientSideEffectsStream
==============
*/
void Preload_ClientSideEffectsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 43004, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Preload_ClientSideEffects(AtStart);
    varClientSideEffects = (ClientSideEffects *)g_streamPosGlob.pos;
  }
}

/*
==============
Preload_ClientTriggerBlend
==============
*/
void Preload_ClientTriggerBlend(const DBStreamStart streamStart)
{
  ClientTriggerBlendNode *v1; 

  Load_Stream(streamStart, varClientTriggerBlend, 0x10ui64);
  if ( varClientTriggerBlend->blendNodes )
  {
    v1 = varClientTriggerBlendNode;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varClientTriggerBlendNode = (ClientTriggerBlendNode *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varClientTriggerBlend->numClientTriggerBlendNodes);
    varClientTriggerBlendNode = v1;
  }
}

/*
==============
Preload_ClientTriggerBlendArray
==============
*/
void Preload_ClientTriggerBlendArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientTriggerBlend *i; 
  ClientTriggerBlendNode *v4; 

  v2 = count;
  Load_Stream(streamStart, varClientTriggerBlend, 16 * count);
  for ( i = varClientTriggerBlend; v2; --v2 )
  {
    varClientTriggerBlend = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    if ( varClientTriggerBlend->blendNodes )
    {
      v4 = varClientTriggerBlendNode;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varClientTriggerBlendNode = (ClientTriggerBlendNode *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varClientTriggerBlend->numClientTriggerBlendNodes);
      varClientTriggerBlendNode = v4;
    }
    ++i;
  }
}

/*
==============
Preload_ClientTriggerBlendNode
==============
*/
void Preload_ClientTriggerBlendNode(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varClientTriggerBlendNode, 0x1Cui64);
}

/*
==============
Preload_ClientTriggerBlendNodeArray
==============
*/
void Preload_ClientTriggerBlendNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varClientTriggerBlendNode, 28 * count);
}

/*
==============
Preload_ClientTriggerBlendNodeStream
==============
*/
void Preload_ClientTriggerBlendNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 37690, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varClientTriggerBlendNode;
    do
    {
      Load_Stream(AtStart, pos, 0x1Cui64);
      pos = g_streamPosGlob.pos;
      varClientTriggerBlendNode = (ClientTriggerBlendNode *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ClientTriggerBlendStream
==============
*/
void Preload_ClientTriggerBlendStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ClientTriggerBlendNode *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 37791, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varClientTriggerBlend;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      if ( varClientTriggerBlend->blendNodes )
      {
        v4 = varClientTriggerBlendNode;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varClientTriggerBlendNode = (ClientTriggerBlendNode *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varClientTriggerBlend->numClientTriggerBlendNodes);
        varClientTriggerBlendNode = v4;
      }
      pos = g_streamPosGlob.pos;
      varClientTriggerBlend = (ClientTriggerBlend *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ClientTriggerHull
==============
*/
void Preload_ClientTriggerHull(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varClientTriggerHull, 0x20ui64);
}

/*
==============
Preload_ClientTriggerHullArray
==============
*/
void Preload_ClientTriggerHullArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varClientTriggerHull, 32 * count);
}

/*
==============
Preload_ClientTriggerHullStream
==============
*/
void Preload_ClientTriggerHullStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 35980, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varClientTriggerHull;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      pos = g_streamPosGlob.pos;
      varClientTriggerHull = (ClientTriggerHull *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ClientTriggerModel
==============
*/
void Preload_ClientTriggerModel(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varClientTriggerModel, 0xCui64);
}

/*
==============
Preload_ClientTriggerModelArray
==============
*/
void Preload_ClientTriggerModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varClientTriggerModel, 12 * count);
}

/*
==============
Preload_ClientTriggerModelStream
==============
*/
void Preload_ClientTriggerModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 36102, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varClientTriggerModel;
    do
    {
      Load_Stream(AtStart, pos, 0xCui64);
      pos = g_streamPosGlob.pos;
      varClientTriggerModel = (ClientTriggerModel *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ClientTriggers
==============
*/
void Preload_ClientTriggers(const DBStreamStart streamStart)
{
  ClientMapTriggers *v1; 
  ClientTriggers *v2; 
  char *v3; 
  __int16 *v4; 
  unsigned __int16 *v5; 
  vec3_t *v6; 
  float *v7; 
  __int16 *v8; 
  __int16 *v9; 
  __int16 *v10; 
  __int16 *v11; 
  SndBankTransient **v12; 
  CTAudRvbPanInfo *v13; 
  __int16 *v14; 
  ClientEntityLinkToDef **v15; 
  __int64 count; 
  ClientEntityLinkToDef **i; 
  __int64 v18; 
  ClientEntityLinkToDef *v19; 
  SpatialPartition_Tree *v20; 

  Load_Stream(streamStart, varClientTriggers, 0xB0ui64);
  v1 = varClientMapTriggers;
  varClientMapTriggers = &varClientTriggers->trigger;
  Preload_ClientMapTriggers(NotAtStart);
  v2 = varClientTriggers;
  varClientMapTriggers = v1;
  if ( varClientTriggers->triggerString )
  {
    v3 = varchar;
    varchar = AllocPreload_char();
    Preload_charArray(AtStart, varClientTriggers->triggerStringLength);
    v2 = varClientTriggers;
    varchar = v3;
  }
  if ( v2->visionSetTriggers )
  {
    v4 = varshort;
    varshort = AllocPreload_short();
    Preload_shortArray(AtStart, varClientTriggers->trigger.count);
    v2 = varClientTriggers;
    varshort = v4;
  }
  if ( v2->triggerType )
  {
    v5 = varuint16_t;
    varuint16_t = AllocPreload_uint16_t();
    Preload_uint16_tArray(AtStart, varClientTriggers->trigger.count);
    v2 = varClientTriggers;
    varuint16_t = v5;
  }
  if ( v2->origins )
  {
    v6 = varvec3_t;
    varvec3_t = AllocPreload_vec3_t();
    Preload_vec3_tArray(AtStart, varClientTriggers->trigger.count);
    v2 = varClientTriggers;
    varvec3_t = v6;
  }
  v7 = varfloat;
  if ( v2->scriptDelay )
  {
    varfloat = AllocPreload_float();
    Preload_floatArray(AtStart, varClientTriggers->trigger.count);
    v2 = varClientTriggers;
    varfloat = v7;
  }
  if ( v2->priority )
  {
    varfloat = AllocPreload_float();
    Preload_floatArray(AtStart, varClientTriggers->trigger.count);
    v2 = varClientTriggers;
    varfloat = v7;
  }
  if ( v2->audioTriggers )
  {
    v8 = varshort;
    varshort = AllocPreload_short();
    Preload_shortArray(AtStart, varClientTriggers->trigger.count);
    v2 = varClientTriggers;
    varshort = v8;
  }
  if ( v2->blendLookup )
  {
    v9 = varshort;
    varshort = AllocPreload_short();
    Preload_shortArray(AtStart, varClientTriggers->trigger.count);
    v2 = varClientTriggers;
    varshort = v9;
  }
  if ( v2->npcTriggers )
  {
    v10 = varshort;
    varshort = AllocPreload_short();
    Preload_shortArray(AtStart, varClientTriggers->trigger.count);
    v2 = varClientTriggers;
    varshort = v10;
  }
  if ( v2->audioStateIds )
  {
    v11 = varshort;
    varshort = AllocPreload_short();
    Preload_shortArray(AtStart, varClientTriggers->trigger.count);
    v2 = varClientTriggers;
    varshort = v11;
  }
  if ( v2->detailSoundBank )
  {
    v12 = varSndBankTransientPtr;
    varSndBankTransientPtr = AllocPreload_SndBankTransientPtr();
    Preload_SndBankTransientPtrArray(AtStart, varClientTriggers->trigger.count);
    v2 = varClientTriggers;
    varSndBankTransientPtr = v12;
  }
  if ( v2->audioRvbPanInfo )
  {
    v13 = varCTAudRvbPanInfo;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varCTAudRvbPanInfo = (CTAudRvbPanInfo *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 24i64 * varClientTriggers->trigger.count);
    v2 = varClientTriggers;
    varCTAudRvbPanInfo = v13;
  }
  if ( v2->parent )
  {
    v14 = varshort;
    varshort = AllocPreload_short();
    Preload_shortArray(AtStart, varClientTriggers->trigger.count);
    v2 = varClientTriggers;
    varshort = v14;
  }
  if ( v2->linkTo )
  {
    v15 = varClientEntityLinkToDefPtr;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varClientEntityLinkToDefPtr = (ClientEntityLinkToDef **)g_streamPosGlob.pos;
    count = varClientTriggers->trigger.count;
    Load_Stream(AtStart, g_streamPosGlob.pos, 8 * count);
    for ( i = varClientEntityLinkToDefPtr; count; --count )
    {
      varClientEntityLinkToDefPtr = i;
      Load_Stream(NotAtStart, i, 8ui64);
      v18 = (__int64)*varClientEntityLinkToDefPtr;
      if ( *varClientEntityLinkToDefPtr )
      {
        if ( v18 == -1 )
        {
          DB_PushSharedData();
LABEL_34:
          v19 = varClientEntityLinkToDef;
          varClientEntityLinkToDef = AllocPreload_ClientEntityLinkToDef();
          Preload_ClientEntityLinkToDef(AtStart);
          varClientEntityLinkToDef = v19;
          if ( v18 == -1 )
            DB_PopSharedData();
          goto LABEL_36;
        }
        if ( v18 == -2 )
          goto LABEL_34;
      }
LABEL_36:
      ++i;
    }
    v2 = varClientTriggers;
    varClientEntityLinkToDefPtr = v15;
  }
  if ( v2->spatialTree )
  {
    v20 = varSpatialPartition_Tree;
    varSpatialPartition_Tree = AllocPreload_SpatialPartition_Tree();
    Preload_SpatialPartition_Tree(AtStart);
    varSpatialPartition_Tree = v20;
  }
}

/*
==============
Preload_ClientTriggersArray
==============
*/
void Preload_ClientTriggersArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ClientTriggers *i; 

  v2 = count;
  Load_Stream(streamStart, varClientTriggers, 176 * count);
  for ( i = varClientTriggers; v2; --v2 )
  {
    varClientTriggers = i;
    Preload_ClientTriggers(NotAtStart);
    ++i;
  }
}

/*
==============
Preload_ClientTriggersStream
==============
*/
void Preload_ClientTriggersStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 37545, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Preload_ClientTriggers(AtStart);
    varClientTriggers = (ClientTriggers *)g_streamPosGlob.pos;
  }
}

/*
==============
Preload_CollMapLookupEntry
==============
*/
void Preload_CollMapLookupEntry(const DBStreamStart streamStart)
{
  const char **v1; 

  Load_Stream(streamStart, varCollMapLookupEntry, 0x10ui64);
  v1 = varXString;
  varXString = &varCollMapLookupEntry->targetName;
  Preload_XString(NotAtStart);
  varXString = v1;
}

/*
==============
Preload_CollMapLookupEntryArray
==============
*/
void Preload_CollMapLookupEntryArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  CollMapLookupEntry *i; 
  const char **v4; 

  v2 = count;
  Load_Stream(streamStart, varCollMapLookupEntry, 16 * count);
  for ( i = varCollMapLookupEntry; v2; --v2 )
  {
    varCollMapLookupEntry = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    v4 = varXString;
    varXString = &varCollMapLookupEntry->targetName;
    Preload_XString(NotAtStart);
    ++i;
    varXString = v4;
  }
}

/*
==============
Preload_CollMapLookupEntryStream
==============
*/
void Preload_CollMapLookupEntryStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 44457, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varCollMapLookupEntry;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      v4 = varXString;
      varXString = &varCollMapLookupEntry->targetName;
      Preload_XString(NotAtStart);
      pos = g_streamPosGlob.pos;
      varCollMapLookupEntry = (CollMapLookupEntry *)g_streamPosGlob.pos;
      varXString = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_CollisionHeatmapEntry
==============
*/
void Preload_CollisionHeatmapEntry(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varCollisionHeatmapEntry, 0x20ui64);
}

/*
==============
Preload_CollisionHeatmapEntryArray
==============
*/
void Preload_CollisionHeatmapEntryArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varCollisionHeatmapEntry, 32 * count);
}

/*
==============
Preload_CollisionHeatmapEntryStream
==============
*/
void Preload_CollisionHeatmapEntryStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 40095, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varCollisionHeatmapEntry;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      pos = g_streamPosGlob.pos;
      varCollisionHeatmapEntry = (CollisionHeatmapEntry *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_CollisionTile
==============
*/
void Preload_CollisionTile(const DBStreamStart streamStart)
{
  const char **v2; 
  CollisionTile *v3; 
  StaticModelCollisionCompressedModelList *v4; 
  char *v5; 
  char *v6; 

  DB_PatchMem_PushAsset(103, varCollisionTile);
  Load_Stream(streamStart, varCollisionTile, 0x48ui64);
  DB_PushStreamPos(8u);
  v2 = varXString;
  varXString = &varCollisionTile->name;
  Preload_XString(NotAtStart);
  v3 = varCollisionTile;
  varXString = v2;
  if ( varCollisionTile->staticModelCollision )
  {
    v4 = varStaticModelCollisionCompressedModelList;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varStaticModelCollisionCompressedModelList = (StaticModelCollisionCompressedModelList *)g_streamPosGlob.pos;
    Preload_StaticModelCollisionCompressedModelList(AtStart);
    v3 = varCollisionTile;
    varStaticModelCollisionCompressedModelList = v4;
  }
  if ( v3->havokTileShapeData )
  {
    v5 = varalignHavokShapeData_t;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    varalignHavokShapeData_t = (char *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, varCollisionTile->havokTileShapeDataSize);
    v3 = varCollisionTile;
    varalignHavokShapeData_t = v5;
  }
  if ( v3->havokTileShapePointer )
  {
    v6 = varchar;
    varchar = AllocPreload_char();
    Preload_char(AtStart);
    varchar = v6;
  }
  DB_PopStreamPos();
  DB_PatchMem_PopAsset();
}

/*
==============
Preload_CollisionTileArray
==============
*/
void Preload_CollisionTileArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  CollisionTile *i; 
  const char **v4; 
  CollisionTile *v5; 
  StaticModelCollisionCompressedModelList *v6; 
  char *v7; 
  char *v8; 

  v2 = count;
  Load_Stream(streamStart, varCollisionTile, 72 * count);
  for ( i = varCollisionTile; v2; --v2 )
  {
    varCollisionTile = i;
    DB_PatchMem_PushAsset(103, i);
    Load_Stream(NotAtStart, varCollisionTile, 0x48ui64);
    DB_PushStreamPos(8u);
    v4 = varXString;
    varXString = &varCollisionTile->name;
    Preload_XString(NotAtStart);
    v5 = varCollisionTile;
    varXString = v4;
    if ( varCollisionTile->staticModelCollision )
    {
      v6 = varStaticModelCollisionCompressedModelList;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varStaticModelCollisionCompressedModelList = (StaticModelCollisionCompressedModelList *)g_streamPosGlob.pos;
      Preload_StaticModelCollisionCompressedModelList(AtStart);
      v5 = varCollisionTile;
      varStaticModelCollisionCompressedModelList = v6;
    }
    if ( v5->havokTileShapeData )
    {
      v7 = varalignHavokShapeData_t;
      DB_PatchMem_FixStreamAlignment(0xFui64);
      DB_CheckCanIncStreamPos(0i64);
      varalignHavokShapeData_t = (char *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, varCollisionTile->havokTileShapeDataSize);
      v5 = varCollisionTile;
      varalignHavokShapeData_t = v7;
    }
    if ( v5->havokTileShapePointer )
    {
      v8 = varchar;
      varchar = AllocPreload_char();
      Preload_char(AtStart);
      varchar = v8;
    }
    DB_PopStreamPos();
    DB_PatchMem_PopAsset();
    ++i;
  }
}

/*
==============
Preload_CollisionTilePtr
==============
*/
void Preload_CollisionTilePtr(const DBStreamStart streamStart)
{
  __int64 v1; 
  CollisionTile *v2; 

  Load_Stream(streamStart, varCollisionTilePtr, 8ui64);
  DB_PushStreamPos(2u);
  v1 = (__int64)*varCollisionTilePtr;
  if ( *varCollisionTilePtr )
  {
    if ( v1 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v1 != -2 && v1 != -3 )
    {
      goto LABEL_11;
    }
    v2 = varCollisionTile;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varCollisionTile = (CollisionTile *)g_streamPosGlob.pos;
    if ( v1 == -3 )
      DB_InsertPointer();
    Preload_CollisionTile(AtStart);
    varCollisionTile = v2;
    if ( v1 == -1 )
      DB_PopSharedData();
  }
LABEL_11:
  DB_PopStreamPos();
}

/*
==============
Preload_CollisionTilePtrArray
==============
*/
void Preload_CollisionTilePtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  CollisionTile **i; 
  __int64 v4; 
  CollisionTile *v5; 

  v2 = count;
  Load_Stream(streamStart, varCollisionTilePtr, 8 * count);
  for ( i = varCollisionTilePtr; v2; --v2 )
  {
    varCollisionTilePtr = i;
    Load_Stream(NotAtStart, i, 8ui64);
    DB_PushStreamPos(2u);
    v4 = (__int64)*varCollisionTilePtr;
    if ( *varCollisionTilePtr )
    {
      if ( v4 == -1 )
      {
        DB_PushSharedData();
LABEL_8:
        v5 = varCollisionTile;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varCollisionTile = (CollisionTile *)g_streamPosGlob.pos;
        if ( v4 == -3 )
          DB_InsertPointer();
        Preload_CollisionTile(AtStart);
        varCollisionTile = v5;
        if ( v4 == -1 )
          DB_PopSharedData();
        goto LABEL_12;
      }
      if ( v4 == -2 || v4 == -3 )
        goto LABEL_8;
    }
LABEL_12:
    DB_PopStreamPos();
    ++i;
  }
}

/*
==============
Preload_CollisionTilePtrStream
==============
*/
void Preload_CollisionTilePtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  __int64 v4; 
  CollisionTile *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 46888, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varCollisionTilePtr;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      DB_PushStreamPos(2u);
      v4 = (__int64)*varCollisionTilePtr;
      if ( *varCollisionTilePtr )
      {
        if ( v4 == -1 )
        {
          DB_PushSharedData();
LABEL_12:
          v5 = varCollisionTile;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varCollisionTile = (CollisionTile *)g_streamPosGlob.pos;
          if ( v4 == -3 )
            DB_InsertPointer();
          Preload_CollisionTile(AtStart);
          varCollisionTile = v5;
          if ( v4 == -1 )
            DB_PopSharedData();
          goto LABEL_16;
        }
        if ( v4 == -2 || v4 == -3 )
          goto LABEL_12;
      }
LABEL_16:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varCollisionTilePtr = (CollisionTile **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_CollisionTileStream
==============
*/
void Preload_CollisionTileStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 
  CollisionTile *v5; 
  StaticModelCollisionCompressedModelList *v6; 
  char *v7; 
  char *v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 46773, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varCollisionTile;
    do
    {
      DB_PatchMem_PushAsset(103, pos);
      Load_Stream(AtStart, varCollisionTile, 0x48ui64);
      DB_PushStreamPos(8u);
      v4 = varXString;
      varXString = &varCollisionTile->name;
      Preload_XString(NotAtStart);
      v5 = varCollisionTile;
      varXString = v4;
      if ( varCollisionTile->staticModelCollision )
      {
        v6 = varStaticModelCollisionCompressedModelList;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varStaticModelCollisionCompressedModelList = (StaticModelCollisionCompressedModelList *)g_streamPosGlob.pos;
        Preload_StaticModelCollisionCompressedModelList(AtStart);
        v5 = varCollisionTile;
        varStaticModelCollisionCompressedModelList = v6;
      }
      if ( v5->havokTileShapeData )
      {
        v7 = varalignHavokShapeData_t;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varalignHavokShapeData_t = (char *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, varCollisionTile->havokTileShapeDataSize);
        v5 = varCollisionTile;
        varalignHavokShapeData_t = v7;
      }
      if ( v5->havokTileShapePointer )
      {
        v8 = varchar;
        varchar = AllocPreload_char();
        Preload_char(AtStart);
        varchar = v8;
      }
      DB_PopStreamPos();
      DB_PatchMem_PopAsset();
      pos = g_streamPosGlob.pos;
      varCollisionTile = (CollisionTile *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_CreateFxAssetData
==============
*/
void Preload_CreateFxAssetData(const DBStreamStart streamStart)
{
  CreateFxPaletteDef *v1; 
  __int64 fxPaletteCount; 
  CreateFxPaletteDef *i; 
  scr_string_t *v4; 

  Load_Stream(streamStart, varCreateFxAssetData, 0x10ui64);
  if ( varCreateFxAssetData->fxPalette )
  {
    v1 = varCreateFxPaletteDef;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varCreateFxPaletteDef = (CreateFxPaletteDef *)g_streamPosGlob.pos;
    fxPaletteCount = varCreateFxAssetData->fxPaletteCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 12 * fxPaletteCount);
    for ( i = varCreateFxPaletteDef; fxPaletteCount; --fxPaletteCount )
    {
      varCreateFxPaletteDef = i;
      Load_Stream(NotAtStart, i, 0xCui64);
      v4 = varscr_string_t;
      varscr_string_t = &varCreateFxPaletteDef->aliasName;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = &varCreateFxPaletteDef->effectPath;
      Preload_scr_string_t(NotAtStart);
      ++i;
      varscr_string_t = v4;
    }
    varCreateFxPaletteDef = v1;
  }
}

/*
==============
Preload_CreateFxAssetDataArray
==============
*/
void Preload_CreateFxAssetDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  CreateFxAssetData *i; 
  CreateFxPaletteDef *v4; 
  __int64 fxPaletteCount; 
  CreateFxPaletteDef *j; 
  scr_string_t *v7; 

  v2 = count;
  Load_Stream(streamStart, varCreateFxAssetData, 16 * count);
  for ( i = varCreateFxAssetData; v2; --v2 )
  {
    varCreateFxAssetData = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    if ( varCreateFxAssetData->fxPalette )
    {
      v4 = varCreateFxPaletteDef;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varCreateFxPaletteDef = (CreateFxPaletteDef *)g_streamPosGlob.pos;
      fxPaletteCount = varCreateFxAssetData->fxPaletteCount;
      Load_Stream(AtStart, g_streamPosGlob.pos, 12 * fxPaletteCount);
      for ( j = varCreateFxPaletteDef; fxPaletteCount; --fxPaletteCount )
      {
        varCreateFxPaletteDef = j;
        Load_Stream(NotAtStart, j, 0xCui64);
        v7 = varscr_string_t;
        varscr_string_t = &varCreateFxPaletteDef->aliasName;
        Preload_scr_string_t(NotAtStart);
        varscr_string_t = &varCreateFxPaletteDef->effectPath;
        Preload_scr_string_t(NotAtStart);
        ++j;
        varscr_string_t = v7;
      }
      varCreateFxPaletteDef = v4;
    }
    ++i;
  }
}

/*
==============
Preload_CreateFxAssetDataStream
==============
*/
void Preload_CreateFxAssetDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  CreateFxPaletteDef *v4; 
  __int64 fxPaletteCount; 
  CreateFxPaletteDef *i; 
  scr_string_t *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 43247, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varCreateFxAssetData;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      if ( varCreateFxAssetData->fxPalette )
      {
        v4 = varCreateFxPaletteDef;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varCreateFxPaletteDef = (CreateFxPaletteDef *)g_streamPosGlob.pos;
        fxPaletteCount = varCreateFxAssetData->fxPaletteCount;
        Load_Stream(AtStart, g_streamPosGlob.pos, 12 * fxPaletteCount);
        for ( i = varCreateFxPaletteDef; fxPaletteCount; --fxPaletteCount )
        {
          varCreateFxPaletteDef = i;
          Load_Stream(NotAtStart, i, 0xCui64);
          v7 = varscr_string_t;
          varscr_string_t = &varCreateFxPaletteDef->aliasName;
          Preload_scr_string_t(NotAtStart);
          varscr_string_t = &varCreateFxPaletteDef->effectPath;
          Preload_scr_string_t(NotAtStart);
          ++i;
          varscr_string_t = v7;
        }
        varCreateFxPaletteDef = v4;
      }
      pos = g_streamPosGlob.pos;
      varCreateFxAssetData = (CreateFxAssetData *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_CreateFxPaletteDef
==============
*/
void Preload_CreateFxPaletteDef(const DBStreamStart streamStart)
{
  scr_string_t *v1; 

  Load_Stream(streamStart, varCreateFxPaletteDef, 0xCui64);
  v1 = varscr_string_t;
  varscr_string_t = &varCreateFxPaletteDef->aliasName;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = &varCreateFxPaletteDef->effectPath;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = v1;
}

/*
==============
Preload_CreateFxPaletteDefArray
==============
*/
void Preload_CreateFxPaletteDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  CreateFxPaletteDef *i; 
  scr_string_t *v4; 

  v2 = count;
  Load_Stream(streamStart, varCreateFxPaletteDef, 12 * count);
  for ( i = varCreateFxPaletteDef; v2; --v2 )
  {
    varCreateFxPaletteDef = i;
    Load_Stream(NotAtStart, i, 0xCui64);
    v4 = varscr_string_t;
    varscr_string_t = &varCreateFxPaletteDef->aliasName;
    Preload_scr_string_t(NotAtStart);
    varscr_string_t = &varCreateFxPaletteDef->effectPath;
    Preload_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v4;
  }
}

/*
==============
Preload_CreateFxPaletteDefStream
==============
*/
void Preload_CreateFxPaletteDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  scr_string_t *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 43136, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varCreateFxPaletteDef;
    do
    {
      Load_Stream(AtStart, pos, 0xCui64);
      v4 = varscr_string_t;
      varscr_string_t = &varCreateFxPaletteDef->aliasName;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = &varCreateFxPaletteDef->effectPath;
      Preload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varCreateFxPaletteDef = (CreateFxPaletteDef *)g_streamPosGlob.pos;
      varscr_string_t = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_DynEntityList
==============
*/
void Preload_DynEntityList(const DBStreamStart streamStart)
{
  const char **v2; 
  DynEntityList *v3; 
  DynEntityDef *v4; 
  SpatialPartition_TransientPopulation **v5; 

  DB_PatchMem_PushAsset(109, varDynEntityList);
  Load_Stream(streamStart, varDynEntityList, 0x40ui64);
  DB_PushStreamPos(8u);
  v2 = varXString;
  varXString = &varDynEntityList->name;
  Preload_XString(NotAtStart);
  v3 = varDynEntityList;
  varXString = v2;
  v4 = varDynEntityDef;
  if ( varDynEntityList->dynEntDefList[0] )
  {
    varDynEntityDef = AllocPreload_DynEntityDef();
    Preload_DynEntityDefArray(AtStart, varDynEntityList->dynEntCount[0]);
    v3 = varDynEntityList;
    varDynEntityDef = v4;
  }
  if ( v3->dynEntDefList[1] )
  {
    varDynEntityDef = AllocPreload_DynEntityDef();
    Preload_DynEntityDefArray(AtStart, varDynEntityList->dynEntCount[1]);
    v3 = varDynEntityList;
    varDynEntityDef = v4;
  }
  v5 = varSpatialPartition_TransientPopulationPtr;
  varSpatialPartition_TransientPopulationPtr = v3->dynEntSpatialPopulation;
  Preload_SpatialPartition_TransientPopulationPtrArray(NotAtStart, 2ui64);
  varSpatialPartition_TransientPopulationPtr = v5;
  DB_PopStreamPos();
  DB_PatchMem_PopAsset();
}

/*
==============
Preload_DynEntityListArray
==============
*/
void Preload_DynEntityListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  DynEntityList *i; 
  const char **v4; 
  DynEntityList *v5; 
  DynEntityDef *v6; 
  SpatialPartition_TransientPopulation **v7; 

  v2 = count;
  Load_Stream(streamStart, varDynEntityList, count << 6);
  for ( i = varDynEntityList; v2; --v2 )
  {
    varDynEntityList = i;
    DB_PatchMem_PushAsset(109, i);
    Load_Stream(NotAtStart, varDynEntityList, 0x40ui64);
    DB_PushStreamPos(8u);
    v4 = varXString;
    varXString = &varDynEntityList->name;
    Preload_XString(NotAtStart);
    v5 = varDynEntityList;
    varXString = v4;
    v6 = varDynEntityDef;
    if ( varDynEntityList->dynEntDefList[0] )
    {
      varDynEntityDef = AllocPreload_DynEntityDef();
      Preload_DynEntityDefArray(AtStart, varDynEntityList->dynEntCount[0]);
      v5 = varDynEntityList;
      varDynEntityDef = v6;
    }
    if ( v5->dynEntDefList[1] )
    {
      varDynEntityDef = AllocPreload_DynEntityDef();
      Preload_DynEntityDefArray(AtStart, varDynEntityList->dynEntCount[1]);
      v5 = varDynEntityList;
      varDynEntityDef = v6;
    }
    v7 = varSpatialPartition_TransientPopulationPtr;
    varSpatialPartition_TransientPopulationPtr = v5->dynEntSpatialPopulation;
    Preload_SpatialPartition_TransientPopulationPtrArray(NotAtStart, 2ui64);
    varSpatialPartition_TransientPopulationPtr = v7;
    DB_PopStreamPos();
    DB_PatchMem_PopAsset();
    ++i;
  }
}

/*
==============
Preload_DynEntityListPtr
==============
*/
void Preload_DynEntityListPtr(const DBStreamStart streamStart)
{
  __int64 v1; 
  DynEntityList *v2; 

  Load_Stream(streamStart, varDynEntityListPtr, 8ui64);
  DB_PushStreamPos(2u);
  v1 = (__int64)*varDynEntityListPtr;
  if ( *varDynEntityListPtr )
  {
    if ( v1 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v1 != -2 && v1 != -3 )
    {
      goto LABEL_11;
    }
    v2 = varDynEntityList;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varDynEntityList = (DynEntityList *)g_streamPosGlob.pos;
    if ( v1 == -3 )
      DB_InsertPointer();
    Preload_DynEntityList(AtStart);
    varDynEntityList = v2;
    if ( v1 == -1 )
      DB_PopSharedData();
  }
LABEL_11:
  DB_PopStreamPos();
}

/*
==============
Preload_DynEntityListPtrArray
==============
*/
void Preload_DynEntityListPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  DynEntityList **i; 
  __int64 v4; 
  DynEntityList *v5; 

  v2 = count;
  Load_Stream(streamStart, varDynEntityListPtr, 8 * count);
  for ( i = varDynEntityListPtr; v2; --v2 )
  {
    varDynEntityListPtr = i;
    Load_Stream(NotAtStart, i, 8ui64);
    DB_PushStreamPos(2u);
    v4 = (__int64)*varDynEntityListPtr;
    if ( *varDynEntityListPtr )
    {
      if ( v4 == -1 )
      {
        DB_PushSharedData();
LABEL_8:
        v5 = varDynEntityList;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varDynEntityList = (DynEntityList *)g_streamPosGlob.pos;
        if ( v4 == -3 )
          DB_InsertPointer();
        Preload_DynEntityList(AtStart);
        varDynEntityList = v5;
        if ( v4 == -1 )
          DB_PopSharedData();
        goto LABEL_12;
      }
      if ( v4 == -2 || v4 == -3 )
        goto LABEL_8;
    }
LABEL_12:
    DB_PopStreamPos();
    ++i;
  }
}

/*
==============
Preload_DynEntityListPtrStream
==============
*/
void Preload_DynEntityListPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  __int64 v4; 
  DynEntityList *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 43662, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varDynEntityListPtr;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      DB_PushStreamPos(2u);
      v4 = (__int64)*varDynEntityListPtr;
      if ( *varDynEntityListPtr )
      {
        if ( v4 == -1 )
        {
          DB_PushSharedData();
LABEL_12:
          v5 = varDynEntityList;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varDynEntityList = (DynEntityList *)g_streamPosGlob.pos;
          if ( v4 == -3 )
            DB_InsertPointer();
          Preload_DynEntityList(AtStart);
          varDynEntityList = v5;
          if ( v4 == -1 )
            DB_PopSharedData();
          goto LABEL_16;
        }
        if ( v4 == -2 || v4 == -3 )
          goto LABEL_12;
      }
LABEL_16:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varDynEntityListPtr = (DynEntityList **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_DynEntityListStream
==============
*/
void Preload_DynEntityListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 
  DynEntityList *v5; 
  DynEntityDef *v6; 
  SpatialPartition_TransientPopulation **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 43547, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varDynEntityList;
    do
    {
      DB_PatchMem_PushAsset(109, pos);
      Load_Stream(AtStart, varDynEntityList, 0x40ui64);
      DB_PushStreamPos(8u);
      v4 = varXString;
      varXString = &varDynEntityList->name;
      Preload_XString(NotAtStart);
      v5 = varDynEntityList;
      varXString = v4;
      v6 = varDynEntityDef;
      if ( varDynEntityList->dynEntDefList[0] )
      {
        varDynEntityDef = AllocPreload_DynEntityDef();
        Preload_DynEntityDefArray(AtStart, varDynEntityList->dynEntCount[0]);
        v5 = varDynEntityList;
        varDynEntityDef = v6;
      }
      if ( v5->dynEntDefList[1] )
      {
        varDynEntityDef = AllocPreload_DynEntityDef();
        Preload_DynEntityDefArray(AtStart, varDynEntityList->dynEntCount[1]);
        v5 = varDynEntityList;
        varDynEntityDef = v6;
      }
      v7 = varSpatialPartition_TransientPopulationPtr;
      varSpatialPartition_TransientPopulationPtr = v5->dynEntSpatialPopulation;
      Preload_SpatialPartition_TransientPopulationPtrArray(NotAtStart, 2ui64);
      varSpatialPartition_TransientPopulationPtr = v7;
      DB_PopStreamPos();
      DB_PatchMem_PopAsset();
      pos = g_streamPosGlob.pos;
      varDynEntityList = (DynEntityList *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_MapEdgeList
==============
*/
void Preload_MapEdgeList(const DBStreamStart streamStart)
{
  const char **v2; 
  MapEdgeList *v3; 
  float4 (*v4)[2]; 
  FlaggedEdgeMetadata *v5; 
  PMROctreeMetadata *v6; 
  PMROctreeNodeSet *v7; 
  unsigned int *v8; 
  EdgeAdjacencyMetadata *v9; 
  EdgeAdjacency *v10; 

  DB_PatchMem_PushAsset(112, varMapEdgeList);
  Load_Stream(streamStart, varMapEdgeList, 0xA0ui64);
  DB_PushStreamPos(8u);
  v2 = varXString;
  varXString = &varMapEdgeList->name;
  Preload_XString(NotAtStart);
  v3 = varMapEdgeList;
  varXString = v2;
  if ( varMapEdgeList->edges )
  {
    v4 = varlineSegmentFloat4_t;
    varlineSegmentFloat4_t = AllocPreload_lineSegmentFloat4_t();
    Preload_lineSegmentFloat4_tArray(AtStart, varMapEdgeList->numEdges);
    v3 = varMapEdgeList;
    varlineSegmentFloat4_t = v4;
  }
  if ( v3->edgeMetadata )
  {
    v5 = varFlaggedEdgeMetadata;
    varFlaggedEdgeMetadata = AllocPreload_FlaggedEdgeMetadata();
    Preload_FlaggedEdgeMetadataArray(AtStart, varMapEdgeList->numEdges);
    v3 = varMapEdgeList;
    varFlaggedEdgeMetadata = v5;
  }
  if ( v3->edgeOctrees )
  {
    v6 = varPMROctreeMetadata;
    varPMROctreeMetadata = AllocPreload_PMROctreeMetadata();
    Preload_PMROctreeMetadataArray(AtStart, varMapEdgeList->numEdgeOctrees);
    v3 = varMapEdgeList;
    varPMROctreeMetadata = v6;
  }
  if ( v3->edgeOctreeNodeSets )
  {
    v7 = varPMROctreeNodeSet;
    varPMROctreeNodeSet = AllocPreload_PMROctreeNodeSet();
    Preload_PMROctreeNodeSetArray(AtStart, varMapEdgeList->numEdgeOctreeNodeSet);
    v3 = varMapEdgeList;
    varPMROctreeNodeSet = v7;
  }
  if ( v3->edgeIndices )
  {
    v8 = varEdgeIndex;
    varEdgeIndex = AllocPreload_EdgeIndex();
    Preload_EdgeIndexArray(AtStart, varMapEdgeList->numEdgeIndices);
    v3 = varMapEdgeList;
    varEdgeIndex = v8;
  }
  if ( v3->edgeAdjacencyMetadata )
  {
    v9 = varEdgeAdjacencyMetadata;
    varEdgeAdjacencyMetadata = AllocPreload_EdgeAdjacencyMetadata();
    Preload_EdgeAdjacencyMetadataArray(AtStart, varMapEdgeList->numEdgeAdjacencyMetadata);
    v3 = varMapEdgeList;
    varEdgeAdjacencyMetadata = v9;
  }
  if ( v3->edgeAdjacency )
  {
    v10 = varEdgeAdjacency;
    varEdgeAdjacency = AllocPreload_EdgeAdjacency();
    Preload_EdgeAdjacencyArray(AtStart, varMapEdgeList->numEdgeAdjacency);
    varEdgeAdjacency = v10;
  }
  DB_PopStreamPos();
  DB_PatchMem_PopAsset();
}

/*
==============
Preload_MapEdgeListArray
==============
*/
void Preload_MapEdgeListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  MapEdgeList *i; 
  const char **v4; 
  MapEdgeList *v5; 
  float4 (*v6)[2]; 
  FlaggedEdgeMetadata *v7; 
  PMROctreeMetadata *v8; 
  PMROctreeNodeSet *v9; 
  unsigned int *v10; 
  EdgeAdjacencyMetadata *v11; 
  EdgeAdjacency *v12; 

  v2 = count;
  Load_Stream(streamStart, varMapEdgeList, 160 * count);
  for ( i = varMapEdgeList; v2; --v2 )
  {
    varMapEdgeList = i;
    DB_PatchMem_PushAsset(112, i);
    Load_Stream(NotAtStart, varMapEdgeList, 0xA0ui64);
    DB_PushStreamPos(8u);
    v4 = varXString;
    varXString = &varMapEdgeList->name;
    Preload_XString(NotAtStart);
    v5 = varMapEdgeList;
    varXString = v4;
    if ( varMapEdgeList->edges )
    {
      v6 = varlineSegmentFloat4_t;
      varlineSegmentFloat4_t = AllocPreload_lineSegmentFloat4_t();
      Preload_lineSegmentFloat4_tArray(AtStart, varMapEdgeList->numEdges);
      v5 = varMapEdgeList;
      varlineSegmentFloat4_t = v6;
    }
    if ( v5->edgeMetadata )
    {
      v7 = varFlaggedEdgeMetadata;
      varFlaggedEdgeMetadata = AllocPreload_FlaggedEdgeMetadata();
      Preload_FlaggedEdgeMetadataArray(AtStart, varMapEdgeList->numEdges);
      v5 = varMapEdgeList;
      varFlaggedEdgeMetadata = v7;
    }
    if ( v5->edgeOctrees )
    {
      v8 = varPMROctreeMetadata;
      varPMROctreeMetadata = AllocPreload_PMROctreeMetadata();
      Preload_PMROctreeMetadataArray(AtStart, varMapEdgeList->numEdgeOctrees);
      v5 = varMapEdgeList;
      varPMROctreeMetadata = v8;
    }
    if ( v5->edgeOctreeNodeSets )
    {
      v9 = varPMROctreeNodeSet;
      varPMROctreeNodeSet = AllocPreload_PMROctreeNodeSet();
      Preload_PMROctreeNodeSetArray(AtStart, varMapEdgeList->numEdgeOctreeNodeSet);
      v5 = varMapEdgeList;
      varPMROctreeNodeSet = v9;
    }
    if ( v5->edgeIndices )
    {
      v10 = varEdgeIndex;
      varEdgeIndex = AllocPreload_EdgeIndex();
      Preload_EdgeIndexArray(AtStart, varMapEdgeList->numEdgeIndices);
      v5 = varMapEdgeList;
      varEdgeIndex = v10;
    }
    if ( v5->edgeAdjacencyMetadata )
    {
      v11 = varEdgeAdjacencyMetadata;
      varEdgeAdjacencyMetadata = AllocPreload_EdgeAdjacencyMetadata();
      Preload_EdgeAdjacencyMetadataArray(AtStart, varMapEdgeList->numEdgeAdjacencyMetadata);
      v5 = varMapEdgeList;
      varEdgeAdjacencyMetadata = v11;
    }
    if ( v5->edgeAdjacency )
    {
      v12 = varEdgeAdjacency;
      varEdgeAdjacency = AllocPreload_EdgeAdjacency();
      Preload_EdgeAdjacencyArray(AtStart, varMapEdgeList->numEdgeAdjacency);
      varEdgeAdjacency = v12;
    }
    DB_PopStreamPos();
    DB_PatchMem_PopAsset();
    ++i;
  }
}

/*
==============
Preload_MapEdgeListPtr
==============
*/
void Preload_MapEdgeListPtr(const DBStreamStart streamStart)
{
  __int64 v1; 
  MapEdgeList *v2; 

  Load_Stream(streamStart, varMapEdgeListPtr, 8ui64);
  DB_PushStreamPos(2u);
  v1 = (__int64)*varMapEdgeListPtr;
  if ( *varMapEdgeListPtr )
  {
    if ( v1 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v1 != -2 && v1 != -3 )
    {
      goto LABEL_11;
    }
    v2 = varMapEdgeList;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varMapEdgeList = (MapEdgeList *)g_streamPosGlob.pos;
    if ( v1 == -3 )
      DB_InsertPointer();
    Preload_MapEdgeList(AtStart);
    varMapEdgeList = v2;
    if ( v1 == -1 )
      DB_PopSharedData();
  }
LABEL_11:
  DB_PopStreamPos();
}

/*
==============
Preload_MapEdgeListPtrArray
==============
*/
void Preload_MapEdgeListPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  MapEdgeList **i; 
  __int64 v4; 
  MapEdgeList *v5; 

  v2 = count;
  Load_Stream(streamStart, varMapEdgeListPtr, 8 * count);
  for ( i = varMapEdgeListPtr; v2; --v2 )
  {
    varMapEdgeListPtr = i;
    Load_Stream(NotAtStart, i, 8ui64);
    DB_PushStreamPos(2u);
    v4 = (__int64)*varMapEdgeListPtr;
    if ( *varMapEdgeListPtr )
    {
      if ( v4 == -1 )
      {
        DB_PushSharedData();
LABEL_8:
        v5 = varMapEdgeList;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varMapEdgeList = (MapEdgeList *)g_streamPosGlob.pos;
        if ( v4 == -3 )
          DB_InsertPointer();
        Preload_MapEdgeList(AtStart);
        varMapEdgeList = v5;
        if ( v4 == -1 )
          DB_PopSharedData();
        goto LABEL_12;
      }
      if ( v4 == -2 || v4 == -3 )
        goto LABEL_8;
    }
LABEL_12:
    DB_PopStreamPos();
    ++i;
  }
}

/*
==============
Preload_MapEdgeListPtrStream
==============
*/
void Preload_MapEdgeListPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  __int64 v4; 
  MapEdgeList *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 44358, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varMapEdgeListPtr;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      DB_PushStreamPos(2u);
      v4 = (__int64)*varMapEdgeListPtr;
      if ( *varMapEdgeListPtr )
      {
        if ( v4 == -1 )
        {
          DB_PushSharedData();
LABEL_12:
          v5 = varMapEdgeList;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varMapEdgeList = (MapEdgeList *)g_streamPosGlob.pos;
          if ( v4 == -3 )
            DB_InsertPointer();
          Preload_MapEdgeList(AtStart);
          varMapEdgeList = v5;
          if ( v4 == -1 )
            DB_PopSharedData();
          goto LABEL_16;
        }
        if ( v4 == -2 || v4 == -3 )
          goto LABEL_12;
      }
LABEL_16:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varMapEdgeListPtr = (MapEdgeList **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_MapEdgeListStream
==============
*/
void Preload_MapEdgeListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 
  MapEdgeList *v5; 
  float4 (*v6)[2]; 
  FlaggedEdgeMetadata *v7; 
  PMROctreeMetadata *v8; 
  PMROctreeNodeSet *v9; 
  unsigned int *v10; 
  EdgeAdjacencyMetadata *v11; 
  EdgeAdjacency *v12; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 44243, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varMapEdgeList;
    do
    {
      DB_PatchMem_PushAsset(112, pos);
      Load_Stream(AtStart, varMapEdgeList, 0xA0ui64);
      DB_PushStreamPos(8u);
      v4 = varXString;
      varXString = &varMapEdgeList->name;
      Preload_XString(NotAtStart);
      v5 = varMapEdgeList;
      varXString = v4;
      if ( varMapEdgeList->edges )
      {
        v6 = varlineSegmentFloat4_t;
        varlineSegmentFloat4_t = AllocPreload_lineSegmentFloat4_t();
        Preload_lineSegmentFloat4_tArray(AtStart, varMapEdgeList->numEdges);
        v5 = varMapEdgeList;
        varlineSegmentFloat4_t = v6;
      }
      if ( v5->edgeMetadata )
      {
        v7 = varFlaggedEdgeMetadata;
        varFlaggedEdgeMetadata = AllocPreload_FlaggedEdgeMetadata();
        Preload_FlaggedEdgeMetadataArray(AtStart, varMapEdgeList->numEdges);
        v5 = varMapEdgeList;
        varFlaggedEdgeMetadata = v7;
      }
      if ( v5->edgeOctrees )
      {
        v8 = varPMROctreeMetadata;
        varPMROctreeMetadata = AllocPreload_PMROctreeMetadata();
        Preload_PMROctreeMetadataArray(AtStart, varMapEdgeList->numEdgeOctrees);
        v5 = varMapEdgeList;
        varPMROctreeMetadata = v8;
      }
      if ( v5->edgeOctreeNodeSets )
      {
        v9 = varPMROctreeNodeSet;
        varPMROctreeNodeSet = AllocPreload_PMROctreeNodeSet();
        Preload_PMROctreeNodeSetArray(AtStart, varMapEdgeList->numEdgeOctreeNodeSet);
        v5 = varMapEdgeList;
        varPMROctreeNodeSet = v9;
      }
      if ( v5->edgeIndices )
      {
        v10 = varEdgeIndex;
        varEdgeIndex = AllocPreload_EdgeIndex();
        Preload_EdgeIndexArray(AtStart, varMapEdgeList->numEdgeIndices);
        v5 = varMapEdgeList;
        varEdgeIndex = v10;
      }
      if ( v5->edgeAdjacencyMetadata )
      {
        v11 = varEdgeAdjacencyMetadata;
        varEdgeAdjacencyMetadata = AllocPreload_EdgeAdjacencyMetadata();
        Preload_EdgeAdjacencyMetadataArray(AtStart, varMapEdgeList->numEdgeAdjacencyMetadata);
        v5 = varMapEdgeList;
        varEdgeAdjacencyMetadata = v11;
      }
      if ( v5->edgeAdjacency )
      {
        v12 = varEdgeAdjacency;
        varEdgeAdjacency = AllocPreload_EdgeAdjacency();
        Preload_EdgeAdjacencyArray(AtStart, varMapEdgeList->numEdgeAdjacency);
        varEdgeAdjacency = v12;
      }
      DB_PopStreamPos();
      DB_PatchMem_PopAsset();
      pos = g_streamPosGlob.pos;
      varMapEdgeList = (MapEdgeList *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_MapEnts
==============
*/
void Preload_MapEnts(const DBStreamStart streamStart)
{
  const char **v2; 
  MapEnts *v3; 
  char *v4; 
  MapTriggers *v5; 
  ClientTriggers *v6; 
  ClientTriggerBlend *v7; 
  ClientTriggerBlendNode *v8; 
  SpawnPointRecordList *v9; 
  SplineRecordList *v10; 
  MapEnts *v11; 
  char *v12; 
  cmodel_t *v13; 
  MapEdgeList **v14; 
  __int64 numEdgeLists; 
  MapEdgeList **i; 
  SpatialPartition_Tree *v17; 
  CM_ClientModel *v18; 
  DynEntityListId *v19; 
  SpatialPartition_Population **v20; 
  SpatialPartition_Population_TransientMap **v21; 
  MapEnts *v22; 
  ClientEntAnchor *v23; 
  __int64 clientEntAnchorCount; 
  ClientEntAnchor *j; 
  scr_string_t *v26; 
  ScriptableMapEnts *v27; 
  SpawnGroup *v28; 
  ClientSideEffects *v29; 
  CreateFxAssetData *v30; 
  MapEnts *v31; 
  scr_string_t *v32; 
  ServerSideEffects *v33; 
  MayhemInstance *mayhemScenes; 
  MayhemInstance *v35; 
  SpawnerList *v36; 
  MapEnts *v37; 
  AudioPASpeaker *v38; 
  AudioPropagationNode *v39; 
  AudioPropagationEdge *v40; 
  CollMapLookupEntry *v41; 
  __int64 numCollmaps; 
  CollMapLookupEntry *k; 
  const char **v44; 

  DB_PatchMem_PushAsset(25, varMapEnts);
  Load_Stream(streamStart, varMapEnts, 0x428ui64);
  DB_PushStreamPos(8u);
  v2 = varXString;
  varXString = &varMapEnts->name;
  Preload_XString(NotAtStart);
  v3 = varMapEnts;
  varXString = v2;
  if ( varMapEnts->entityString )
  {
    v4 = varchar;
    varchar = AllocPreload_char();
    Preload_charArray(AtStart, varMapEnts->numEntityChars);
    v3 = varMapEnts;
    varchar = v4;
  }
  v5 = varMapTriggers;
  varMapTriggers = &v3->trigger;
  Preload_MapTriggers(NotAtStart);
  varMapTriggers = v5;
  v6 = varClientTriggers;
  varClientTriggers = &varMapEnts->clientTrigger;
  Preload_ClientTriggers(NotAtStart);
  v7 = varClientTriggerBlend;
  varClientTriggers = v6;
  varClientTriggerBlend = &varMapEnts->clientTriggerBlend;
  Load_Stream(NotAtStart, &varMapEnts->clientTriggerBlend, 0x10ui64);
  if ( varClientTriggerBlend->blendNodes )
  {
    v8 = varClientTriggerBlendNode;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varClientTriggerBlendNode = (ClientTriggerBlendNode *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varClientTriggerBlend->numClientTriggerBlendNodes);
    varClientTriggerBlendNode = v8;
  }
  v9 = varSpawnPointRecordList;
  varSpawnPointRecordList = &varMapEnts->spawnList;
  varClientTriggerBlend = v7;
  Preload_SpawnPointRecordList(NotAtStart);
  varSpawnPointRecordList = v9;
  v10 = varSplineRecordList;
  varSplineRecordList = &varMapEnts->splineList;
  Preload_SplineRecordList(NotAtStart);
  v11 = varMapEnts;
  varSplineRecordList = v10;
  if ( varMapEnts->havokEntsShapeData )
  {
    v12 = varalignHavokShapeData_t;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    varalignHavokShapeData_t = (char *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, varMapEnts->havokEntsShapeDataSize);
    v11 = varMapEnts;
    varalignHavokShapeData_t = v12;
  }
  if ( v11->cmodels )
  {
    v13 = varcmodel_t;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varcmodel_t = (cmodel_t *)g_streamPosGlob.pos;
    Preload_cmodel_tArray(AtStart, varMapEnts->numSubModels);
    v11 = varMapEnts;
    varcmodel_t = v13;
  }
  if ( v11->edgeLists )
  {
    v14 = varMapEdgeListPtr;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varMapEdgeListPtr = (MapEdgeList **)g_streamPosGlob.pos;
    numEdgeLists = varMapEnts->numEdgeLists;
    Load_Stream(AtStart, g_streamPosGlob.pos, 8 * numEdgeLists);
    for ( i = varMapEdgeListPtr; numEdgeLists; --numEdgeLists )
    {
      varMapEdgeListPtr = i;
      Preload_MapEdgeListPtr(NotAtStart);
      ++i;
    }
    v11 = varMapEnts;
    varMapEdgeListPtr = v14;
  }
  if ( v11->edgeListSpatialTree )
  {
    v17 = varSpatialPartition_Tree;
    varSpatialPartition_Tree = AllocPreload_SpatialPartition_Tree();
    Preload_SpatialPartition_Tree(AtStart);
    v11 = varMapEnts;
    varSpatialPartition_Tree = v17;
  }
  if ( v11->clientModels )
  {
    v18 = varCM_ClientModel;
    varCM_ClientModel = AllocPreload_CM_ClientModel();
    Preload_CM_ClientModelArray(AtStart, varMapEnts->numClientModels);
    v11 = varMapEnts;
    varCM_ClientModel = v18;
  }
  if ( v11->dynEntListIds )
  {
    v19 = varDynEntityListId;
    varDynEntityListId = AllocPreload_DynEntityListId();
    Preload_DynEntityListIdArray(AtStart, (unsigned __int16)varMapEnts->dynEntityListsCount);
    v11 = varMapEnts;
    varDynEntityListId = v19;
  }
  v20 = varSpatialPartition_PopulationPtr;
  varSpatialPartition_PopulationPtr = v11->dynEntSpatialPopulation;
  Preload_SpatialPartition_PopulationPtrArray(NotAtStart, 2ui64);
  varSpatialPartition_PopulationPtr = v20;
  v21 = varSpatialPartition_Population_TransientMapPtr;
  varSpatialPartition_Population_TransientMapPtr = varMapEnts->dynEntSpatialTransientMap;
  Preload_SpatialPartition_Population_TransientMapPtrArray(NotAtStart, 2ui64);
  v22 = varMapEnts;
  varSpatialPartition_Population_TransientMapPtr = v21;
  if ( varMapEnts->clientEntAnchors )
  {
    v23 = varClientEntAnchor;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varClientEntAnchor = (ClientEntAnchor *)g_streamPosGlob.pos;
    clientEntAnchorCount = varMapEnts->clientEntAnchorCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 8 * clientEntAnchorCount);
    for ( j = varClientEntAnchor; clientEntAnchorCount; --clientEntAnchorCount )
    {
      varClientEntAnchor = j;
      Load_Stream(NotAtStart, j, 8ui64);
      v26 = varscr_string_t;
      varscr_string_t = (scr_string_t *)varClientEntAnchor;
      Preload_scr_string_t(NotAtStart);
      ++j;
      varscr_string_t = v26;
    }
    v22 = varMapEnts;
    varClientEntAnchor = v23;
  }
  v27 = varScriptableMapEnts;
  varScriptableMapEnts = &v22->scriptableMapEnts;
  Preload_ScriptableMapEnts(NotAtStart);
  varScriptableMapEnts = v27;
  v28 = varSpawnGroup;
  varSpawnGroup = &varMapEnts->spawnGroupLoot;
  Preload_SpawnGroup(NotAtStart);
  varSpawnGroup = v28;
  v29 = varClientSideEffects;
  varClientSideEffects = &varMapEnts->clientSideEffects;
  Preload_ClientSideEffects(NotAtStart);
  varClientSideEffects = v29;
  v30 = varCreateFxAssetData;
  varCreateFxAssetData = &varMapEnts->createFxAssetData;
  Preload_CreateFxAssetData(NotAtStart);
  v31 = varMapEnts;
  varCreateFxAssetData = v30;
  if ( varMapEnts->exploderNames )
  {
    v32 = varscr_string_t;
    varscr_string_t = AllocPreload_scr_string_t();
    Preload_scr_string_tArray(AtStart, varMapEnts->exploderNameTotal);
    v31 = varMapEnts;
    varscr_string_t = v32;
  }
  v33 = varServerSideEffects;
  varServerSideEffects = &v31->serverSideEffects;
  Preload_ServerSideEffects(NotAtStart);
  varServerSideEffects = v33;
  mayhemScenes = varMapEnts->mayhemScenes;
  if ( mayhemScenes )
  {
    if ( mayhemScenes == (MayhemInstance *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( mayhemScenes != (MayhemInstance *)-2i64 )
    {
      goto LABEL_32;
    }
    v35 = varMayhemInstance;
    varMayhemInstance = AllocPreload_MayhemInstance();
    Preload_MayhemInstanceArray(AtStart, varMapEnts->numMayhemScenes);
    varMayhemInstance = v35;
    if ( mayhemScenes == (MayhemInstance *)-1i64 )
      DB_PopSharedData();
  }
LABEL_32:
  v36 = varSpawnerList;
  varSpawnerList = &varMapEnts->spawners;
  Preload_SpawnerList(NotAtStart);
  v37 = varMapEnts;
  varSpawnerList = v36;
  if ( varMapEnts->audioPASpeakers )
  {
    v38 = varAudioPASpeaker;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varAudioPASpeaker = (AudioPASpeaker *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varMapEnts->audioPASpeakerCount);
    v37 = varMapEnts;
    varAudioPASpeaker = v38;
  }
  if ( v37->audioPropNodes )
  {
    v39 = varAudioPropagationNode;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varAudioPropagationNode = (AudioPropagationNode *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varMapEnts->numAudioPropNodes);
    v37 = varMapEnts;
    varAudioPropagationNode = v39;
  }
  if ( v37->audioPropEdges )
  {
    v40 = varAudioPropagationEdge;
    DB_PatchMem_FixStreamAlignment(1ui64);
    DB_CheckCanIncStreamPos(0i64);
    varAudioPropagationEdge = (AudioPropagationEdge *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 4i64 * varMapEnts->numAudioPropEdges);
    v37 = varMapEnts;
    varAudioPropagationEdge = v40;
  }
  if ( v37->collmapLookups )
  {
    v41 = varCollMapLookupEntry;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varCollMapLookupEntry = (CollMapLookupEntry *)g_streamPosGlob.pos;
    numCollmaps = varMapEnts->numCollmaps;
    Load_Stream(AtStart, g_streamPosGlob.pos, 16 * numCollmaps);
    for ( k = varCollMapLookupEntry; numCollmaps; --numCollmaps )
    {
      varCollMapLookupEntry = k;
      Load_Stream(NotAtStart, k, 0x10ui64);
      v44 = varXString;
      varXString = &varCollMapLookupEntry->targetName;
      Preload_XString(NotAtStart);
      ++k;
      varXString = v44;
    }
    varCollMapLookupEntry = v41;
  }
  DB_PopStreamPos();
  DB_PatchMem_PopAsset();
}

/*
==============
Preload_MapEntsArray
==============
*/
void Preload_MapEntsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  MapEnts *i; 

  v2 = count;
  Load_Stream(streamStart, varMapEnts, 1064 * count);
  for ( i = varMapEnts; v2; --v2 )
  {
    varMapEnts = i;
    Preload_MapEnts(NotAtStart);
    ++i;
  }
}

/*
==============
Preload_MapEntsPtr
==============
*/
void Preload_MapEntsPtr(const DBStreamStart streamStart)
{
  __int64 v1; 
  MapEnts *v2; 

  Load_Stream(streamStart, varMapEntsPtr, 8ui64);
  DB_PushStreamPos(2u);
  v1 = (__int64)*varMapEntsPtr;
  if ( *varMapEntsPtr )
  {
    if ( v1 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v1 != -2 && v1 != -3 )
    {
      goto LABEL_11;
    }
    v2 = varMapEnts;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varMapEnts = (MapEnts *)g_streamPosGlob.pos;
    if ( v1 == -3 )
      DB_InsertPointer();
    Preload_MapEnts(AtStart);
    varMapEnts = v2;
    if ( v1 == -1 )
      DB_PopSharedData();
  }
LABEL_11:
  DB_PopStreamPos();
}

/*
==============
Preload_MapEntsPtrArray
==============
*/
void Preload_MapEntsPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  MapEnts **i; 
  __int64 v4; 
  MapEnts *v5; 

  v2 = count;
  Load_Stream(streamStart, varMapEntsPtr, 8 * count);
  for ( i = varMapEntsPtr; v2; --v2 )
  {
    varMapEntsPtr = i;
    Load_Stream(NotAtStart, i, 8ui64);
    DB_PushStreamPos(2u);
    v4 = (__int64)*varMapEntsPtr;
    if ( *varMapEntsPtr )
    {
      if ( v4 == -1 )
      {
        DB_PushSharedData();
LABEL_8:
        v5 = varMapEnts;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varMapEnts = (MapEnts *)g_streamPosGlob.pos;
        if ( v4 == -3 )
          DB_InsertPointer();
        Preload_MapEnts(AtStart);
        varMapEnts = v5;
        if ( v4 == -1 )
          DB_PopSharedData();
        goto LABEL_12;
      }
      if ( v4 == -2 || v4 == -3 )
        goto LABEL_8;
    }
LABEL_12:
    DB_PopStreamPos();
    ++i;
  }
}

/*
==============
Preload_MapEntsPtrStream
==============
*/
void Preload_MapEntsPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  __int64 v4; 
  MapEnts *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 45917, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varMapEntsPtr;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      DB_PushStreamPos(2u);
      v4 = (__int64)*varMapEntsPtr;
      if ( *varMapEntsPtr )
      {
        if ( v4 == -1 )
        {
          DB_PushSharedData();
LABEL_12:
          v5 = varMapEnts;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varMapEnts = (MapEnts *)g_streamPosGlob.pos;
          if ( v4 == -3 )
            DB_InsertPointer();
          Preload_MapEnts(AtStart);
          varMapEnts = v5;
          if ( v4 == -1 )
            DB_PopSharedData();
          goto LABEL_16;
        }
        if ( v4 == -2 || v4 == -3 )
          goto LABEL_12;
      }
LABEL_16:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varMapEntsPtr = (MapEnts **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_MapEntsStream
==============
*/
void Preload_MapEntsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 45802, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Preload_MapEnts(AtStart);
    varMapEnts = (MapEnts *)g_streamPosGlob.pos;
  }
}

/*
==============
Preload_MapTriggers
==============
*/
void Preload_MapTriggers(const DBStreamStart streamStart)
{
  TriggerModel *models; 
  TriggerModel *v2; 
  __int64 count; 
  TriggerModel *i; 
  PhysicsAsset **v5; 
  TriggerHull *hulls; 
  TriggerHull *v7; 
  TriggerSlab *slabs; 
  TriggerSlab *v9; 
  TriggerWinding *windings; 
  TriggerWinding *v11; 
  TriggerWindingPoint *windingPoints; 
  TriggerWindingPoint *v13; 

  Load_Stream(streamStart, varMapTriggers, 0x50ui64);
  models = varMapTriggers->models;
  if ( models )
  {
    if ( models == (TriggerModel *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( models != (TriggerModel *)-2i64 )
    {
      goto LABEL_10;
    }
    v2 = varTriggerModel;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varTriggerModel = (TriggerModel *)g_streamPosGlob.pos;
    count = varMapTriggers->count;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32 * count);
    for ( i = varTriggerModel; count; --count )
    {
      varTriggerModel = i;
      Load_Stream(NotAtStart, i, 0x20ui64);
      v5 = varPhysicsAssetPtr;
      varPhysicsAssetPtr = &varTriggerModel->physicsAsset;
      Preload_PhysicsAssetPtr(NotAtStart);
      ++i;
      varPhysicsAssetPtr = v5;
    }
    varTriggerModel = v2;
    if ( models == (TriggerModel *)-1i64 )
      DB_PopSharedData();
  }
LABEL_10:
  hulls = varMapTriggers->hulls;
  if ( !hulls )
    goto LABEL_17;
  if ( hulls == (TriggerHull *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( hulls != (TriggerHull *)-2i64 )
  {
    goto LABEL_17;
  }
  v7 = varTriggerHull;
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  varTriggerHull = (TriggerHull *)g_streamPosGlob.pos;
  Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varMapTriggers->hullCount);
  varTriggerHull = v7;
  if ( hulls == (TriggerHull *)-1i64 )
    DB_PopSharedData();
LABEL_17:
  slabs = varMapTriggers->slabs;
  if ( !slabs )
    goto LABEL_24;
  if ( slabs == (TriggerSlab *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( slabs != (TriggerSlab *)-2i64 )
  {
    goto LABEL_24;
  }
  v9 = varTriggerSlab;
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  varTriggerSlab = (TriggerSlab *)g_streamPosGlob.pos;
  Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varMapTriggers->slabCount);
  varTriggerSlab = v9;
  if ( slabs == (TriggerSlab *)-1i64 )
    DB_PopSharedData();
LABEL_24:
  windings = varMapTriggers->windings;
  if ( !windings )
    goto LABEL_31;
  if ( windings == (TriggerWinding *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( windings != (TriggerWinding *)-2i64 )
  {
    goto LABEL_31;
  }
  v11 = varTriggerWinding;
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  varTriggerWinding = (TriggerWinding *)g_streamPosGlob.pos;
  Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varMapTriggers->windingCount);
  varTriggerWinding = v11;
  if ( windings == (TriggerWinding *)-1i64 )
    DB_PopSharedData();
LABEL_31:
  windingPoints = varMapTriggers->windingPoints;
  if ( !windingPoints )
    return;
  if ( windingPoints == (TriggerWindingPoint *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( windingPoints != (TriggerWindingPoint *)-2i64 )
  {
    return;
  }
  v13 = varTriggerWindingPoint;
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  varTriggerWindingPoint = (TriggerWindingPoint *)g_streamPosGlob.pos;
  Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varMapTriggers->windingPointCount);
  varTriggerWindingPoint = v13;
  if ( windingPoints == (TriggerWindingPoint *)-1i64 )
    DB_PopSharedData();
}

/*
==============
Preload_MapTriggersArray
==============
*/
void Preload_MapTriggersArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  MapTriggers *i; 
  TriggerModel *models; 
  TriggerModel *v5; 
  __int64 v6; 
  TriggerModel *j; 
  PhysicsAsset **v8; 
  TriggerHull *hulls; 
  TriggerHull *v10; 
  TriggerSlab *slabs; 
  TriggerSlab *v12; 
  TriggerWinding *windings; 
  TriggerWinding *v14; 
  TriggerWindingPoint *windingPoints; 
  TriggerWindingPoint *v16; 

  v2 = count;
  Load_Stream(streamStart, varMapTriggers, 80 * count);
  for ( i = varMapTriggers; v2; --v2 )
  {
    varMapTriggers = i;
    Load_Stream(NotAtStart, i, 0x50ui64);
    models = varMapTriggers->models;
    if ( !models )
      goto LABEL_11;
    if ( models == (TriggerModel *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( models != (TriggerModel *)-2i64 )
    {
      goto LABEL_11;
    }
    v5 = varTriggerModel;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varTriggerModel = (TriggerModel *)g_streamPosGlob.pos;
    v6 = varMapTriggers->count;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32 * v6);
    for ( j = varTriggerModel; v6; --v6 )
    {
      varTriggerModel = j;
      Load_Stream(NotAtStart, j, 0x20ui64);
      v8 = varPhysicsAssetPtr;
      varPhysicsAssetPtr = &varTriggerModel->physicsAsset;
      Preload_PhysicsAssetPtr(NotAtStart);
      ++j;
      varPhysicsAssetPtr = v8;
    }
    varTriggerModel = v5;
    if ( models == (TriggerModel *)-1i64 )
      DB_PopSharedData();
LABEL_11:
    hulls = varMapTriggers->hulls;
    if ( !hulls )
      goto LABEL_18;
    if ( hulls == (TriggerHull *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( hulls != (TriggerHull *)-2i64 )
    {
      goto LABEL_18;
    }
    v10 = varTriggerHull;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varTriggerHull = (TriggerHull *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varMapTriggers->hullCount);
    varTriggerHull = v10;
    if ( hulls == (TriggerHull *)-1i64 )
      DB_PopSharedData();
LABEL_18:
    slabs = varMapTriggers->slabs;
    if ( !slabs )
      goto LABEL_25;
    if ( slabs == (TriggerSlab *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( slabs != (TriggerSlab *)-2i64 )
    {
      goto LABEL_25;
    }
    v12 = varTriggerSlab;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varTriggerSlab = (TriggerSlab *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varMapTriggers->slabCount);
    varTriggerSlab = v12;
    if ( slabs == (TriggerSlab *)-1i64 )
      DB_PopSharedData();
LABEL_25:
    windings = varMapTriggers->windings;
    if ( !windings )
      goto LABEL_32;
    if ( windings == (TriggerWinding *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( windings != (TriggerWinding *)-2i64 )
    {
      goto LABEL_32;
    }
    v14 = varTriggerWinding;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varTriggerWinding = (TriggerWinding *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varMapTriggers->windingCount);
    varTriggerWinding = v14;
    if ( windings == (TriggerWinding *)-1i64 )
      DB_PopSharedData();
LABEL_32:
    windingPoints = varMapTriggers->windingPoints;
    if ( windingPoints )
    {
      if ( windingPoints == (TriggerWindingPoint *)-1i64 )
      {
        DB_PushSharedData();
LABEL_37:
        v16 = varTriggerWindingPoint;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varTriggerWindingPoint = (TriggerWindingPoint *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varMapTriggers->windingPointCount);
        varTriggerWindingPoint = v16;
        if ( windingPoints == (TriggerWindingPoint *)-1i64 )
          DB_PopSharedData();
        goto LABEL_39;
      }
      if ( windingPoints == (TriggerWindingPoint *)-2i64 )
        goto LABEL_37;
    }
LABEL_39:
    ++i;
  }
}

/*
==============
Preload_MapTriggersStream
==============
*/
void Preload_MapTriggersStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  TriggerModel *models; 
  TriggerModel *v5; 
  __int64 v6; 
  TriggerModel *i; 
  PhysicsAsset **v8; 
  TriggerHull *hulls; 
  TriggerHull *v10; 
  TriggerSlab *slabs; 
  TriggerSlab *v12; 
  TriggerWinding *windings; 
  TriggerWinding *v14; 
  TriggerWindingPoint *windingPoints; 
  TriggerWindingPoint *v16; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 36522, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varMapTriggers;
    do
    {
      Load_Stream(AtStart, pos, 0x50ui64);
      models = varMapTriggers->models;
      if ( !models )
        goto LABEL_15;
      if ( models == (TriggerModel *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( models != (TriggerModel *)-2i64 )
      {
        goto LABEL_15;
      }
      v5 = varTriggerModel;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varTriggerModel = (TriggerModel *)g_streamPosGlob.pos;
      v6 = varMapTriggers->count;
      Load_Stream(AtStart, g_streamPosGlob.pos, 32 * v6);
      for ( i = varTriggerModel; v6; --v6 )
      {
        varTriggerModel = i;
        Load_Stream(NotAtStart, i, 0x20ui64);
        v8 = varPhysicsAssetPtr;
        varPhysicsAssetPtr = &varTriggerModel->physicsAsset;
        Preload_PhysicsAssetPtr(NotAtStart);
        ++i;
        varPhysicsAssetPtr = v8;
      }
      varTriggerModel = v5;
      if ( models == (TriggerModel *)-1i64 )
        DB_PopSharedData();
LABEL_15:
      hulls = varMapTriggers->hulls;
      if ( !hulls )
        goto LABEL_22;
      if ( hulls == (TriggerHull *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( hulls != (TriggerHull *)-2i64 )
      {
        goto LABEL_22;
      }
      v10 = varTriggerHull;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varTriggerHull = (TriggerHull *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varMapTriggers->hullCount);
      varTriggerHull = v10;
      if ( hulls == (TriggerHull *)-1i64 )
        DB_PopSharedData();
LABEL_22:
      slabs = varMapTriggers->slabs;
      if ( !slabs )
        goto LABEL_29;
      if ( slabs == (TriggerSlab *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( slabs != (TriggerSlab *)-2i64 )
      {
        goto LABEL_29;
      }
      v12 = varTriggerSlab;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varTriggerSlab = (TriggerSlab *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varMapTriggers->slabCount);
      varTriggerSlab = v12;
      if ( slabs == (TriggerSlab *)-1i64 )
        DB_PopSharedData();
LABEL_29:
      windings = varMapTriggers->windings;
      if ( !windings )
        goto LABEL_36;
      if ( windings == (TriggerWinding *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( windings != (TriggerWinding *)-2i64 )
      {
        goto LABEL_36;
      }
      v14 = varTriggerWinding;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varTriggerWinding = (TriggerWinding *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varMapTriggers->windingCount);
      varTriggerWinding = v14;
      if ( windings == (TriggerWinding *)-1i64 )
        DB_PopSharedData();
LABEL_36:
      windingPoints = varMapTriggers->windingPoints;
      if ( windingPoints )
      {
        if ( windingPoints == (TriggerWindingPoint *)-1i64 )
        {
          DB_PushSharedData();
LABEL_41:
          v16 = varTriggerWindingPoint;
          DB_PatchMem_FixStreamAlignment(3ui64);
          DB_CheckCanIncStreamPos(0i64);
          varTriggerWindingPoint = (TriggerWindingPoint *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varMapTriggers->windingPointCount);
          varTriggerWindingPoint = v16;
          if ( windingPoints == (TriggerWindingPoint *)-1i64 )
            DB_PopSharedData();
          goto LABEL_43;
        }
        if ( windingPoints == (TriggerWindingPoint *)-2i64 )
          goto LABEL_41;
      }
LABEL_43:
      pos = g_streamPosGlob.pos;
      varMapTriggers = (MapTriggers *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_PhysicsCapacities
==============
*/
void Preload_PhysicsCapacities(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varPhysicsCapacities, 0x20ui64);
}

/*
==============
Preload_PhysicsCapacitiesArray
==============
*/
void Preload_PhysicsCapacitiesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varPhysicsCapacities, 32 * count);
}

/*
==============
Preload_PhysicsCapacitiesStream
==============
*/
void Preload_PhysicsCapacitiesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 46499, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varPhysicsCapacities;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      pos = g_streamPosGlob.pos;
      varPhysicsCapacities = (PhysicsCapacities *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ServerExploderDef
==============
*/
void Preload_ServerExploderDef(const DBStreamStart streamStart)
{
  scr_string_t *v1; 

  Load_Stream(streamStart, varServerExploderDef, 0x28ui64);
  v1 = varscr_string_t;
  varscr_string_t = &varServerExploderDef->name;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = &varServerExploderDef->earthquakeName;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = &varServerExploderDef->rumbleName;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = v1;
}

/*
==============
Preload_ServerExploderDefArray
==============
*/
void Preload_ServerExploderDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ServerExploderDef *i; 
  scr_string_t *v4; 

  v2 = count;
  Load_Stream(streamStart, varServerExploderDef, 40 * count);
  for ( i = varServerExploderDef; v2; --v2 )
  {
    varServerExploderDef = i;
    Load_Stream(NotAtStart, i, 0x28ui64);
    v4 = varscr_string_t;
    varscr_string_t = &varServerExploderDef->name;
    Preload_scr_string_t(NotAtStart);
    varscr_string_t = &varServerExploderDef->earthquakeName;
    Preload_scr_string_t(NotAtStart);
    varscr_string_t = &varServerExploderDef->rumbleName;
    Preload_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v4;
  }
}

/*
==============
Preload_ServerExploderDefStream
==============
*/
void Preload_ServerExploderDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  scr_string_t *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 41237, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varServerExploderDef;
    do
    {
      Load_Stream(AtStart, pos, 0x28ui64);
      v4 = varscr_string_t;
      varscr_string_t = &varServerExploderDef->name;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = &varServerExploderDef->earthquakeName;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = &varServerExploderDef->rumbleName;
      Preload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varServerExploderDef = (ServerExploderDef *)g_streamPosGlob.pos;
      varscr_string_t = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ServerSideEffects
==============
*/
void Preload_ServerSideEffects(const DBStreamStart streamStart)
{
  ServerExploderDef *v1; 
  __int64 exploderCount; 
  ServerExploderDef *i; 
  scr_string_t *v4; 

  Load_Stream(streamStart, varServerSideEffects, 0x10ui64);
  if ( varServerSideEffects->exploders )
  {
    v1 = varServerExploderDef;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varServerExploderDef = (ServerExploderDef *)g_streamPosGlob.pos;
    exploderCount = varServerSideEffects->exploderCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 40 * exploderCount);
    for ( i = varServerExploderDef; exploderCount; --exploderCount )
    {
      varServerExploderDef = i;
      Load_Stream(NotAtStart, i, 0x28ui64);
      v4 = varscr_string_t;
      varscr_string_t = &varServerExploderDef->name;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = &varServerExploderDef->earthquakeName;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = &varServerExploderDef->rumbleName;
      Preload_scr_string_t(NotAtStart);
      ++i;
      varscr_string_t = v4;
    }
    varServerExploderDef = v1;
  }
}

/*
==============
Preload_ServerSideEffectsArray
==============
*/
void Preload_ServerSideEffectsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ServerSideEffects *i; 
  ServerExploderDef *v4; 
  __int64 exploderCount; 
  ServerExploderDef *j; 
  scr_string_t *v7; 

  v2 = count;
  Load_Stream(streamStart, varServerSideEffects, 16 * count);
  for ( i = varServerSideEffects; v2; --v2 )
  {
    varServerSideEffects = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    if ( varServerSideEffects->exploders )
    {
      v4 = varServerExploderDef;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varServerExploderDef = (ServerExploderDef *)g_streamPosGlob.pos;
      exploderCount = varServerSideEffects->exploderCount;
      Load_Stream(AtStart, g_streamPosGlob.pos, 40 * exploderCount);
      for ( j = varServerExploderDef; exploderCount; --exploderCount )
      {
        varServerExploderDef = j;
        Load_Stream(NotAtStart, j, 0x28ui64);
        v7 = varscr_string_t;
        varscr_string_t = &varServerExploderDef->name;
        Preload_scr_string_t(NotAtStart);
        varscr_string_t = &varServerExploderDef->earthquakeName;
        Preload_scr_string_t(NotAtStart);
        varscr_string_t = &varServerExploderDef->rumbleName;
        Preload_scr_string_t(NotAtStart);
        ++j;
        varscr_string_t = v7;
      }
      varServerExploderDef = v4;
    }
    ++i;
  }
}

/*
==============
Preload_ServerSideEffectsStream
==============
*/
void Preload_ServerSideEffectsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ServerExploderDef *v4; 
  __int64 exploderCount; 
  ServerExploderDef *i; 
  scr_string_t *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 41338, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varServerSideEffects;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      if ( varServerSideEffects->exploders )
      {
        v4 = varServerExploderDef;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varServerExploderDef = (ServerExploderDef *)g_streamPosGlob.pos;
        exploderCount = varServerSideEffects->exploderCount;
        Load_Stream(AtStart, g_streamPosGlob.pos, 40 * exploderCount);
        for ( i = varServerExploderDef; exploderCount; --exploderCount )
        {
          varServerExploderDef = i;
          Load_Stream(NotAtStart, i, 0x28ui64);
          v7 = varscr_string_t;
          varscr_string_t = &varServerExploderDef->name;
          Preload_scr_string_t(NotAtStart);
          varscr_string_t = &varServerExploderDef->earthquakeName;
          Preload_scr_string_t(NotAtStart);
          varscr_string_t = &varServerExploderDef->rumbleName;
          Preload_scr_string_t(NotAtStart);
          ++i;
          varscr_string_t = v7;
        }
        varServerExploderDef = v4;
      }
      pos = g_streamPosGlob.pos;
      varServerSideEffects = (ServerSideEffects *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_SpawnGroup
==============
*/
void Preload_SpawnGroup(const DBStreamStart streamStart)
{
  SpawnGroup *v1; 
  SpawnGroupPoint *v2; 
  SpawnGroupCluster *v3; 
  __int64 clusterCount; 
  SpawnGroupCluster *i; 
  unsigned __int16 *v6; 
  SpawnGroupZone *v7; 
  __int64 zoneCount; 
  SpawnGroupZone *j; 

  Load_Stream(streamStart, varSpawnGroup, 0x30ui64);
  v1 = varSpawnGroup;
  if ( varSpawnGroup->points )
  {
    v2 = varSpawnGroupPoint;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varSpawnGroupPoint = (SpawnGroupPoint *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varSpawnGroup->pointCount);
    v1 = varSpawnGroup;
    varSpawnGroupPoint = v2;
  }
  if ( v1->clusters )
  {
    v3 = varSpawnGroupCluster;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varSpawnGroupCluster = (SpawnGroupCluster *)g_streamPosGlob.pos;
    clusterCount = varSpawnGroup->clusterCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 40 * clusterCount);
    for ( i = varSpawnGroupCluster; clusterCount; --clusterCount )
    {
      varSpawnGroupCluster = i;
      Load_Stream(NotAtStart, i, 0x28ui64);
      if ( varSpawnGroupCluster->points )
      {
        v6 = varushort;
        varushort = AllocPreload_ushort();
        Preload_ushortArray(AtStart, varSpawnGroupCluster->pointCount);
        varushort = v6;
      }
      ++i;
    }
    v1 = varSpawnGroup;
    varSpawnGroupCluster = v3;
  }
  if ( v1->zones )
  {
    v7 = varSpawnGroupZone;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varSpawnGroupZone = (SpawnGroupZone *)g_streamPosGlob.pos;
    zoneCount = varSpawnGroup->zoneCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 56 * zoneCount);
    for ( j = varSpawnGroupZone; zoneCount; --zoneCount )
    {
      varSpawnGroupZone = j;
      Preload_SpawnGroupZone(NotAtStart);
      ++j;
    }
    varSpawnGroupZone = v7;
  }
}

/*
==============
Preload_SpawnGroupArray
==============
*/
void Preload_SpawnGroupArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SpawnGroup *i; 
  SpawnGroup *v4; 
  SpawnGroupPoint *v5; 
  SpawnGroupCluster *v6; 
  __int64 clusterCount; 
  SpawnGroupCluster *j; 
  unsigned __int16 *v9; 
  SpawnGroupZone *v10; 
  __int64 zoneCount; 
  SpawnGroupZone *k; 

  v2 = count;
  Load_Stream(streamStart, varSpawnGroup, 48 * count);
  for ( i = varSpawnGroup; v2; --v2 )
  {
    varSpawnGroup = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    v4 = varSpawnGroup;
    if ( varSpawnGroup->points )
    {
      v5 = varSpawnGroupPoint;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varSpawnGroupPoint = (SpawnGroupPoint *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varSpawnGroup->pointCount);
      v4 = varSpawnGroup;
      varSpawnGroupPoint = v5;
    }
    if ( v4->clusters )
    {
      v6 = varSpawnGroupCluster;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varSpawnGroupCluster = (SpawnGroupCluster *)g_streamPosGlob.pos;
      clusterCount = varSpawnGroup->clusterCount;
      Load_Stream(AtStart, g_streamPosGlob.pos, 40 * clusterCount);
      for ( j = varSpawnGroupCluster; clusterCount; --clusterCount )
      {
        varSpawnGroupCluster = j;
        Load_Stream(NotAtStart, j, 0x28ui64);
        if ( varSpawnGroupCluster->points )
        {
          v9 = varushort;
          varushort = AllocPreload_ushort();
          Preload_ushortArray(AtStart, varSpawnGroupCluster->pointCount);
          varushort = v9;
        }
        ++j;
      }
      v4 = varSpawnGroup;
      varSpawnGroupCluster = v6;
    }
    if ( v4->zones )
    {
      v10 = varSpawnGroupZone;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varSpawnGroupZone = (SpawnGroupZone *)g_streamPosGlob.pos;
      zoneCount = varSpawnGroup->zoneCount;
      Load_Stream(AtStart, g_streamPosGlob.pos, 56 * zoneCount);
      for ( k = varSpawnGroupZone; zoneCount; --zoneCount )
      {
        varSpawnGroupZone = k;
        Preload_SpawnGroupZone(NotAtStart);
        ++k;
      }
      varSpawnGroupZone = v10;
    }
    ++i;
  }
}

/*
==============
Preload_SpawnGroupCluster
==============
*/
void Preload_SpawnGroupCluster(const DBStreamStart streamStart)
{
  unsigned __int16 *v1; 

  Load_Stream(streamStart, varSpawnGroupCluster, 0x28ui64);
  if ( varSpawnGroupCluster->points )
  {
    v1 = varushort;
    varushort = AllocPreload_ushort();
    Preload_ushortArray(AtStart, varSpawnGroupCluster->pointCount);
    varushort = v1;
  }
}

/*
==============
Preload_SpawnGroupClusterArray
==============
*/
void Preload_SpawnGroupClusterArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SpawnGroupCluster *i; 
  unsigned __int16 *v4; 

  v2 = count;
  Load_Stream(streamStart, varSpawnGroupCluster, 40 * count);
  for ( i = varSpawnGroupCluster; v2; --v2 )
  {
    varSpawnGroupCluster = i;
    Load_Stream(NotAtStart, i, 0x28ui64);
    if ( varSpawnGroupCluster->points )
    {
      v4 = varushort;
      varushort = AllocPreload_ushort();
      Preload_ushortArray(AtStart, varSpawnGroupCluster->pointCount);
      varushort = v4;
    }
    ++i;
  }
}

/*
==============
Preload_SpawnGroupClusterStream
==============
*/
void Preload_SpawnGroupClusterStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  unsigned __int16 *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 38760, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varSpawnGroupCluster;
    do
    {
      Load_Stream(AtStart, pos, 0x28ui64);
      if ( varSpawnGroupCluster->points )
      {
        v4 = varushort;
        varushort = AllocPreload_ushort();
        Preload_ushortArray(AtStart, varSpawnGroupCluster->pointCount);
        varushort = v4;
      }
      pos = g_streamPosGlob.pos;
      varSpawnGroupCluster = (SpawnGroupCluster *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_SpawnGroupPoint
==============
*/
void Preload_SpawnGroupPoint(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varSpawnGroupPoint, 0x1Cui64);
}

/*
==============
Preload_SpawnGroupPointArray
==============
*/
void Preload_SpawnGroupPointArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varSpawnGroupPoint, 28 * count);
}

/*
==============
Preload_SpawnGroupPointStream
==============
*/
void Preload_SpawnGroupPointStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 38613, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varSpawnGroupPoint;
    do
    {
      Load_Stream(AtStart, pos, 0x1Cui64);
      pos = g_streamPosGlob.pos;
      varSpawnGroupPoint = (SpawnGroupPoint *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_SpawnGroupStream
==============
*/
void Preload_SpawnGroupStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  SpawnGroup *v4; 
  SpawnGroupPoint *v5; 
  SpawnGroupCluster *v6; 
  __int64 clusterCount; 
  SpawnGroupCluster *i; 
  unsigned __int16 *v9; 
  SpawnGroupZone *v10; 
  __int64 zoneCount; 
  SpawnGroupZone *j; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 39152, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varSpawnGroup;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      v4 = varSpawnGroup;
      if ( varSpawnGroup->points )
      {
        v5 = varSpawnGroupPoint;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varSpawnGroupPoint = (SpawnGroupPoint *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varSpawnGroup->pointCount);
        v4 = varSpawnGroup;
        varSpawnGroupPoint = v5;
      }
      if ( v4->clusters )
      {
        v6 = varSpawnGroupCluster;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varSpawnGroupCluster = (SpawnGroupCluster *)g_streamPosGlob.pos;
        clusterCount = varSpawnGroup->clusterCount;
        Load_Stream(AtStart, g_streamPosGlob.pos, 40 * clusterCount);
        for ( i = varSpawnGroupCluster; clusterCount; --clusterCount )
        {
          varSpawnGroupCluster = i;
          Load_Stream(NotAtStart, i, 0x28ui64);
          if ( varSpawnGroupCluster->points )
          {
            v9 = varushort;
            varushort = AllocPreload_ushort();
            Preload_ushortArray(AtStart, varSpawnGroupCluster->pointCount);
            varushort = v9;
          }
          ++i;
        }
        v4 = varSpawnGroup;
        varSpawnGroupCluster = v6;
      }
      if ( v4->zones )
      {
        v10 = varSpawnGroupZone;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varSpawnGroupZone = (SpawnGroupZone *)g_streamPosGlob.pos;
        zoneCount = varSpawnGroup->zoneCount;
        Load_Stream(AtStart, g_streamPosGlob.pos, 56 * zoneCount);
        for ( j = varSpawnGroupZone; zoneCount; --zoneCount )
        {
          varSpawnGroupZone = j;
          Preload_SpawnGroupZone(NotAtStart);
          ++j;
        }
        varSpawnGroupZone = v10;
      }
      pos = g_streamPosGlob.pos;
      varSpawnGroup = (SpawnGroup *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_SpawnGroupZone
==============
*/
void Preload_SpawnGroupZone(const DBStreamStart streamStart)
{
  scr_string_t *v1; 
  SpawnGroupZone *v2; 
  unsigned __int16 *v3; 

  Load_Stream(streamStart, varSpawnGroupZone, 0x38ui64);
  v1 = varscr_string_t;
  varscr_string_t = &varSpawnGroupZone->name;
  Preload_scr_string_t(NotAtStart);
  v2 = varSpawnGroupZone;
  varscr_string_t = v1;
  v3 = varushort;
  if ( varSpawnGroupZone->points )
  {
    varushort = AllocPreload_ushort();
    Preload_ushortArray(AtStart, varSpawnGroupZone->pointCount);
    v2 = varSpawnGroupZone;
    varushort = v3;
  }
  if ( v2->clusters )
  {
    varushort = AllocPreload_ushort();
    Preload_ushortArray(AtStart, varSpawnGroupZone->clusterCount);
    varushort = v3;
  }
}

/*
==============
Preload_SpawnGroupZoneArray
==============
*/
void Preload_SpawnGroupZoneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SpawnGroupZone *i; 
  scr_string_t *v4; 
  SpawnGroupZone *v5; 
  unsigned __int16 *v6; 

  v2 = count;
  Load_Stream(streamStart, varSpawnGroupZone, 56 * count);
  for ( i = varSpawnGroupZone; v2; --v2 )
  {
    varSpawnGroupZone = i;
    Load_Stream(NotAtStart, i, 0x38ui64);
    v4 = varscr_string_t;
    varscr_string_t = &varSpawnGroupZone->name;
    Preload_scr_string_t(NotAtStart);
    v5 = varSpawnGroupZone;
    varscr_string_t = v4;
    v6 = varushort;
    if ( varSpawnGroupZone->points )
    {
      varushort = AllocPreload_ushort();
      Preload_ushortArray(AtStart, varSpawnGroupZone->pointCount);
      v5 = varSpawnGroupZone;
      varushort = v6;
    }
    if ( v5->clusters )
    {
      varushort = AllocPreload_ushort();
      Preload_ushortArray(AtStart, varSpawnGroupZone->clusterCount);
      varushort = v6;
    }
    ++i;
  }
}

/*
==============
Preload_SpawnGroupZoneStream
==============
*/
void Preload_SpawnGroupZoneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  scr_string_t *v4; 
  SpawnGroupZone *v5; 
  unsigned __int16 *v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 38955, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varSpawnGroupZone;
    do
    {
      Load_Stream(AtStart, pos, 0x38ui64);
      v4 = varscr_string_t;
      varscr_string_t = &varSpawnGroupZone->name;
      Preload_scr_string_t(NotAtStart);
      v5 = varSpawnGroupZone;
      varscr_string_t = v4;
      v6 = varushort;
      if ( varSpawnGroupZone->points )
      {
        varushort = AllocPreload_ushort();
        Preload_ushortArray(AtStart, varSpawnGroupZone->pointCount);
        v5 = varSpawnGroupZone;
        varushort = v6;
      }
      if ( v5->clusters )
      {
        varushort = AllocPreload_ushort();
        Preload_ushortArray(AtStart, varSpawnGroupZone->clusterCount);
        varushort = v6;
      }
      pos = g_streamPosGlob.pos;
      varSpawnGroupZone = (SpawnGroupZone *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_SpawnPointEntityRecord
==============
*/
void Preload_SpawnPointEntityRecord(const DBStreamStart streamStart)
{
  scr_string_t *v1; 

  Load_Stream(streamStart, varSpawnPointEntityRecord, 0x28ui64);
  v1 = varscr_string_t;
  varscr_string_t = &varSpawnPointEntityRecord->name;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = &varSpawnPointEntityRecord->target;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = &varSpawnPointEntityRecord->script_noteworthy;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = v1;
}

/*
==============
Preload_SpawnPointEntityRecordArray
==============
*/
void Preload_SpawnPointEntityRecordArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SpawnPointEntityRecord *i; 
  scr_string_t *v4; 

  v2 = count;
  Load_Stream(streamStart, varSpawnPointEntityRecord, 40 * count);
  for ( i = varSpawnPointEntityRecord; v2; --v2 )
  {
    varSpawnPointEntityRecord = i;
    Load_Stream(NotAtStart, i, 0x28ui64);
    v4 = varscr_string_t;
    varscr_string_t = &varSpawnPointEntityRecord->name;
    Preload_scr_string_t(NotAtStart);
    varscr_string_t = &varSpawnPointEntityRecord->target;
    Preload_scr_string_t(NotAtStart);
    varscr_string_t = &varSpawnPointEntityRecord->script_noteworthy;
    Preload_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v4;
  }
}

/*
==============
Preload_SpawnPointEntityRecordStream
==============
*/
void Preload_SpawnPointEntityRecordStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  scr_string_t *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 38367, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varSpawnPointEntityRecord;
    do
    {
      Load_Stream(AtStart, pos, 0x28ui64);
      v4 = varscr_string_t;
      varscr_string_t = &varSpawnPointEntityRecord->name;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = &varSpawnPointEntityRecord->target;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = &varSpawnPointEntityRecord->script_noteworthy;
      Preload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varSpawnPointEntityRecord = (SpawnPointEntityRecord *)g_streamPosGlob.pos;
      varscr_string_t = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_SpawnPointRecordList
==============
*/
void Preload_SpawnPointRecordList(const DBStreamStart streamStart)
{
  SpawnPointEntityRecord *v1; 
  __int64 spawnsCount; 
  SpawnPointEntityRecord *i; 
  scr_string_t *v4; 

  Load_Stream(streamStart, varSpawnPointRecordList, 0x10ui64);
  if ( varSpawnPointRecordList->spawns )
  {
    v1 = varSpawnPointEntityRecord;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varSpawnPointEntityRecord = (SpawnPointEntityRecord *)g_streamPosGlob.pos;
    spawnsCount = varSpawnPointRecordList->spawnsCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 40 * spawnsCount);
    for ( i = varSpawnPointEntityRecord; spawnsCount; --spawnsCount )
    {
      varSpawnPointEntityRecord = i;
      Load_Stream(NotAtStart, i, 0x28ui64);
      v4 = varscr_string_t;
      varscr_string_t = &varSpawnPointEntityRecord->name;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = &varSpawnPointEntityRecord->target;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = &varSpawnPointEntityRecord->script_noteworthy;
      Preload_scr_string_t(NotAtStart);
      ++i;
      varscr_string_t = v4;
    }
    varSpawnPointEntityRecord = v1;
  }
}

/*
==============
Preload_SpawnPointRecordListArray
==============
*/
void Preload_SpawnPointRecordListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SpawnPointRecordList *i; 
  SpawnPointEntityRecord *v4; 
  __int64 spawnsCount; 
  SpawnPointEntityRecord *j; 
  scr_string_t *v7; 

  v2 = count;
  Load_Stream(streamStart, varSpawnPointRecordList, 16 * count);
  for ( i = varSpawnPointRecordList; v2; --v2 )
  {
    varSpawnPointRecordList = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    if ( varSpawnPointRecordList->spawns )
    {
      v4 = varSpawnPointEntityRecord;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varSpawnPointEntityRecord = (SpawnPointEntityRecord *)g_streamPosGlob.pos;
      spawnsCount = varSpawnPointRecordList->spawnsCount;
      Load_Stream(AtStart, g_streamPosGlob.pos, 40 * spawnsCount);
      for ( j = varSpawnPointEntityRecord; spawnsCount; --spawnsCount )
      {
        varSpawnPointEntityRecord = j;
        Load_Stream(NotAtStart, j, 0x28ui64);
        v7 = varscr_string_t;
        varscr_string_t = &varSpawnPointEntityRecord->name;
        Preload_scr_string_t(NotAtStart);
        varscr_string_t = &varSpawnPointEntityRecord->target;
        Preload_scr_string_t(NotAtStart);
        varscr_string_t = &varSpawnPointEntityRecord->script_noteworthy;
        Preload_scr_string_t(NotAtStart);
        ++j;
        varscr_string_t = v7;
      }
      varSpawnPointEntityRecord = v4;
    }
    ++i;
  }
}

/*
==============
Preload_SpawnPointRecordListStream
==============
*/
void Preload_SpawnPointRecordListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  SpawnPointEntityRecord *v4; 
  __int64 spawnsCount; 
  SpawnPointEntityRecord *i; 
  scr_string_t *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 38468, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varSpawnPointRecordList;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      if ( varSpawnPointRecordList->spawns )
      {
        v4 = varSpawnPointEntityRecord;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varSpawnPointEntityRecord = (SpawnPointEntityRecord *)g_streamPosGlob.pos;
        spawnsCount = varSpawnPointRecordList->spawnsCount;
        Load_Stream(AtStart, g_streamPosGlob.pos, 40 * spawnsCount);
        for ( i = varSpawnPointEntityRecord; spawnsCount; --spawnsCount )
        {
          varSpawnPointEntityRecord = i;
          Load_Stream(NotAtStart, i, 0x28ui64);
          v7 = varscr_string_t;
          varscr_string_t = &varSpawnPointEntityRecord->name;
          Preload_scr_string_t(NotAtStart);
          varscr_string_t = &varSpawnPointEntityRecord->target;
          Preload_scr_string_t(NotAtStart);
          varscr_string_t = &varSpawnPointEntityRecord->script_noteworthy;
          Preload_scr_string_t(NotAtStart);
          ++i;
          varscr_string_t = v7;
        }
        varSpawnPointEntityRecord = v4;
      }
      pos = g_streamPosGlob.pos;
      varSpawnPointRecordList = (SpawnPointRecordList *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_Spawner
==============
*/
void Preload_Spawner(const DBStreamStart streamStart)
{
  Spawner *v1; 
  SpawnerField *v2; 
  __int64 numFields; 
  SpawnerField *i; 
  scr_string_t *v5; 
  scr_string_t *v6; 

  Load_Stream(streamStart, varSpawner, 0x38ui64);
  v1 = varSpawner;
  if ( varSpawner->fields )
  {
    v2 = varSpawnerField;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varSpawnerField = (SpawnerField *)g_streamPosGlob.pos;
    numFields = varSpawner->numFields;
    Load_Stream(AtStart, g_streamPosGlob.pos, 16 * numFields);
    for ( i = varSpawnerField; numFields; --numFields )
    {
      varSpawnerField = i;
      Load_Stream(NotAtStart, i, 0x10ui64);
      v5 = varscr_string_t;
      varscr_string_t = &varSpawnerField->key;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = &varSpawnerField->value;
      Preload_scr_string_t(NotAtStart);
      ++i;
      varscr_string_t = v5;
    }
    v1 = varSpawner;
    varSpawnerField = v2;
  }
  v6 = varscr_string_t;
  varscr_string_t = &v1->targetname;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = &varSpawner->classname;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = v6;
}

/*
==============
Preload_SpawnerArray
==============
*/
void Preload_SpawnerArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  Spawner *i; 
  Spawner *v4; 
  SpawnerField *v5; 
  __int64 numFields; 
  SpawnerField *j; 
  scr_string_t *v8; 
  scr_string_t *v9; 

  v2 = count;
  Load_Stream(streamStart, varSpawner, 56 * count);
  for ( i = varSpawner; v2; --v2 )
  {
    varSpawner = i;
    Load_Stream(NotAtStart, i, 0x38ui64);
    v4 = varSpawner;
    if ( varSpawner->fields )
    {
      v5 = varSpawnerField;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varSpawnerField = (SpawnerField *)g_streamPosGlob.pos;
      numFields = varSpawner->numFields;
      Load_Stream(AtStart, g_streamPosGlob.pos, 16 * numFields);
      for ( j = varSpawnerField; numFields; --numFields )
      {
        varSpawnerField = j;
        Load_Stream(NotAtStart, j, 0x10ui64);
        v8 = varscr_string_t;
        varscr_string_t = &varSpawnerField->key;
        Preload_scr_string_t(NotAtStart);
        varscr_string_t = &varSpawnerField->value;
        Preload_scr_string_t(NotAtStart);
        ++j;
        varscr_string_t = v8;
      }
      v4 = varSpawner;
      varSpawnerField = v5;
    }
    v9 = varscr_string_t;
    varscr_string_t = &v4->targetname;
    Preload_scr_string_t(NotAtStart);
    varscr_string_t = &varSpawner->classname;
    Preload_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v9;
  }
}

/*
==============
Preload_SpawnerField
==============
*/
void Preload_SpawnerField(const DBStreamStart streamStart)
{
  scr_string_t *v1; 

  Load_Stream(streamStart, varSpawnerField, 0x10ui64);
  v1 = varscr_string_t;
  varscr_string_t = &varSpawnerField->key;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = &varSpawnerField->value;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = v1;
}

/*
==============
Preload_SpawnerFieldArray
==============
*/
void Preload_SpawnerFieldArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SpawnerField *i; 
  scr_string_t *v4; 

  v2 = count;
  Load_Stream(streamStart, varSpawnerField, 16 * count);
  for ( i = varSpawnerField; v2; --v2 )
  {
    varSpawnerField = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    v4 = varscr_string_t;
    varscr_string_t = &varSpawnerField->key;
    Preload_scr_string_t(NotAtStart);
    varscr_string_t = &varSpawnerField->value;
    Preload_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v4;
  }
}

/*
==============
Preload_SpawnerFieldStream
==============
*/
void Preload_SpawnerFieldStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  scr_string_t *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 40294, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varSpawnerField;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      v4 = varscr_string_t;
      varscr_string_t = &varSpawnerField->key;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = &varSpawnerField->value;
      Preload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varSpawnerField = (SpawnerField *)g_streamPosGlob.pos;
      varscr_string_t = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_SpawnerList
==============
*/
void Preload_SpawnerList(const DBStreamStart streamStart)
{
  Spawner *v1; 
  __int64 spawnerCount; 
  Spawner *i; 

  Load_Stream(streamStart, varSpawnerList, 0x10ui64);
  if ( varSpawnerList->spanwerList )
  {
    v1 = varSpawner;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varSpawner = (Spawner *)g_streamPosGlob.pos;
    spawnerCount = varSpawnerList->spawnerCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 56 * spawnerCount);
    for ( i = varSpawner; spawnerCount; --spawnerCount )
    {
      varSpawner = i;
      Preload_Spawner(NotAtStart);
      ++i;
    }
    varSpawner = v1;
  }
}

/*
==============
Preload_SpawnerListArray
==============
*/
void Preload_SpawnerListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SpawnerList *i; 
  Spawner *v4; 
  __int64 spawnerCount; 
  Spawner *j; 

  v2 = count;
  Load_Stream(streamStart, varSpawnerList, 16 * count);
  for ( i = varSpawnerList; v2; --v2 )
  {
    varSpawnerList = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    if ( varSpawnerList->spanwerList )
    {
      v4 = varSpawner;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varSpawner = (Spawner *)g_streamPosGlob.pos;
      spawnerCount = varSpawnerList->spawnerCount;
      Load_Stream(AtStart, g_streamPosGlob.pos, 56 * spawnerCount);
      for ( j = varSpawner; spawnerCount; --spawnerCount )
      {
        varSpawner = j;
        Preload_Spawner(NotAtStart);
        ++j;
      }
      varSpawner = v4;
    }
    ++i;
  }
}

/*
==============
Preload_SpawnerListStream
==============
*/
void Preload_SpawnerListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  Spawner *v4; 
  __int64 spawnerCount; 
  Spawner *i; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 40634, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varSpawnerList;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      if ( varSpawnerList->spanwerList )
      {
        v4 = varSpawner;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varSpawner = (Spawner *)g_streamPosGlob.pos;
        spawnerCount = varSpawnerList->spawnerCount;
        Load_Stream(AtStart, g_streamPosGlob.pos, 56 * spawnerCount);
        for ( i = varSpawner; spawnerCount; --spawnerCount )
        {
          varSpawner = i;
          Preload_Spawner(NotAtStart);
          ++i;
        }
        varSpawner = v4;
      }
      pos = g_streamPosGlob.pos;
      varSpawnerList = (SpawnerList *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_SpawnerStream
==============
*/
void Preload_SpawnerStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  Spawner *v4; 
  SpawnerField *v5; 
  __int64 numFields; 
  SpawnerField *i; 
  scr_string_t *v8; 
  scr_string_t *v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 40533, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varSpawner;
    do
    {
      Load_Stream(AtStart, pos, 0x38ui64);
      v4 = varSpawner;
      if ( varSpawner->fields )
      {
        v5 = varSpawnerField;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varSpawnerField = (SpawnerField *)g_streamPosGlob.pos;
        numFields = varSpawner->numFields;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16 * numFields);
        for ( i = varSpawnerField; numFields; --numFields )
        {
          varSpawnerField = i;
          Load_Stream(NotAtStart, i, 0x10ui64);
          v8 = varscr_string_t;
          varscr_string_t = &varSpawnerField->key;
          Preload_scr_string_t(NotAtStart);
          varscr_string_t = &varSpawnerField->value;
          Preload_scr_string_t(NotAtStart);
          ++i;
          varscr_string_t = v8;
        }
        v4 = varSpawner;
        varSpawnerField = v5;
      }
      v9 = varscr_string_t;
      varscr_string_t = &v4->targetname;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = &varSpawner->classname;
      Preload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varSpawner = (Spawner *)g_streamPosGlob.pos;
      varscr_string_t = v9;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_SplinePointEntityRecord
==============
*/
void Preload_SplinePointEntityRecord(const DBStreamStart streamStart)
{
  scr_string_t *v1; 

  Load_Stream(streamStart, varSplinePointEntityRecord, 0xA8ui64);
  v1 = varscr_string_t;
  varscr_string_t = &varSplinePointEntityRecord->splineNodeLabel;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = &varSplinePointEntityRecord->targetname;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = &varSplinePointEntityRecord->target;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = &varSplinePointEntityRecord->string;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = v1;
}

/*
==============
Preload_SplinePointEntityRecordArray
==============
*/
void Preload_SplinePointEntityRecordArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SplinePointEntityRecord *i; 
  scr_string_t *v4; 

  v2 = count;
  Load_Stream(streamStart, varSplinePointEntityRecord, 168 * count);
  for ( i = varSplinePointEntityRecord; v2; --v2 )
  {
    varSplinePointEntityRecord = i;
    Load_Stream(NotAtStart, i, 0xA8ui64);
    v4 = varscr_string_t;
    varscr_string_t = &varSplinePointEntityRecord->splineNodeLabel;
    Preload_scr_string_t(NotAtStart);
    varscr_string_t = &varSplinePointEntityRecord->targetname;
    Preload_scr_string_t(NotAtStart);
    varscr_string_t = &varSplinePointEntityRecord->target;
    Preload_scr_string_t(NotAtStart);
    varscr_string_t = &varSplinePointEntityRecord->string;
    Preload_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v4;
  }
}

/*
==============
Preload_SplinePointEntityRecordStream
==============
*/
void Preload_SplinePointEntityRecordStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  scr_string_t *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 39573, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varSplinePointEntityRecord;
    do
    {
      Load_Stream(AtStart, pos, 0xA8ui64);
      v4 = varscr_string_t;
      varscr_string_t = &varSplinePointEntityRecord->splineNodeLabel;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = &varSplinePointEntityRecord->targetname;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = &varSplinePointEntityRecord->target;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = &varSplinePointEntityRecord->string;
      Preload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varSplinePointEntityRecord = (SplinePointEntityRecord *)g_streamPosGlob.pos;
      varscr_string_t = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_SplinePointRecordList
==============
*/
void Preload_SplinePointRecordList(const DBStreamStart streamStart)
{
  SplinePointEntityRecord *v1; 
  __int64 splinePointCount; 
  SplinePointEntityRecord *i; 

  Load_Stream(streamStart, varSplinePointRecordList, 0x10ui64);
  if ( varSplinePointRecordList->splinePoints )
  {
    v1 = varSplinePointEntityRecord;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varSplinePointEntityRecord = (SplinePointEntityRecord *)g_streamPosGlob.pos;
    splinePointCount = varSplinePointRecordList->splinePointCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 168 * splinePointCount);
    for ( i = varSplinePointEntityRecord; splinePointCount; --splinePointCount )
    {
      varSplinePointEntityRecord = i;
      Preload_SplinePointEntityRecord(NotAtStart);
      ++i;
    }
    varSplinePointEntityRecord = v1;
  }
}

/*
==============
Preload_SplinePointRecordListArray
==============
*/
void Preload_SplinePointRecordListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SplinePointRecordList *i; 
  SplinePointEntityRecord *v4; 
  __int64 splinePointCount; 
  SplinePointEntityRecord *j; 

  v2 = count;
  Load_Stream(streamStart, varSplinePointRecordList, 16 * count);
  for ( i = varSplinePointRecordList; v2; --v2 )
  {
    varSplinePointRecordList = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    if ( varSplinePointRecordList->splinePoints )
    {
      v4 = varSplinePointEntityRecord;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varSplinePointEntityRecord = (SplinePointEntityRecord *)g_streamPosGlob.pos;
      splinePointCount = varSplinePointRecordList->splinePointCount;
      Load_Stream(AtStart, g_streamPosGlob.pos, 168 * splinePointCount);
      for ( j = varSplinePointEntityRecord; splinePointCount; --splinePointCount )
      {
        varSplinePointEntityRecord = j;
        Preload_SplinePointEntityRecord(NotAtStart);
        ++j;
      }
      varSplinePointEntityRecord = v4;
    }
    ++i;
  }
}

/*
==============
Preload_SplinePointRecordListStream
==============
*/
void Preload_SplinePointRecordListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  SplinePointEntityRecord *v4; 
  __int64 splinePointCount; 
  SplinePointEntityRecord *i; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 39697, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varSplinePointRecordList;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      if ( varSplinePointRecordList->splinePoints )
      {
        v4 = varSplinePointEntityRecord;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varSplinePointEntityRecord = (SplinePointEntityRecord *)g_streamPosGlob.pos;
        splinePointCount = varSplinePointRecordList->splinePointCount;
        Load_Stream(AtStart, g_streamPosGlob.pos, 168 * splinePointCount);
        for ( i = varSplinePointEntityRecord; splinePointCount; --splinePointCount )
        {
          varSplinePointEntityRecord = i;
          Preload_SplinePointEntityRecord(NotAtStart);
          ++i;
        }
        varSplinePointEntityRecord = v4;
      }
      pos = g_streamPosGlob.pos;
      varSplinePointRecordList = (SplinePointRecordList *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_SplineRecordList
==============
*/
void Preload_SplineRecordList(const DBStreamStart streamStart)
{
  SplinePointRecordList *v1; 
  __int64 splineCount; 
  SplinePointRecordList *i; 

  Load_Stream(streamStart, varSplineRecordList, 0x10ui64);
  if ( varSplineRecordList->splines )
  {
    v1 = varSplinePointRecordList;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varSplinePointRecordList = (SplinePointRecordList *)g_streamPosGlob.pos;
    splineCount = varSplineRecordList->splineCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 16 * splineCount);
    for ( i = varSplinePointRecordList; splineCount; --splineCount )
    {
      varSplinePointRecordList = i;
      Preload_SplinePointRecordList(NotAtStart);
      ++i;
    }
    varSplinePointRecordList = v1;
  }
}

/*
==============
Preload_SplineRecordListArray
==============
*/
void Preload_SplineRecordListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  SplineRecordList *i; 
  SplinePointRecordList *v4; 
  __int64 splineCount; 
  SplinePointRecordList *j; 

  v2 = count;
  Load_Stream(streamStart, varSplineRecordList, 16 * count);
  for ( i = varSplineRecordList; v2; --v2 )
  {
    varSplineRecordList = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    if ( varSplineRecordList->splines )
    {
      v4 = varSplinePointRecordList;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varSplinePointRecordList = (SplinePointRecordList *)g_streamPosGlob.pos;
      splineCount = varSplineRecordList->splineCount;
      Load_Stream(AtStart, g_streamPosGlob.pos, 16 * splineCount);
      for ( j = varSplinePointRecordList; splineCount; --splineCount )
      {
        varSplinePointRecordList = j;
        Preload_SplinePointRecordList(NotAtStart);
        ++j;
      }
      varSplinePointRecordList = v4;
    }
    ++i;
  }
}

/*
==============
Preload_SplineRecordListStream
==============
*/
void Preload_SplineRecordListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  SplinePointRecordList *v4; 
  __int64 splineCount; 
  SplinePointRecordList *i; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 39798, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varSplineRecordList;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      if ( varSplineRecordList->splines )
      {
        v4 = varSplinePointRecordList;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varSplinePointRecordList = (SplinePointRecordList *)g_streamPosGlob.pos;
        splineCount = varSplineRecordList->splineCount;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16 * splineCount);
        for ( i = varSplinePointRecordList; splineCount; --splineCount )
        {
          varSplinePointRecordList = i;
          Preload_SplinePointRecordList(NotAtStart);
          ++i;
        }
        varSplinePointRecordList = v4;
      }
      pos = g_streamPosGlob.pos;
      varSplineRecordList = (SplineRecordList *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_StaticModelCollisionCompressedInstance
==============
*/
void Preload_StaticModelCollisionCompressedInstance(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varStaticModelCollisionCompressedInstance, 0xEui64);
}

/*
==============
Preload_StaticModelCollisionCompressedInstanceArray
==============
*/
void Preload_StaticModelCollisionCompressedInstanceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varStaticModelCollisionCompressedInstance, 14 * count);
}

/*
==============
Preload_StaticModelCollisionCompressedInstanceStream
==============
*/
void Preload_StaticModelCollisionCompressedInstanceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 34163, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varStaticModelCollisionCompressedInstance;
    do
    {
      Load_Stream(AtStart, pos, 0xEui64);
      pos = g_streamPosGlob.pos;
      varStaticModelCollisionCompressedInstance = (StaticModelCollisionCompressedInstance *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_StaticModelCollisionCompressedModel
==============
*/
void Preload_StaticModelCollisionCompressedModel(const DBStreamStart streamStart)
{
  scr_string_t *v1; 
  PhysicsAsset **v2; 
  XModelDetailCollision **v3; 
  StaticModelCollisionCompressedInstance *v4; 

  Load_Stream(streamStart, varStaticModelCollisionCompressedModel, 0x38ui64);
  v1 = varscr_string_t;
  varscr_string_t = &varStaticModelCollisionCompressedModel->name;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = v1;
  v2 = varPhysicsAssetPtr;
  varPhysicsAssetPtr = &varStaticModelCollisionCompressedModel->physicsAsset;
  Preload_PhysicsAssetPtr(NotAtStart);
  varPhysicsAssetPtr = v2;
  v3 = varXModelDetailCollisionPtr;
  varXModelDetailCollisionPtr = &varStaticModelCollisionCompressedModel->detailCollision;
  Preload_XModelDetailCollisionPtr(NotAtStart);
  varXModelDetailCollisionPtr = v3;
  if ( varStaticModelCollisionCompressedModel->instances )
  {
    v4 = varStaticModelCollisionCompressedInstance;
    DB_PatchMem_FixStreamAlignment(1ui64);
    DB_CheckCanIncStreamPos(0i64);
    varStaticModelCollisionCompressedInstance = (StaticModelCollisionCompressedInstance *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 14i64 * varStaticModelCollisionCompressedModel->numInstances);
    varStaticModelCollisionCompressedInstance = v4;
  }
}

/*
==============
Preload_StaticModelCollisionCompressedModelArray
==============
*/
void Preload_StaticModelCollisionCompressedModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  StaticModelCollisionCompressedModel *i; 
  scr_string_t *v4; 
  PhysicsAsset **v5; 
  XModelDetailCollision **v6; 
  StaticModelCollisionCompressedInstance *v7; 

  v2 = count;
  Load_Stream(streamStart, varStaticModelCollisionCompressedModel, 56 * count);
  for ( i = varStaticModelCollisionCompressedModel; v2; --v2 )
  {
    varStaticModelCollisionCompressedModel = i;
    Load_Stream(NotAtStart, i, 0x38ui64);
    v4 = varscr_string_t;
    varscr_string_t = &varStaticModelCollisionCompressedModel->name;
    Preload_scr_string_t(NotAtStart);
    varscr_string_t = v4;
    v5 = varPhysicsAssetPtr;
    varPhysicsAssetPtr = &varStaticModelCollisionCompressedModel->physicsAsset;
    Preload_PhysicsAssetPtr(NotAtStart);
    varPhysicsAssetPtr = v5;
    v6 = varXModelDetailCollisionPtr;
    varXModelDetailCollisionPtr = &varStaticModelCollisionCompressedModel->detailCollision;
    Preload_XModelDetailCollisionPtr(NotAtStart);
    varXModelDetailCollisionPtr = v6;
    if ( varStaticModelCollisionCompressedModel->instances )
    {
      v7 = varStaticModelCollisionCompressedInstance;
      DB_PatchMem_FixStreamAlignment(1ui64);
      DB_CheckCanIncStreamPos(0i64);
      varStaticModelCollisionCompressedInstance = (StaticModelCollisionCompressedInstance *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 14i64 * varStaticModelCollisionCompressedModel->numInstances);
      varStaticModelCollisionCompressedInstance = v7;
    }
    ++i;
  }
}

/*
==============
Preload_StaticModelCollisionCompressedModelList
==============
*/
void Preload_StaticModelCollisionCompressedModelList(const DBStreamStart streamStart)
{
  StaticModelCollisionCompressedModel *v1; 
  __int64 numModels; 
  StaticModelCollisionCompressedModel *i; 

  Load_Stream(streamStart, varStaticModelCollisionCompressedModelList, 0x20ui64);
  if ( varStaticModelCollisionCompressedModelList->models )
  {
    v1 = varStaticModelCollisionCompressedModel;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varStaticModelCollisionCompressedModel = (StaticModelCollisionCompressedModel *)g_streamPosGlob.pos;
    numModels = varStaticModelCollisionCompressedModelList->numModels;
    Load_Stream(AtStart, g_streamPosGlob.pos, 56 * numModels);
    for ( i = varStaticModelCollisionCompressedModel; numModels; --numModels )
    {
      varStaticModelCollisionCompressedModel = i;
      Preload_StaticModelCollisionCompressedModel(NotAtStart);
      ++i;
    }
    varStaticModelCollisionCompressedModel = v1;
  }
}

/*
==============
Preload_StaticModelCollisionCompressedModelListArray
==============
*/
void Preload_StaticModelCollisionCompressedModelListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  StaticModelCollisionCompressedModelList *i; 
  StaticModelCollisionCompressedModel *v4; 
  __int64 numModels; 
  StaticModelCollisionCompressedModel *j; 

  v2 = count;
  Load_Stream(streamStart, varStaticModelCollisionCompressedModelList, 32 * count);
  for ( i = varStaticModelCollisionCompressedModelList; v2; --v2 )
  {
    varStaticModelCollisionCompressedModelList = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    if ( varStaticModelCollisionCompressedModelList->models )
    {
      v4 = varStaticModelCollisionCompressedModel;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varStaticModelCollisionCompressedModel = (StaticModelCollisionCompressedModel *)g_streamPosGlob.pos;
      numModels = varStaticModelCollisionCompressedModelList->numModels;
      Load_Stream(AtStart, g_streamPosGlob.pos, 56 * numModels);
      for ( j = varStaticModelCollisionCompressedModel; numModels; --numModels )
      {
        varStaticModelCollisionCompressedModel = j;
        Preload_StaticModelCollisionCompressedModel(NotAtStart);
        ++j;
      }
      varStaticModelCollisionCompressedModel = v4;
    }
    ++i;
  }
}

/*
==============
Preload_StaticModelCollisionCompressedModelListStream
==============
*/
void Preload_StaticModelCollisionCompressedModelListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  StaticModelCollisionCompressedModel *v4; 
  __int64 numModels; 
  StaticModelCollisionCompressedModel *i; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 34795, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varStaticModelCollisionCompressedModelList;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      if ( varStaticModelCollisionCompressedModelList->models )
      {
        v4 = varStaticModelCollisionCompressedModel;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varStaticModelCollisionCompressedModel = (StaticModelCollisionCompressedModel *)g_streamPosGlob.pos;
        numModels = varStaticModelCollisionCompressedModelList->numModels;
        Load_Stream(AtStart, g_streamPosGlob.pos, 56 * numModels);
        for ( i = varStaticModelCollisionCompressedModel; numModels; --numModels )
        {
          varStaticModelCollisionCompressedModel = i;
          Preload_StaticModelCollisionCompressedModel(NotAtStart);
          ++i;
        }
        varStaticModelCollisionCompressedModel = v4;
      }
      pos = g_streamPosGlob.pos;
      varStaticModelCollisionCompressedModelList = (StaticModelCollisionCompressedModelList *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_StaticModelCollisionCompressedModelStream
==============
*/
void Preload_StaticModelCollisionCompressedModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  scr_string_t *v4; 
  PhysicsAsset **v5; 
  XModelDetailCollision **v6; 
  StaticModelCollisionCompressedInstance *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 34455, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varStaticModelCollisionCompressedModel;
    do
    {
      Load_Stream(AtStart, pos, 0x38ui64);
      v4 = varscr_string_t;
      varscr_string_t = &varStaticModelCollisionCompressedModel->name;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = v4;
      v5 = varPhysicsAssetPtr;
      varPhysicsAssetPtr = &varStaticModelCollisionCompressedModel->physicsAsset;
      Preload_PhysicsAssetPtr(NotAtStart);
      varPhysicsAssetPtr = v5;
      v6 = varXModelDetailCollisionPtr;
      varXModelDetailCollisionPtr = &varStaticModelCollisionCompressedModel->detailCollision;
      Preload_XModelDetailCollisionPtr(NotAtStart);
      varXModelDetailCollisionPtr = v6;
      if ( varStaticModelCollisionCompressedModel->instances )
      {
        v7 = varStaticModelCollisionCompressedInstance;
        DB_PatchMem_FixStreamAlignment(1ui64);
        DB_CheckCanIncStreamPos(0i64);
        varStaticModelCollisionCompressedInstance = (StaticModelCollisionCompressedInstance *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 14i64 * varStaticModelCollisionCompressedModel->numInstances);
        varStaticModelCollisionCompressedInstance = v7;
      }
      pos = g_streamPosGlob.pos;
      varStaticModelCollisionCompressedModel = (StaticModelCollisionCompressedModel *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_StaticModelCollisionInstance
==============
*/
void Preload_StaticModelCollisionInstance(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varStaticModelCollisionInstance, 0x1Cui64);
}

/*
==============
Preload_StaticModelCollisionInstanceArray
==============
*/
void Preload_StaticModelCollisionInstanceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varStaticModelCollisionInstance, 28 * count);
}

/*
==============
Preload_StaticModelCollisionInstanceStream
==============
*/
void Preload_StaticModelCollisionInstanceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 34285, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varStaticModelCollisionInstance;
    do
    {
      Load_Stream(AtStart, pos, 0x1Cui64);
      pos = g_streamPosGlob.pos;
      varStaticModelCollisionInstance = (StaticModelCollisionInstance *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_StaticModelCollisionModel
==============
*/
void Preload_StaticModelCollisionModel(const DBStreamStart streamStart)
{
  scr_string_t *v1; 
  PhysicsAsset **v2; 
  XModelDetailCollision **v3; 
  StaticModelCollisionInstance *v4; 

  Load_Stream(streamStart, varStaticModelCollisionModel, 0x28ui64);
  v1 = varscr_string_t;
  varscr_string_t = &varStaticModelCollisionModel->name;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = v1;
  v2 = varPhysicsAssetPtr;
  varPhysicsAssetPtr = &varStaticModelCollisionModel->physicsAsset;
  Preload_PhysicsAssetPtr(NotAtStart);
  varPhysicsAssetPtr = v2;
  v3 = varXModelDetailCollisionPtr;
  varXModelDetailCollisionPtr = &varStaticModelCollisionModel->detailCollision;
  Preload_XModelDetailCollisionPtr(NotAtStart);
  varXModelDetailCollisionPtr = v3;
  if ( varStaticModelCollisionModel->instances )
  {
    v4 = varStaticModelCollisionInstance;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varStaticModelCollisionInstance = (StaticModelCollisionInstance *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varStaticModelCollisionModel->numInstances);
    varStaticModelCollisionInstance = v4;
  }
}

/*
==============
Preload_StaticModelCollisionModelArray
==============
*/
void Preload_StaticModelCollisionModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  StaticModelCollisionModel *i; 
  scr_string_t *v4; 
  PhysicsAsset **v5; 
  XModelDetailCollision **v6; 
  StaticModelCollisionInstance *v7; 

  v2 = count;
  Load_Stream(streamStart, varStaticModelCollisionModel, 40 * count);
  for ( i = varStaticModelCollisionModel; v2; --v2 )
  {
    varStaticModelCollisionModel = i;
    Load_Stream(NotAtStart, i, 0x28ui64);
    v4 = varscr_string_t;
    varscr_string_t = &varStaticModelCollisionModel->name;
    Preload_scr_string_t(NotAtStart);
    varscr_string_t = v4;
    v5 = varPhysicsAssetPtr;
    varPhysicsAssetPtr = &varStaticModelCollisionModel->physicsAsset;
    Preload_PhysicsAssetPtr(NotAtStart);
    varPhysicsAssetPtr = v5;
    v6 = varXModelDetailCollisionPtr;
    varXModelDetailCollisionPtr = &varStaticModelCollisionModel->detailCollision;
    Preload_XModelDetailCollisionPtr(NotAtStart);
    varXModelDetailCollisionPtr = v6;
    if ( varStaticModelCollisionModel->instances )
    {
      v7 = varStaticModelCollisionInstance;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varStaticModelCollisionInstance = (StaticModelCollisionInstance *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varStaticModelCollisionModel->numInstances);
      varStaticModelCollisionInstance = v7;
    }
    ++i;
  }
}

/*
==============
Preload_StaticModelCollisionModelList
==============
*/
void Preload_StaticModelCollisionModelList(const DBStreamStart streamStart)
{
  StaticModelCollisionModel *v1; 
  __int64 numModels; 
  StaticModelCollisionModel *i; 

  Load_Stream(streamStart, varStaticModelCollisionModelList, 0x18ui64);
  if ( varStaticModelCollisionModelList->models )
  {
    v1 = varStaticModelCollisionModel;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varStaticModelCollisionModel = (StaticModelCollisionModel *)g_streamPosGlob.pos;
    numModels = varStaticModelCollisionModelList->numModels;
    Load_Stream(AtStart, g_streamPosGlob.pos, 40 * numModels);
    for ( i = varStaticModelCollisionModel; numModels; --numModels )
    {
      varStaticModelCollisionModel = i;
      Preload_StaticModelCollisionModel(NotAtStart);
      ++i;
    }
    varStaticModelCollisionModel = v1;
  }
}

/*
==============
Preload_StaticModelCollisionModelListArray
==============
*/
void Preload_StaticModelCollisionModelListArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  StaticModelCollisionModelList *i; 
  StaticModelCollisionModel *v4; 
  __int64 numModels; 
  StaticModelCollisionModel *j; 

  v2 = count;
  Load_Stream(streamStart, varStaticModelCollisionModelList, 24 * count);
  for ( i = varStaticModelCollisionModelList; v2; --v2 )
  {
    varStaticModelCollisionModelList = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    if ( varStaticModelCollisionModelList->models )
    {
      v4 = varStaticModelCollisionModel;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varStaticModelCollisionModel = (StaticModelCollisionModel *)g_streamPosGlob.pos;
      numModels = varStaticModelCollisionModelList->numModels;
      Load_Stream(AtStart, g_streamPosGlob.pos, 40 * numModels);
      for ( j = varStaticModelCollisionModel; numModels; --numModels )
      {
        varStaticModelCollisionModel = j;
        Preload_StaticModelCollisionModel(NotAtStart);
        ++j;
      }
      varStaticModelCollisionModel = v4;
    }
    ++i;
  }
}

/*
==============
Preload_StaticModelCollisionModelListStream
==============
*/
void Preload_StaticModelCollisionModelListStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  StaticModelCollisionModel *v4; 
  __int64 numModels; 
  StaticModelCollisionModel *i; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 34919, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varStaticModelCollisionModelList;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      if ( varStaticModelCollisionModelList->models )
      {
        v4 = varStaticModelCollisionModel;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varStaticModelCollisionModel = (StaticModelCollisionModel *)g_streamPosGlob.pos;
        numModels = varStaticModelCollisionModelList->numModels;
        Load_Stream(AtStart, g_streamPosGlob.pos, 40 * numModels);
        for ( i = varStaticModelCollisionModel; numModels; --numModels )
        {
          varStaticModelCollisionModel = i;
          Preload_StaticModelCollisionModel(NotAtStart);
          ++i;
        }
        varStaticModelCollisionModel = v4;
      }
      pos = g_streamPosGlob.pos;
      varStaticModelCollisionModelList = (StaticModelCollisionModelList *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_StaticModelCollisionModelStream
==============
*/
void Preload_StaticModelCollisionModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  scr_string_t *v4; 
  PhysicsAsset **v5; 
  XModelDetailCollision **v6; 
  StaticModelCollisionInstance *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 34625, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varStaticModelCollisionModel;
    do
    {
      Load_Stream(AtStart, pos, 0x28ui64);
      v4 = varscr_string_t;
      varscr_string_t = &varStaticModelCollisionModel->name;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = v4;
      v5 = varPhysicsAssetPtr;
      varPhysicsAssetPtr = &varStaticModelCollisionModel->physicsAsset;
      Preload_PhysicsAssetPtr(NotAtStart);
      varPhysicsAssetPtr = v5;
      v6 = varXModelDetailCollisionPtr;
      varXModelDetailCollisionPtr = &varStaticModelCollisionModel->detailCollision;
      Preload_XModelDetailCollisionPtr(NotAtStart);
      varXModelDetailCollisionPtr = v6;
      if ( varStaticModelCollisionModel->instances )
      {
        v7 = varStaticModelCollisionInstance;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varStaticModelCollisionInstance = (StaticModelCollisionInstance *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varStaticModelCollisionModel->numInstances);
        varStaticModelCollisionInstance = v7;
      }
      pos = g_streamPosGlob.pos;
      varStaticModelCollisionModel = (StaticModelCollisionModel *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_TriggerHull
==============
*/
void Preload_TriggerHull(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varTriggerHull, 0x20ui64);
}

/*
==============
Preload_TriggerHullArray
==============
*/
void Preload_TriggerHullArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varTriggerHull, 32 * count);
}

/*
==============
Preload_TriggerHullStream
==============
*/
void Preload_TriggerHullStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 35621, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varTriggerHull;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      pos = g_streamPosGlob.pos;
      varTriggerHull = (TriggerHull *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_TriggerModel
==============
*/
void Preload_TriggerModel(const DBStreamStart streamStart)
{
  PhysicsAsset **v1; 

  Load_Stream(streamStart, varTriggerModel, 0x20ui64);
  v1 = varPhysicsAssetPtr;
  varPhysicsAssetPtr = &varTriggerModel->physicsAsset;
  Preload_PhysicsAssetPtr(NotAtStart);
  varPhysicsAssetPtr = v1;
}

/*
==============
Preload_TriggerModelArray
==============
*/
void Preload_TriggerModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  TriggerModel *i; 
  PhysicsAsset **v4; 

  v2 = count;
  Load_Stream(streamStart, varTriggerModel, 32 * count);
  for ( i = varTriggerModel; v2; --v2 )
  {
    varTriggerModel = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    v4 = varPhysicsAssetPtr;
    varPhysicsAssetPtr = &varTriggerModel->physicsAsset;
    Preload_PhysicsAssetPtr(NotAtStart);
    ++i;
    varPhysicsAssetPtr = v4;
  }
}

/*
==============
Preload_TriggerModelStream
==============
*/
void Preload_TriggerModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  PhysicsAsset **v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 35858, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varTriggerModel;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      v4 = varPhysicsAssetPtr;
      varPhysicsAssetPtr = &varTriggerModel->physicsAsset;
      Preload_PhysicsAssetPtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varTriggerModel = (TriggerModel *)g_streamPosGlob.pos;
      varPhysicsAssetPtr = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_TriggerSlab
==============
*/
void Preload_TriggerSlab(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varTriggerSlab, 0x14ui64);
}

/*
==============
Preload_TriggerSlabArray
==============
*/
void Preload_TriggerSlabArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varTriggerSlab, 20 * count);
}

/*
==============
Preload_TriggerSlabStream
==============
*/
void Preload_TriggerSlabStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 35476, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varTriggerSlab;
    do
    {
      Load_Stream(AtStart, pos, 0x14ui64);
      pos = g_streamPosGlob.pos;
      varTriggerSlab = (TriggerSlab *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_TriggerWinding
==============
*/
void Preload_TriggerWinding(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varTriggerWinding, 0x14ui64);
}

/*
==============
Preload_TriggerWindingArray
==============
*/
void Preload_TriggerWindingArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varTriggerWinding, 20 * count);
}

/*
==============
Preload_TriggerWindingPoint
==============
*/
void Preload_TriggerWindingPoint(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varTriggerWindingPoint, 0xCui64);
}

/*
==============
Preload_TriggerWindingPointArray
==============
*/
void Preload_TriggerWindingPointArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varTriggerWindingPoint, 12 * count);
}

/*
==============
Preload_TriggerWindingPointStream
==============
*/
void Preload_TriggerWindingPointStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 35209, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varTriggerWindingPoint;
    do
    {
      Load_Stream(AtStart, pos, 0xCui64);
      pos = g_streamPosGlob.pos;
      varTriggerWindingPoint = (TriggerWindingPoint *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_TriggerWindingStream
==============
*/
void Preload_TriggerWindingStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 35354, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varTriggerWinding;
    do
    {
      Load_Stream(AtStart, pos, 0x14ui64);
      pos = g_streamPosGlob.pos;
      varTriggerWinding = (TriggerWinding *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_VariableType
==============
*/
void Preload_VariableType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varVariableType, 1ui64);
}

/*
==============
Preload_VariableTypeArray
==============
*/
void Preload_VariableTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varVariableType, count);
}

/*
==============
Preload_VariableTypeStream
==============
*/
void Preload_VariableTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 40149, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varVariableType;
    do
    {
      Load_Stream(AtStart, pos, 1ui64);
      pos = g_streamPosGlob.pos;
      varVariableType = (VariableType *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_alignHavokShapeData_t
==============
*/
void Preload_alignHavokShapeData_t(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varalignHavokShapeData_t, 1ui64);
}

/*
==============
Preload_alignHavokShapeData_tArray
==============
*/
void Preload_alignHavokShapeData_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varalignHavokShapeData_t, count);
}

/*
==============
Preload_alignHavokShapeData_tStream
==============
*/
void Preload_alignHavokShapeData_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 39950, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varalignHavokShapeData_t;
    do
    {
      Load_Stream(AtStart, pos, 1ui64);
      pos = g_streamPosGlob.pos;
      varalignHavokShapeData_t = (char *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_clipMap_ptr
==============
*/
void Preload_clipMap_ptr(const DBStreamStart streamStart)
{
  __int64 v1; 
  clipMap_t *v2; 

  Load_Stream(streamStart, varclipMap_ptr, 8ui64);
  DB_PushStreamPos(2u);
  v1 = (__int64)*varclipMap_ptr;
  if ( *varclipMap_ptr )
  {
    if ( v1 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v1 != -2 && v1 != -3 )
    {
      goto LABEL_11;
    }
    v2 = varclipMap_t;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varclipMap_t = (clipMap_t *)g_streamPosGlob.pos;
    if ( v1 == -3 )
      DB_InsertPointer();
    Preload_clipMap_t(AtStart);
    varclipMap_t = v2;
    if ( v1 == -1 )
      DB_PopSharedData();
  }
LABEL_11:
  DB_PopStreamPos();
}

/*
==============
Preload_clipMap_ptrArray
==============
*/
void Preload_clipMap_ptrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  clipMap_t **i; 
  __int64 v4; 
  clipMap_t *v5; 

  v2 = count;
  Load_Stream(streamStart, varclipMap_ptr, 8 * count);
  for ( i = varclipMap_ptr; v2; --v2 )
  {
    varclipMap_ptr = i;
    Load_Stream(NotAtStart, i, 8ui64);
    DB_PushStreamPos(2u);
    v4 = (__int64)*varclipMap_ptr;
    if ( *varclipMap_ptr )
    {
      if ( v4 == -1 )
      {
        DB_PushSharedData();
LABEL_8:
        v5 = varclipMap_t;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varclipMap_t = (clipMap_t *)g_streamPosGlob.pos;
        if ( v4 == -3 )
          DB_InsertPointer();
        Preload_clipMap_t(AtStart);
        varclipMap_t = v5;
        if ( v4 == -1 )
          DB_PopSharedData();
        goto LABEL_12;
      }
      if ( v4 == -2 || v4 == -3 )
        goto LABEL_8;
    }
LABEL_12:
    DB_PopStreamPos();
    ++i;
  }
}

/*
==============
Preload_clipMap_ptrStream
==============
*/
void Preload_clipMap_ptrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  __int64 v4; 
  clipMap_t *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 47542, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varclipMap_ptr;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      DB_PushStreamPos(2u);
      v4 = (__int64)*varclipMap_ptr;
      if ( *varclipMap_ptr )
      {
        if ( v4 == -1 )
        {
          DB_PushSharedData();
LABEL_12:
          v5 = varclipMap_t;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varclipMap_t = (clipMap_t *)g_streamPosGlob.pos;
          if ( v4 == -3 )
            DB_InsertPointer();
          Preload_clipMap_t(AtStart);
          varclipMap_t = v5;
          if ( v4 == -1 )
            DB_PopSharedData();
          goto LABEL_16;
        }
        if ( v4 == -2 || v4 == -3 )
          goto LABEL_12;
      }
LABEL_16:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varclipMap_ptr = (clipMap_t **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_clipMap_t
==============
*/
void Preload_clipMap_t(const DBStreamStart streamStart)
{
  const char **v2; 
  clipMap_t *v3; 
  StaticModelCollisionModelList *v4; 
  __int64 numStaticModelCollisionModelLists; 
  StaticModelCollisionModelList *i; 
  MapEnts **v7; 
  clipMap_t *v8; 
  Stage *v9; 
  MapTriggers *v10; 
  char *v11; 
  CollisionHeatmapEntry *v12; 
  TopDownMapData *topDownMapData; 
  TopDownMapData *v14; 
  const char **v15; 

  DB_PatchMem_PushAsset(19, varclipMap_t);
  Load_Stream(streamStart, varclipMap_t, 0xF8ui64);
  DB_PushStreamPos(8u);
  v2 = varXString;
  varXString = &varclipMap_t->name;
  Preload_XString(NotAtStart);
  v3 = varclipMap_t;
  varXString = v2;
  if ( varclipMap_t->staticModelCollisionModelLists )
  {
    v4 = varStaticModelCollisionModelList;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varStaticModelCollisionModelList = (StaticModelCollisionModelList *)g_streamPosGlob.pos;
    numStaticModelCollisionModelLists = varclipMap_t->numStaticModelCollisionModelLists;
    Load_Stream(AtStart, g_streamPosGlob.pos, 24 * numStaticModelCollisionModelLists);
    for ( i = varStaticModelCollisionModelList; numStaticModelCollisionModelLists; --numStaticModelCollisionModelLists )
    {
      varStaticModelCollisionModelList = i;
      Preload_StaticModelCollisionModelList(NotAtStart);
      ++i;
    }
    v3 = varclipMap_t;
    varStaticModelCollisionModelList = v4;
  }
  v7 = varMapEntsPtr;
  varMapEntsPtr = &v3->mapEnts;
  Preload_MapEntsPtr(NotAtStart);
  v8 = varclipMap_t;
  varMapEntsPtr = v7;
  if ( varclipMap_t->stages )
  {
    v9 = varStage;
    varStage = AllocPreload_Stage();
    Preload_StageArray(AtStart, varclipMap_t->stageCount);
    v8 = varclipMap_t;
    varStage = v9;
  }
  v10 = varMapTriggers;
  varMapTriggers = &v8->stageTrigger;
  Preload_MapTriggers(NotAtStart);
  varMapTriggers = v10;
  if ( varclipMap_t->havokWorldShapeData )
  {
    v11 = varalignHavokShapeData_t;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    varalignHavokShapeData_t = (char *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, varclipMap_t->havokWorldShapeDataSize);
    varalignHavokShapeData_t = v11;
  }
  if ( varclipMap_t->collisionHeatmap )
  {
    v12 = varCollisionHeatmapEntry;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varCollisionHeatmapEntry = (CollisionHeatmapEntry *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varclipMap_t->numCollisionHeatmapEntries);
    varCollisionHeatmapEntry = v12;
  }
  topDownMapData = varclipMap_t->topDownMapData;
  if ( topDownMapData )
  {
    if ( topDownMapData == (TopDownMapData *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( topDownMapData != (TopDownMapData *)-2i64 )
    {
      goto LABEL_18;
    }
    v14 = varTopDownMapData;
    varTopDownMapData = AllocPreload_TopDownMapData();
    Preload_TopDownMapData(AtStart);
    varTopDownMapData = v14;
    if ( topDownMapData == (TopDownMapData *)-1i64 )
      DB_PopSharedData();
  }
LABEL_18:
  v15 = varXString;
  varXString = &varclipMap_t->visionSetName;
  Preload_XString(NotAtStart);
  varXString = v15;
  DB_PopStreamPos();
  DB_PatchMem_PopAsset();
}

/*
==============
Preload_clipMap_tArray
==============
*/
void Preload_clipMap_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  clipMap_t *v3; 
  const char **v4; 
  clipMap_t *v5; 
  StaticModelCollisionModelList *v6; 
  __int64 numStaticModelCollisionModelLists; 
  StaticModelCollisionModelList *i; 
  MapEnts **v9; 
  clipMap_t *v10; 
  Stage *v11; 
  MapTriggers *v12; 
  char *v13; 
  CollisionHeatmapEntry *v14; 
  TopDownMapData *topDownMapData; 
  TopDownMapData *v16; 
  const char **v17; 

  v2 = count;
  Load_Stream(streamStart, varclipMap_t, 248 * count);
  v3 = varclipMap_t;
  if ( v2 )
  {
    while ( 1 )
    {
      varclipMap_t = v3;
      DB_PatchMem_PushAsset(19, v3);
      Load_Stream(NotAtStart, varclipMap_t, 0xF8ui64);
      DB_PushStreamPos(8u);
      v4 = varXString;
      varXString = &varclipMap_t->name;
      Preload_XString(NotAtStart);
      v5 = varclipMap_t;
      varXString = v4;
      if ( varclipMap_t->staticModelCollisionModelLists )
      {
        v6 = varStaticModelCollisionModelList;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varStaticModelCollisionModelList = (StaticModelCollisionModelList *)g_streamPosGlob.pos;
        numStaticModelCollisionModelLists = varclipMap_t->numStaticModelCollisionModelLists;
        Load_Stream(AtStart, g_streamPosGlob.pos, 24 * numStaticModelCollisionModelLists);
        for ( i = varStaticModelCollisionModelList; numStaticModelCollisionModelLists; --numStaticModelCollisionModelLists )
        {
          varStaticModelCollisionModelList = i;
          Preload_StaticModelCollisionModelList(NotAtStart);
          ++i;
        }
        v5 = varclipMap_t;
        varStaticModelCollisionModelList = v6;
      }
      v9 = varMapEntsPtr;
      varMapEntsPtr = &v5->mapEnts;
      Preload_MapEntsPtr(NotAtStart);
      v10 = varclipMap_t;
      varMapEntsPtr = v9;
      if ( varclipMap_t->stages )
      {
        v11 = varStage;
        varStage = AllocPreload_Stage();
        Preload_StageArray(AtStart, varclipMap_t->stageCount);
        v10 = varclipMap_t;
        varStage = v11;
      }
      v12 = varMapTriggers;
      varMapTriggers = &v10->stageTrigger;
      Preload_MapTriggers(NotAtStart);
      varMapTriggers = v12;
      if ( varclipMap_t->havokWorldShapeData )
      {
        v13 = varalignHavokShapeData_t;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varalignHavokShapeData_t = (char *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, varclipMap_t->havokWorldShapeDataSize);
        varalignHavokShapeData_t = v13;
      }
      if ( varclipMap_t->collisionHeatmap )
      {
        v14 = varCollisionHeatmapEntry;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varCollisionHeatmapEntry = (CollisionHeatmapEntry *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varclipMap_t->numCollisionHeatmapEntries);
        varCollisionHeatmapEntry = v14;
      }
      topDownMapData = varclipMap_t->topDownMapData;
      if ( !topDownMapData )
        goto LABEL_19;
      if ( topDownMapData == (TopDownMapData *)-1i64 )
        break;
      if ( topDownMapData == (TopDownMapData *)-2i64 )
        goto LABEL_17;
LABEL_19:
      v17 = varXString;
      varXString = &varclipMap_t->visionSetName;
      Preload_XString(NotAtStart);
      varXString = v17;
      DB_PopStreamPos();
      DB_PatchMem_PopAsset();
      ++v3;
      if ( !--v2 )
        return;
    }
    DB_PushSharedData();
LABEL_17:
    v16 = varTopDownMapData;
    varTopDownMapData = AllocPreload_TopDownMapData();
    Preload_TopDownMapData(AtStart);
    varTopDownMapData = v16;
    if ( topDownMapData == (TopDownMapData *)-1i64 )
      DB_PopSharedData();
    goto LABEL_19;
  }
}

/*
==============
Preload_clipMap_tStream
==============
*/
void Preload_clipMap_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 
  clipMap_t *v5; 
  StaticModelCollisionModelList *v6; 
  __int64 numStaticModelCollisionModelLists; 
  StaticModelCollisionModelList *i; 
  MapEnts **v9; 
  clipMap_t *v10; 
  Stage *v11; 
  MapTriggers *v12; 
  char *v13; 
  CollisionHeatmapEntry *v14; 
  TopDownMapData *topDownMapData; 
  TopDownMapData *v16; 
  const char **v17; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 47427, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varclipMap_t;
    while ( 1 )
    {
      DB_PatchMem_PushAsset(19, pos);
      Load_Stream(AtStart, varclipMap_t, 0xF8ui64);
      DB_PushStreamPos(8u);
      v4 = varXString;
      varXString = &varclipMap_t->name;
      Preload_XString(NotAtStart);
      v5 = varclipMap_t;
      varXString = v4;
      if ( varclipMap_t->staticModelCollisionModelLists )
      {
        v6 = varStaticModelCollisionModelList;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varStaticModelCollisionModelList = (StaticModelCollisionModelList *)g_streamPosGlob.pos;
        numStaticModelCollisionModelLists = varclipMap_t->numStaticModelCollisionModelLists;
        Load_Stream(AtStart, g_streamPosGlob.pos, 24 * numStaticModelCollisionModelLists);
        for ( i = varStaticModelCollisionModelList; numStaticModelCollisionModelLists; --numStaticModelCollisionModelLists )
        {
          varStaticModelCollisionModelList = i;
          Preload_StaticModelCollisionModelList(NotAtStart);
          ++i;
        }
        v5 = varclipMap_t;
        varStaticModelCollisionModelList = v6;
      }
      v9 = varMapEntsPtr;
      varMapEntsPtr = &v5->mapEnts;
      Preload_MapEntsPtr(NotAtStart);
      v10 = varclipMap_t;
      varMapEntsPtr = v9;
      if ( varclipMap_t->stages )
      {
        v11 = varStage;
        varStage = AllocPreload_Stage();
        Preload_StageArray(AtStart, varclipMap_t->stageCount);
        v10 = varclipMap_t;
        varStage = v11;
      }
      v12 = varMapTriggers;
      varMapTriggers = &v10->stageTrigger;
      Preload_MapTriggers(NotAtStart);
      varMapTriggers = v12;
      if ( varclipMap_t->havokWorldShapeData )
      {
        v13 = varalignHavokShapeData_t;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varalignHavokShapeData_t = (char *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, varclipMap_t->havokWorldShapeDataSize);
        varalignHavokShapeData_t = v13;
      }
      if ( varclipMap_t->collisionHeatmap )
      {
        v14 = varCollisionHeatmapEntry;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varCollisionHeatmapEntry = (CollisionHeatmapEntry *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varclipMap_t->numCollisionHeatmapEntries);
        varCollisionHeatmapEntry = v14;
      }
      topDownMapData = varclipMap_t->topDownMapData;
      if ( !topDownMapData )
        goto LABEL_23;
      if ( topDownMapData == (TopDownMapData *)-1i64 )
        break;
      if ( topDownMapData == (TopDownMapData *)-2i64 )
        goto LABEL_21;
LABEL_23:
      v17 = varXString;
      varXString = &varclipMap_t->visionSetName;
      Preload_XString(NotAtStart);
      varXString = v17;
      DB_PopStreamPos();
      DB_PatchMem_PopAsset();
      pos = g_streamPosGlob.pos;
      varclipMap_t = (clipMap_t *)g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_21:
    v16 = varTopDownMapData;
    varTopDownMapData = AllocPreload_TopDownMapData();
    Preload_TopDownMapData(AtStart);
    varTopDownMapData = v16;
    if ( topDownMapData == (TopDownMapData *)-1i64 )
      DB_PopSharedData();
    goto LABEL_23;
  }
}

/*
==============
Preload_cmodel_t
==============
*/
void Preload_cmodel_t(const DBStreamStart streamStart)
{
  PhysicsAsset **v1; 

  Load_Stream(streamStart, varcmodel_t, 0x38ui64);
  v1 = varPhysicsAssetPtr;
  varPhysicsAssetPtr = &varcmodel_t->physicsAsset;
  Preload_PhysicsAssetPtr(NotAtStart);
  varPhysicsAssetPtr = v1;
}

/*
==============
Preload_cmodel_tArray
==============
*/
void Preload_cmodel_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  cmodel_t *i; 
  PhysicsAsset **v4; 

  v2 = count;
  Load_Stream(streamStart, varcmodel_t, 56 * count);
  for ( i = varcmodel_t; v2; --v2 )
  {
    varcmodel_t = i;
    Load_Stream(NotAtStart, i, 0x38ui64);
    v4 = varPhysicsAssetPtr;
    varPhysicsAssetPtr = &varcmodel_t->physicsAsset;
    Preload_PhysicsAssetPtr(NotAtStart);
    ++i;
    varPhysicsAssetPtr = v4;
  }
}

/*
==============
Preload_cmodel_tStream
==============
*/
void Preload_cmodel_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  PhysicsAsset **v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_cm_local_db.h", 35133, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varcmodel_t;
    do
    {
      Load_Stream(AtStart, pos, 0x38ui64);
      v4 = varPhysicsAssetPtr;
      varPhysicsAssetPtr = &varcmodel_t->physicsAsset;
      Preload_PhysicsAssetPtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varcmodel_t = (cmodel_t *)g_streamPosGlob.pos;
      varPhysicsAssetPtr = v4;
      --count;
    }
    while ( count );
  }
}

